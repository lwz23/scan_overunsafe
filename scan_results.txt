Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\build.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\examples\log.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\examples\ls-tree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\commitgraph\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\commitgraph\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\corpus\db.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\corpus\engine.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\corpus\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\corpus\run.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\corpus\trace.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\discover.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\hours\core.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\hours\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\hours\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\index\checkout.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\index\information.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\index\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\mailmap.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\net.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\organize.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\pack\create.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\pack\explode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\pack\index.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\pack\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\pack\multi_index.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\pack\receive.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\pack\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\query\db.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\query\engine\command.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\query\engine\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\query\engine\update.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\query\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\archive.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\attributes\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\attributes\query.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\attributes\validate_baseline.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\clean.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\clone.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\commitgraph\list.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\commitgraph\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\commitgraph\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\config.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\credential.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\dirty.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\exclude.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\fetch.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\fsck.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\index\entries.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\index\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\mailmap.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\odb.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\revision\explain.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\revision\list.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\revision\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\revision\previous_branches.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\revision\resolve.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\status.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\submodule.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\tree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\examples\clone.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: true, Name: main,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\examples\clone.rs
Potential Overunsafe：true

Found function with unsafe block in main:
File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\examples\clone.rs
Start Line: 5, End Line: 50
fn main() -> anyhow::Result<()> {
    let repo_url = std::env::args_os()
        .nth(1)
        .context("The first argument is the repository URL")?;
    let dst = std::env::args_os()
        .nth(2)
        .context("The second argument is the directory to clone the repository into")?;
    unsafe {
        gix::interrupt::init_handler(1, || {})?;
    }
    std::fs::create_dir_all(&dst)?;
    let url = gix::url::parse(repo_url.to_str().unwrap().into())?;
    println!("Url: {:?}", url.to_bstring());
    let mut prepare_clone = gix::prepare_clone(url, &dst)?;
    println!("Cloning {repo_url:?} into {dst:?}...");
    let (mut prepare_checkout, _) = prepare_clone
        .fetch_then_checkout(gix::progress::Discard, &gix::interrupt::IS_INTERRUPTED)?;
    println!(
        "Checking out into {:?} ...", prepare_checkout.repo().work_dir()
        .expect("should be there")
    );
    let (repo, _) = prepare_checkout
        .main_worktree(gix::progress::Discard, &gix::interrupt::IS_INTERRUPTED)?;
    println!("Repo cloned into {:?}", repo.work_dir().expect("directory pre-created"));
    let remote = repo
        .find_default_remote(gix::remote::Direction::Fetch)
        .expect("always present after clone")?;
    println!(
        "Default remote: {} -> {}", remote.name()
        .expect("default remote is always named").as_bstr(), remote
        .url(gix::remote::Direction::Fetch).expect("should be the remote URL")
        .to_bstring(),
    );
    Ok(())
}



Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\examples\init-repo-and-commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\examples\interrupt-handler-allows-graceful-shutdown.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\examples\reversible-interrupt-handlers.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\examples\stats.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\attribute_stack.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\clone\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\clone\checkout.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\clone\fetch\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\clone\fetch\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\clone\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\cache\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\cache\incubate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\cache\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\cache\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\cache\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\overrides.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\snapshot\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\snapshot\credential_helpers.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\snapshot\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\snapshot\_impls.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\keys.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\author.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\branch.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\checkout.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\clone.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\committer.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\core.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\credential.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\diff.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\extensions.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\fetch.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\gitoxide.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\http.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\index.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\mailmap.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\pack.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\protocol.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\push.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\safe.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\ssh.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\status.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\url.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\user.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\traits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\create.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\diff.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\dirwalk\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\dirwalk\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\dirwalk\options.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\discover.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\env.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\ext\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\ext\object_id.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\ext\reference.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\ext\rev_spec.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\ext\tree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\filter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\head\log.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\head\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\head\peel.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\id.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\interrupt.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: deregister,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\interrupt.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: init_handler,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\interrupt.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\mailmap.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\blob.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\errors.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\impls.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\peel.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\tag.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\tree\diff\change.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\tree\diff\for_each.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\tree\diff\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\tree\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\tree\traverse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\open\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\open\options.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\open\permissions.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\open\repository.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\path.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\pathspec.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\prelude.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\progress.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\push.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\reference\edits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\reference\errors.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\reference\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\reference\log.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\reference\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\reference\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\build.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connect.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\fetch\config.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\fetch\error.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\fetch\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\fetch\negotiate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\fetch\receive_pack.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\fetch\update_refs\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\fetch\update_refs\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\fetch\update_refs\update.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\ref_map.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\errors.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\fetch.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\name.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\save.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\url\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\url\rewrite.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\url\scheme_permission.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\attributes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\cache.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\config\branch.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\config\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\config\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\config\transport.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\diff.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\dirwalk.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\filter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\graph.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\identity.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\impls.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\index.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\kind.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\location.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\mailmap.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\object.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\pathspec.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\permissions.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\reference.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\revision.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\shallow.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\state.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\submodule.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\thread_safe.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\revision\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\revision\spec\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\revision\spec\parse\delegate\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\revision\spec\parse\delegate\navigate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\revision\spec\parse\delegate\revision.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\revision\spec\parse\error.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\revision\spec\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\revision\spec\parse\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\revision\walk.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\shallow.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\state.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\status\index_worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\status\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\status\platform.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\submodule\errors.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\submodule\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\tag.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\worktree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\worktree\proxy.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\clone\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\commit\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\config\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\config\tree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\diff\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\gix-init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\gix.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\head\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\id\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\init\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\interrupt.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\object\blob.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\object\commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\object\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\object\tree\diff.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\object\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\reference\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\reference\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\remote\connect.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\remote\fetch.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\remote\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\remote\ref_map.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\remote\save.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\config\config_snapshot\credential_helpers.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\config\config_snapshot\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\config\identity.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\config\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\config\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\config\transport_options.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\excludes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\filter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\object.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\open.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\pathspec.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\reference.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\shallow.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\state.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\submodule.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\revision\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\revision\spec\from_bytes\ambiguous.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\revision\spec\from_bytes\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\revision\spec\from_bytes\peel.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\revision\spec\from_bytes\reflog.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\revision\spec\from_bytes\regex.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\revision\spec\from_bytes\traverse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\revision\spec\from_bytes\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\revision\spec\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\status\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\submodule\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\util\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-actor\src\identity.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-actor\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-actor\src\signature\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-actor\src\signature\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-actor\tests\actor.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-actor\tests\identity\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-actor\tests\signature\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-archive\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-archive\src\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-archive\tests\archive.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\fuzz\fuzz_targets\fuzz_search.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\assignment.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\name.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\search\attributes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\search\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\search\outcome.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\search\refmap.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\source.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\state.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: true, Name: from_bytes,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\state.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\tests\assignment\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\tests\attributes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\tests\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\tests\search\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\tests\state\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-bitmap\src\ewah.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-bitmap\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-blame\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-blame\tests\blame.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-chunk\src\file\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-chunk\src\file\index.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-chunk\src\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-chunk\src\file\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-chunk\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-command\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-command\tests\command.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\fuzz\fuzz_targets\fuzz_file.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\src\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\src\file\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\src\file\commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\src\file\init.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: true, Name: try_from,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\src\file\init.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\src\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\src\file\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\src\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\src\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\tests\access\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\tests\commitgraph.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\benches\large_config_file.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\fuzz\fuzz_targets\fuzz_file.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\fuzz\fuzz_targets\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\access\comfort.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\access\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\access\mutate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\access\raw.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\access\read_only.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\impls.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\includes\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\includes\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\init\comfort.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\init\from_env.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\init\from_paths.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\init\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\init\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\meta.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\mutable\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\mutable\multi_value.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\mutable\section.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\mutable\value.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\section\body.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\section\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\key.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\lookup.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\comment.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\error.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\event.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\events.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\nom\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\nom\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\section\header.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\section\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\section\unvalidated.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\source.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\value\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\value\normalize.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\config.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\access\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\access\mutate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\access\raw\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\access\raw\raw_multi_value.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\access\raw\raw_value.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\access\raw\set_existing_raw_value.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\access\raw\set_raw_value.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\access\read_only.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\impls\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\comfort.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\from_env.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\from_paths\includes\conditional\gitdir\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\from_paths\includes\conditional\gitdir\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\from_paths\includes\conditional\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\from_paths\includes\conditional\onbranch.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\from_paths\includes\unconditional.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\from_paths\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\from_str.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\mutable\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\mutable\multi_value.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\mutable\section.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\mutable\value.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\resolve_includes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\key\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\mem.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\parse\error.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\parse\from_bytes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\parse\section.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\source\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\value\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\value\normalize.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\fuzz\fuzz_targets\fuzz_value.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\src\boolean.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\src\color.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\src\integer.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\src\path.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: true, Name: home_for_user,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\src\path.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: true, Name: home_for_user,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\src\path.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\src\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\tests\value\boolean.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\tests\value\color.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\tests\value\integer.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\tests\value\main.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\tests\value\path.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\examples\custom-helper.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\examples\git-credential-lite.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\examples\invoke-git-credential.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\src\helper\cascade.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\src\helper\invoke.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\src\helper\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\src\program\main.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\src\program\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\src\protocol\context\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\src\protocol\context\serde.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\src\protocol\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\tests\credentials.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\tests\helper\cascade.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\tests\helper\context.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\tests\helper\invoke.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\tests\helper\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\tests\program\from_custom_definition.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\tests\program\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\tests\protocol\context.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\tests\protocol\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\fuzz\fuzz_targets\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\src\time\format.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\src\time\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\src\time\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\src\time\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\tests\date.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\tests\time\baseline.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\tests\time\format.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\tests\time\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\tests\time\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\blob\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\blob\pipeline.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\blob\platform.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\rewrites\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\rewrites\tracker.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\tree\changes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\tree\recorder.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\tree\visit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\tests\blob\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\tests\blob\pipeline.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\tests\blob\platform.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\tests\diff.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\tests\rewrites\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\tests\rewrites\tracker.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\tests\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\src\entry.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\src\walk\classify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\src\walk\function.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\src\walk\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\src\walk\readdir.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\tests\dir.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\tests\dir_walk_cwd.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\tests\walk\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\tests\walk_utils\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\src\is.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\src\path.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\src\repository.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\src\upwards\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\src\upwards\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\src\upwards\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\tests\discover.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\tests\isolated.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\tests\is_git\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\tests\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\tests\path\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\tests\upwards\ceiling_dirs.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\tests\upwards\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\cache.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\fs.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\hash.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\interrupt.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\parallel\eager_iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\parallel\in_order.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\parallel\in_parallel.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: true, Name: in_parallel_with_slice,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\parallel\in_parallel.rs
Potential Overunsafe：true

Found function with unsafe block in in_parallel_with_slice:
File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\parallel\in_parallel.rs
Start Line: 191, End Line: 302
/// An experiment to have fine-grained per-item parallelization with built-in aggregation via thread state.
/// This is only good for operations where near-random access isn't detrimental, so it's not usually great
/// for file-io as it won't make use of sorted inputs well.
/// Note that `periodic` is not guaranteed to be called in case other threads come up first and finish too fast.
/// `consume(&mut item, &mut stat, &Scope, &threads_available, &should_interrupt)` is called for performing the actual computation.
/// Note that `threads_available` should be decremented to start a thread that can steal your own work (as stored in `item`),
/// which allows callees to implement their own work-stealing in case the work is distributed unevenly.
/// Work stealing should only start after having processed at least one item to give all threads naturally operating on the slice
/// some time to start. Starting threads while slice-workers are still starting up would lead to over-allocation of threads,
/// which is why the number of threads left may turn negative. Once threads are started and stopped, be sure to adjust
/// the thread-count accordingly.
pub fn in_parallel_with_slice<I, S, R, E>(
    input: &mut [I],
    thread_limit: Option<usize>,
    new_thread_state: impl FnOnce(usize) -> S + Send + Clone,
    consume: impl FnMut(
        &mut I,
        &mut S,
        &AtomicIsize,
        &AtomicBool,
    ) -> Result<(), E> + Send + Clone,
    mut periodic: impl FnMut() -> Option<std::time::Duration> + Send,
    state_to_rval: impl FnOnce(S) -> R + Send + Clone,
) -> Result<Vec<R>, E>
where
    I: Send,
    E: Send,
    R: Send,
{
    let num_threads = num_threads(thread_limit);
    let mut results = Vec::with_capacity(num_threads);
    let stop_everything = &AtomicBool::default();
    let index = &AtomicUsize::default();
    let threads_left = &AtomicIsize::new(num_threads as isize);
    std::thread::scope({
        move |s| {
            std::thread::Builder::new()
                .name("gitoxide.in_parallel_with_slice.watch-interrupts".into())
                .spawn_scoped(
                    s,
                    {
                        move || {
                            loop {
                                if stop_everything.load(Ordering::Relaxed) {
                                    break;
                                }
                                match periodic() {
                                    Some(duration) => std::thread::sleep(duration),
                                    None => {
                                        stop_everything.store(true, Ordering::Relaxed);
                                        break;
                                    }
                                }
                            }
                        }
                    },
                )
                .expect("valid name");
            let input_len = input.len();
            struct Input<I>(
                *mut I,
            )
            where
                I: Send;
            #[allow(unsafe_code)]
            unsafe impl<I> Send for Input<I>
            where
                I: Send,
            {}
            let threads: Vec<_> = (0..num_threads)
                .map(|thread_id| {
                    std::thread::Builder::new()
                        .name(
                            format!(
                                "gitoxide.in_parallel_with_slice.produce.{thread_id}"
                            ),
                        )
                        .spawn_scoped(
                            s,
                            {
                                let new_thread_state = new_thread_state.clone();
                                let state_to_rval = state_to_rval.clone();
                                let mut consume = consume.clone();
                                let input = Input(input.as_mut_ptr());
                                move || {
                                    let _ = &input;
                                    threads_left.fetch_sub(1, Ordering::SeqCst);
                                    let mut state = new_thread_state(thread_id);
                                    let res = (|| {
                                        while let Ok(input_index) = index
                                            .fetch_update(
                                                Ordering::SeqCst,
                                                Ordering::SeqCst,
                                                |x| { (x < input_len).then_some(x + 1) },
                                            )
                                        {
                                            if stop_everything.load(Ordering::Relaxed) {
                                                break;
                                            }
                                            let item = {
                                                #[allow(unsafe_code)]
                                                unsafe { &mut *input.0.add(input_index) }
                                            };
                                            if let Err(err) = consume(
                                                item,
                                                &mut state,
                                                threads_left,
                                                stop_everything,
                                            ) {
                                                stop_everything.store(true, Ordering::Relaxed);
                                                return Err(err);
                                            }
                                        }
                                        Ok(state_to_rval(state))
                                    })();
                                    threads_left.fetch_add(1, Ordering::SeqCst);
                                    res
                                }
                            },
                        )
                        .expect("valid name")
                })
                .collect();
            for thread in threads {
                match thread.join() {
                    Ok(res) => {
                        results.push(res?);
                    }
                    Err(err) => {
                        stop_everything.store(true, Ordering::Relaxed);
                        std::panic::resume_unwind(err);
                    }
                }
            }
            stop_everything.store(true, Ordering::Relaxed);
            Ok(results)
        }
    })
}



Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\parallel\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\parallel\reduce.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\parallel\serial.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\progress.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\threading.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\zlib\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\zlib\stream\deflate\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\zlib\stream\deflate\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\zlib\stream\inflate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\zlib\stream\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\tests\features.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\tests\hash.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\tests\parallel\in_order_iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\tests\parallel\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\tests\parallel_shared.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\tests\parallel_shared_threaded.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\tests\parallel_threaded.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\tests\pipe.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\tests\trace\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fetchhead\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\examples\arrow.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\driver\apply.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\driver\delayed.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\driver\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\driver\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\driver\process\client.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\driver\process\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\driver\process\server.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\driver\shutdown.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\eol\convert_to_git.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\eol\convert_to_worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\eol\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\eol\utils.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\ident.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\pipeline\convert.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\pipeline\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\pipeline\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\worktree\encode_to_git.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: true, Name: encode_to_git,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\worktree\encode_to_git.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\worktree\encode_to_worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\worktree\encoding.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\worktree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\driver\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\eol\convert_to_git.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\eol\convert_to_worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\eol\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\filter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\ident\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\pipeline\convert_to_git.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\pipeline\convert_to_worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\pipeline\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\worktree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\src\capabilities.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\src\dir\create.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\src\dir\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\src\dir\remove.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\src\read_dir.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\src\snapshot.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\src\stack.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\src\symlink.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\tests\capabilities\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\tests\current_dir.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\tests\dir\create.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\tests\dir\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\tests\dir\remove.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\tests\fs.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\tests\read_dir\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\tests\stack\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fsck\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fsck\tests\connectivity\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fsck\tests\fsck.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\src\pattern.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\src\search\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\src\search\pattern.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\src\wildmatch.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\tests\glob.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\tests\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\tests\pattern\matching.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\tests\pattern\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\tests\search\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\tests\search\pattern.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\tests\wildmatch\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\src\kind.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\src\object_id.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\src\oid.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: try_from_bytes,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\src\oid.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\src\oid.rs
Start Line: 78, End Line: 88
/// Try to create a shared object id from a slice of bytes representing a hash `digest`
#[inline]
pub fn try_from_bytes(digest: &[u8]) -> Result<&Self, Error> {
    match digest.len() {
        20 => {
            Ok(#[allow(unsafe_code)] unsafe { &*(digest as *const [u8] as *const oid) })
        }
        len => Err(Error::InvalidByteSliceLength(len)),
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_bytes,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\src\oid.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\src\oid.rs
Start Line: 97, End Line: 102
/// Only from code that statically assures correct sizes using array conversions.
pub(crate) fn from_bytes(value: &[u8]) -> &Self {
    #[allow(unsafe_code)] unsafe { &*(value as *const [u8] as *const oid) }
}



Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\src\prefix.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\tests\hash.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\tests\kind\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\tests\object_id\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\tests\oid\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\tests\prefix\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hashtable\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hashtable\tests\hashtable.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ignore\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ignore\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ignore\src\search.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ignore\tests\ignore.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ignore\tests\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ignore\tests\search\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\access\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\access\sparse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\decode\entries.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\decode\header.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\decode\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\entry\flags.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\entry\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\entry\mode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\entry\stat.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\entry\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\end_of_index_entry\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\end_of_index_entry\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\end_of_index_entry\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\fs_monitor.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\index_entry_offset_table.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\link.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\resolve_undo.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\sparse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\tree\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\tree\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\tree\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\untracked_cache.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\file\init.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: true, Name: at,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\file\init.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\file\init.rs
Start Line: 53, End Line: 105
/// Open an index file at `path` with `options`, assuming `object_hash` is used throughout the file. If `skip_hash` is `true`,
/// we will not get or compare the checksum of the index at all, which generally increases performance of this method by a factor
/// of 2 or more.
///
/// Note that the verification of the file hash depends on `options`, and even then it's performed after the file was read and not
/// before it is read. That way, invalid files would see a more descriptive error message as we try to parse them.
pub fn at(
    path: impl Into<PathBuf>,
    object_hash: gix_hash::Kind,
    skip_hash: bool,
    options: decode::Options,
) -> Result<Self, Error> {
    let _span = gix_features::trace::detail!("gix_index::File::at()");
    let path = path.into();
    let (data, mtime) = {
        let mut file = std::fs::File::open(&path)?;
        #[allow(unsafe_code)]
        let data = unsafe { memmap2::MmapOptions::new().map_copy_read_only(&file)? };
        if !skip_hash {
            let expected = gix_hash::ObjectId::from_bytes_or_panic(
                &data[data.len() - object_hash.len_in_bytes()..],
            );
            if !expected.is_null() {
                let _span = gix_features::trace::detail!(
                    "gix::open_index::hash_index", path = ? path
                );
                let meta = file.metadata()?;
                let num_bytes_to_hash = meta.len() - object_hash.len_in_bytes() as u64;
                let actual_hash = gix_features::hash::bytes(
                    &mut file,
                    num_bytes_to_hash,
                    object_hash,
                    &mut gix_features::progress::Discard,
                    &Default::default(),
                )?;
                if actual_hash != expected {
                    return Err(
                        Error::Decode(decode::Error::ChecksumMismatch {
                            actual_checksum: actual_hash,
                            expected_checksum: expected,
                        }),
                    );
                }
            }
        }
        (data, filetime::FileTime::from_last_modification_time(&file.metadata()?))
    };
    let (state, checksum) = State::from_bytes(&data, mtime, object_hash, options)?;
    let mut file = File { state, path, checksum };
    if let Some(mut link) = file.link.take() {
        link.dissolve_into(&mut file, object_hash, skip_hash, options)?;
    }
    Ok(file)
}



Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\file\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\file\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\fs.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\entry\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\entry\mode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\entry\stat.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\entry\time.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\file\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\file\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\file\read.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\file\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\fs.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\integrate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-lfs\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-lock\src\acquire.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-lock\src\commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-lock\src\file.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-lock\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-lock\tests\all.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-lock\tests\lock\file.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-lock\tests\lock\marker.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-lock\tests\lock\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-macros\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-macros\src\momo.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-macros\tests\macros.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-macros\tests\momo\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-macros\tests\momo\ux\error_if_ineffective.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-macros\tests\momo\ux\error_on_struct.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\src\entry.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\src\snapshot\entry.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\src\snapshot\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\src\snapshot\signature.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\src\snapshot\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\tests\mailmap.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\tests\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\tests\snapshot\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-negotiate\src\consecutive.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-negotiate\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-negotiate\src\noop.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-negotiate\src\skipping.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-negotiate\tests\baseline\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-negotiate\tests\negotiate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-note\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\benches\decode_objects.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\fuzz\fuzz_targets\fuzz_commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\fuzz\fuzz_targets\fuzz_tag.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\fuzz\fuzz_targets\fuzz_tree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\blob.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\commit\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\commit\message\body.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\commit\message\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\commit\message\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\commit\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\commit\ref_iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\commit\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\data.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\encode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\kind.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\object\convert.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\object\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\tag\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\tag\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\tag\ref_iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\tag\write\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\tag\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\traits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\tree\ref_iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\tree\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\tests\commit\from_bytes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\tests\commit\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\tests\commit\message.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\tests\commit\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\tests\encode\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\tests\object.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\tests\object_ref\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\tests\tag\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\tests\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\alternate\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\alternate\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\cache.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\sink.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\handle.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\header.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\load_index.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\load_one.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\metrics.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\prefix.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\structure.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\loose\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\loose\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\loose\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\loose\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\loose\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\traits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\integrate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\alternate\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\find\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\header\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\regression\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\sink\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\store\compound.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\store\dynamic.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\store\linked.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\store\loose.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\store\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\bundle\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\bundle\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\bundle\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\bundle\write\error.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\bundle\write\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\bundle\write\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\from_offsets.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\traverse\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: true, Name: traverse,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\traverse\mod.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\traverse\resolve.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: true, Name: into_child_iter,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\traverse\resolve.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: true, Name: into_child_iter,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\traverse\resolve.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: true, Name: deltas,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\traverse\resolve.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\traverse\util.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: true, Name: get_mut,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\traverse\util.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\traverse\util.rs
Start Line: 44, End Line: 55
#[allow(unsafe_code)]
pub(super) unsafe fn get_mut(&self, index: usize) -> &'a mut T {
    #[cfg(debug_assertions)]
    if index >= self.len {
        panic!("index out of bounds: the len is {} but the index is {index}", self.len);
    }
    unsafe { &mut *self.items.add(index) }
}



Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\tree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\lru.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\object.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\delta.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\entry\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\entry\header.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\entry\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\file\decode\entry.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\file\decode\header.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\file\decode\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\file\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\file\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\header.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\input\bytes_to_entries.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\input\entries_to_bytes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\input\entry.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\input\lookup_ref_delta_objects.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\input\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\input\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\bytes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\count\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\count\objects\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\count\objects\reduce.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\count\objects\tree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\count\objects\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\count\objects\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\entry\iter_from_counts.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\entry\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\find_traits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\encode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\traverse\error.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\traverse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\traverse\reduce.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\traverse\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\traverse\with_index.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\traverse\with_lookup.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\write\error.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\write\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\lib.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: true, Name: read_only,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\lib.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\multi_index\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\multi_index\chunk.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\multi_index\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\multi_index\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\multi_index\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\multi_index\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\integrate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\bundle.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\data\file.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\data\header.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\data\input.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\data\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\data\output\count_and_entries.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\data\output\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\index.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\multi_index\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\multi_index\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\multi_index\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\multi_index\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\encode\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\encode\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\encode\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\line\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\line\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\line\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\read\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\read\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\read\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\read\sidebands\async_io.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: true, Name: poll_fill_buf,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\read\sidebands\async_io.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\read\sidebands\async_io.rs
Start Line: 238, End Line: 343
fn poll_fill_buf(
    mut self: Pin<&mut Self>,
    cx: &mut Context<'_>,
) -> Poll<std::io::Result<&[u8]>> {
    use std::io;
    use futures_lite::FutureExt;
    {
        let this = self.as_mut().get_mut();
        if this.pos >= this.cap {
            let (ofs, cap) = loop {
                match this.state {
                    State::Idle { ref mut parent } => {
                        let parent = parent.take().expect("parent to be present here");
                        let inactive = parent as *mut _;
                        this.state = State::ReadLine {
                            read_line: parent.read_line().boxed_local(),
                            parent_inactive: Some(inactive),
                        };
                    }
                    State::ReadLine { ref mut read_line, ref mut parent_inactive } => {
                        let line = ready!(read_line.poll(cx));
                        this.state = {
                            let parent = parent_inactive
                                .take()
                                .expect("parent pointer always set");
                            #[allow(unsafe_code)]
                            let parent = unsafe { &mut *parent };
                            State::Idle {
                                parent: Some(parent),
                            }
                        };
                        let line = match line {
                            Some(line) => {
                                line?
                                    .map_err(|err| io::Error::new(io::ErrorKind::Other, err))?
                            }
                            None => break (0, 0),
                        };
                        match this.handle_progress.as_mut() {
                            Some(handle_progress) => {
                                let band = line
                                    .decode_band()
                                    .map_err(|err| io::Error::new(io::ErrorKind::Other, err))?;
                                const ENCODED_BAND: usize = 1;
                                match band {
                                    BandRef::Data(d) => {
                                        if d.is_empty() {
                                            continue;
                                        }
                                        break (U16_HEX_BYTES + ENCODED_BAND, d.len());
                                    }
                                    BandRef::Progress(d) => {
                                        let text = TextRef::from(d).0;
                                        match handle_progress(false, text) {
                                            ProgressAction::Continue => {}
                                            ProgressAction::Interrupt => {
                                                return Poll::Ready(
                                                    Err(
                                                        io::Error::new(
                                                            std::io::ErrorKind::Other,
                                                            "interrupted by user",
                                                        ),
                                                    ),
                                                );
                                            }
                                        };
                                    }
                                    BandRef::Error(d) => {
                                        let text = TextRef::from(d).0;
                                        match handle_progress(true, text) {
                                            ProgressAction::Continue => {}
                                            ProgressAction::Interrupt => {
                                                return Poll::Ready(
                                                    Err(
                                                        io::Error::new(io::ErrorKind::Other, "interrupted by user"),
                                                    ),
                                                );
                                            }
                                        };
                                    }
                                };
                            }
                            None => {
                                break match line.as_slice() {
                                    Some(d) => (U16_HEX_BYTES, d.len()),
                                    None => {
                                        return Poll::Ready(
                                            Err(
                                                io::Error::new(
                                                    io::ErrorKind::UnexpectedEof,
                                                    "encountered non-data line in a data-line only context",
                                                ),
                                            ),
                                        );
                                    }
                                };
                            }
                        }
                    }
                }
            };
            this.cap = cap + ofs;
            this.pos = ofs;
        }
    }
    let range = self.pos..self.cap;
    match &self.get_mut().state {
        State::Idle { parent } => {
            Poll::Ready(
                Ok(&parent.as_ref().expect("parent always available").buf[range]),
            )
        }
        State::ReadLine { .. } => unreachable!("at least in theory"),
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\read\sidebands\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\read\sidebands\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\write\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\write\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\write\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\tests\async-packetline.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\tests\blocking-packetline.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\tests\decode\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\tests\encode\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\tests\read\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\tests\read\sideband.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\tests\write\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\encode\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\encode\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\encode\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\line\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\line\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\line\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\read\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\read\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\read\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\read\sidebands\async_io.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: true, Name: poll_fill_buf,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\read\sidebands\async_io.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\read\sidebands\async_io.rs
Start Line: 240, End Line: 345
fn poll_fill_buf(
    mut self: Pin<&mut Self>,
    cx: &mut Context<'_>,
) -> Poll<std::io::Result<&[u8]>> {
    use std::io;
    use futures_lite::FutureExt;
    {
        let this = self.as_mut().get_mut();
        if this.pos >= this.cap {
            let (ofs, cap) = loop {
                match this.state {
                    State::Idle { ref mut parent } => {
                        let parent = parent.take().expect("parent to be present here");
                        let inactive = parent as *mut _;
                        this.state = State::ReadLine {
                            read_line: parent.read_line().boxed_local(),
                            parent_inactive: Some(inactive),
                        };
                    }
                    State::ReadLine { ref mut read_line, ref mut parent_inactive } => {
                        let line = ready!(read_line.poll(cx));
                        this.state = {
                            let parent = parent_inactive
                                .take()
                                .expect("parent pointer always set");
                            #[allow(unsafe_code)]
                            let parent = unsafe { &mut *parent };
                            State::Idle {
                                parent: Some(parent),
                            }
                        };
                        let line = match line {
                            Some(line) => {
                                line?
                                    .map_err(|err| io::Error::new(io::ErrorKind::Other, err))?
                            }
                            None => break (0, 0),
                        };
                        match this.handle_progress.as_mut() {
                            Some(handle_progress) => {
                                let band = line
                                    .decode_band()
                                    .map_err(|err| io::Error::new(io::ErrorKind::Other, err))?;
                                const ENCODED_BAND: usize = 1;
                                match band {
                                    BandRef::Data(d) => {
                                        if d.is_empty() {
                                            continue;
                                        }
                                        break (U16_HEX_BYTES + ENCODED_BAND, d.len());
                                    }
                                    BandRef::Progress(d) => {
                                        let text = TextRef::from(d).0;
                                        match handle_progress(false, text) {
                                            ProgressAction::Continue => {}
                                            ProgressAction::Interrupt => {
                                                return Poll::Ready(
                                                    Err(
                                                        io::Error::new(
                                                            std::io::ErrorKind::Other,
                                                            "interrupted by user",
                                                        ),
                                                    ),
                                                );
                                            }
                                        };
                                    }
                                    BandRef::Error(d) => {
                                        let text = TextRef::from(d).0;
                                        match handle_progress(true, text) {
                                            ProgressAction::Continue => {}
                                            ProgressAction::Interrupt => {
                                                return Poll::Ready(
                                                    Err(
                                                        io::Error::new(io::ErrorKind::Other, "interrupted by user"),
                                                    ),
                                                );
                                            }
                                        };
                                    }
                                };
                            }
                            None => {
                                break match line.as_slice() {
                                    Some(d) => (U16_HEX_BYTES, d.len()),
                                    None => {
                                        return Poll::Ready(
                                            Err(
                                                io::Error::new(
                                                    io::ErrorKind::UnexpectedEof,
                                                    "encountered non-data line in a data-line only context",
                                                ),
                                            ),
                                        );
                                    }
                                };
                            }
                        }
                    }
                }
            };
            this.cap = cap + ofs;
            this.pos = ofs;
        }
    }
    let range = self.pos..self.cap;
    match &self.get_mut().state {
        State::Idle { parent } => {
            Poll::Ready(
                Ok(&parent.as_ref().expect("parent always available").buf[range]),
            )
        }
        State::ReadLine { .. } => unreachable!("at least in theory"),
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\read\sidebands\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\read\sidebands\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\write\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\write\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\write\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\src\convert.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\src\env\git\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\src\env\git\tests.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: current,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\src\env\git\tests.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\src\env\git\tests.rs
Start Line: 182, End Line: 199
fn current() -> WindowsResult<Self> {
    let mut wow64process = BOOL::default();
    unsafe { IsWow64Process(GetCurrentProcess(), &mut wow64process)? };
    let platform_architecture = if wow64process.as_bool() {
        Self::Is32on64
    } else if cfg!(target_pointer_width = "32") {
        Self::Is32on32
    } else {
        assert!(cfg!(target_pointer_width = "64"));
        Self::Is64on64
    };
    Ok(platform_architecture)
}



Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\src\env\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\src\realpath.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\src\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\tests\convert\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\tests\convert\normalize.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\tests\path.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\tests\realpath\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\tests\util\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\fuzz\fuzz_targets\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\src\defaults.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\src\pattern.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\src\search\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\src\search\matching.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\src\search\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\tests\defaults.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\tests\normalize\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\tests\parse\invalid.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\tests\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\tests\parse\valid.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\tests\pathspec.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\tests\search\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-prompt\examples\askpass.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-prompt\examples\credentials.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-prompt\examples\use-askpass.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-prompt\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-prompt\src\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-prompt\src\unix.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-prompt\tests\options\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-prompt\tests\prompt.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\command\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\command\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\arguments\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\arguments\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\arguments\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\delegate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\error.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\handshake.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\response\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\response\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\response\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch_fn.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\handshake\function.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\handshake\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\handshake\refs\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\handshake\refs\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\handshake\refs\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\handshake\refs\shared.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\handshake\refs\tests.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: project_inner,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\handshake\refs\tests.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\ls_refs.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\remote_progress.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\tests\async-protocol.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\tests\blocking-protocol.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\tests\fetch\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\tests\fetch\response.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\tests\fetch\v1.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\tests\fetch\v2.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\tests\remote_progress\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-quote\src\ansi_c.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-quote\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-quote\src\single.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-quote\tests\quote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-rebase\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\fuzz\fuzz_targets\fuzz_log.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\fuzz\fuzz_targets\fuzz_names.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\fuzz\fuzz_targets\fuzz_packed_buffer.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\fullname.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\log.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\name.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: true, Name: new_unchecked,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\name.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\namespace.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\peel.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\raw.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\log\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\log\line.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\log\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\loose\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\loose\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\loose\reference\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\loose\reference\logiter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\loose\reference\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\loose\reflog\create_or_update\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\loose\reflog.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\overlay_iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\packed.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\raw_ext.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\transaction\commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\transaction\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\transaction\prepare.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\general\handle\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\general\handle\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\general\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\general\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\packed\buffer.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: true, Name: open,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\packed\buffer.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\packed\buffer.rs
Start Line: 76, End Line: 89
/// Open the file at `path` and map it into memory if the file size is larger than `use_memory_map_if_larger_than_bytes`.
///
/// In order to allow fast lookups and optimizations, the contents of the packed refs must be sorted.
/// If that's not the case, they will be sorted on the fly with the data being written into a memory buffer.
pub fn open(
    path: PathBuf,
    use_memory_map_if_larger_than_bytes: u64,
) -> Result<Self, Error> {
    let backing = if std::fs::metadata(&path)?.len()
        <= use_memory_map_if_larger_than_bytes
    {
        packed::Backing::InMemory(std::fs::read(&path)?)
    } else {
        packed::Backing::Mapped(
            #[allow(unsafe_code)]
            unsafe {
                memmap2::MmapOptions::new()
                    .map_copy_read_only(&std::fs::File::open(&path)?)?
            },
        )
    };
    Self::open_with_backing(backing, path)
}



Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\packed\decode\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\packed\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\packed\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\packed\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\packed\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\packed\transaction.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\target.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\transaction\ext.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\transaction\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\log.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\reference.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\store\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\store\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\store\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\store\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\store\reflog.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\transaction\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\transaction\prepare_and_commit\create_or_update\collisions.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\transaction\prepare_and_commit\create_or_update\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\transaction\prepare_and_commit\delete.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\fullname\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\namespace\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\packed\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\packed\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\packed\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\packed\open.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\reference\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\refs.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\store\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\transaction\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\fuzz\fuzz_targets\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\instruction.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\match_group\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\match_group\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\match_group\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\match_group\validate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\spec.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\impls\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\matching\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\match_group\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\parse\fetch.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\parse\invalid.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\parse\push.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\refspec.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\spec\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\write\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\fuzz\fuzz_targets\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\src\describe.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\src\spec\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\src\spec\parse\delegate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\src\spec\parse\function.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: true, Name: long_describe_prefix,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\src\spec\parse\function.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\src\spec\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\describe\format.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\describe\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\revision.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\display.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\anchor\at_symbol.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\anchor\colon_symbol.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\anchor\describe.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\anchor\hash.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\anchor\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\anchor\refnames.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\kind.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\navigate\caret_symbol.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\navigate\colon_symbol.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\navigate\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\navigate\tilde_symbol.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revwalk\src\graph\commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revwalk\src\graph\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revwalk\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revwalk\src\queue.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revwalk\tests\revwalk.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-sec\src\identity.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-sec\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-sec\src\permission.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-sec\src\trust.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-sec\tests\identity\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-sec\tests\sec.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-sequencer\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\index_as_worktree\function.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\index_as_worktree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\index_as_worktree\recorder.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\index_as_worktree\traits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\index_as_worktree\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\index_as_worktree_with_renames\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\index_as_worktree_with_renames\recorder.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\index_as_worktree_with_renames\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\stack.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\tests\stack\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\tests\status\index_as_worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\tests\status\index_as_worktree_with_renames.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\tests\status\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\tests\worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-submodule\src\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-submodule\src\config.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-submodule\src\is_active_platform.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-submodule\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-submodule\tests\file\baseline.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-submodule\tests\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-submodule\tests\submodule.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\examples\delete-tempfiles-on-sigterm-interactive.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\examples\delete-tempfiles-on-sigterm.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\examples\try-deadlock-on-cleanup.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\src\forksafe.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\src\handle.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\src\registry.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\src\signal.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\tests\all.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\tests\registry.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\tests\tempfile\handle.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\tests\tempfile\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tix\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-trace\src\disabled.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-trace\src\enabled.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-trace\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-trace\tests\trace.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\async_io\bufread_ext.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\async_io\connect.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\async_io\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\async_io\request.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\async_io\traits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\bufread_ext.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\connect.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\file.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\http\curl\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\http\curl\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\http\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\http\redirect.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\http\reqwest\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\http\reqwest\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\http\traits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\request.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\ssh\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\ssh\program_kind.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\ssh\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\traits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\capabilities.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\git\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\git\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\git\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\non_io_types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\traits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\tests\async-transport.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\tests\blocking-transport-http.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\tests\blocking-transport.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\tests\client\blocking_io\http\mock.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\tests\client\blocking_io\http\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\tests\client\blocking_io\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\tests\client\capabilities.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\tests\client\git.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\tests\client\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\src\commit\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\src\commit\simple.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\src\commit\topo\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\src\commit\topo\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\src\commit\topo\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\src\tree\breadthfirst.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\src\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\src\tree\recorder.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\tests\commit\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\tests\commit\simple.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\tests\commit\topo.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\tests\traverse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\tests\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tui\src\main.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\fuzz\fuzz_targets\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\src\expand_path.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\src\impls.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\src\scheme.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\access\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\baseline.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\expand_path\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\fuzzed.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\parse\file.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\parse\http.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\parse\invalid.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\parse\ssh.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\url.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\src\backoff.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\src\btoi.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\src\buffers.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\src\str.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\tests\backoff\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\tests\btoi\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\tests\buffers\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\tests\str\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\tests\utils.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\src\path.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\src\reference.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\src\submodule.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\src\tag.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\tests\path\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\tests\reference\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\tests\submodule\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\tests\tag\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\tests\validate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\src\stack\delegate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\src\stack\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\src\stack\platform.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\src\stack\state\attributes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\src\stack\state\ignore.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\src\stack\state\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\tests\integrate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\tests\worktree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\tests\worktree\stack\attributes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\tests\worktree\stack\create_directory.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\tests\worktree\stack\ignore.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\tests\worktree\stack\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-state\src\checkout\chunk.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-state\src\checkout\entry.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-state\src\checkout\function.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-state\src\checkout\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-state\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-state\tests\state\checkout.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-state\tests\state\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-state\tests\worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-stream\src\entry.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-stream\src\from_tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-stream\src\from_tree\traverse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-stream\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-stream\src\protocol.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-stream\tests\stream.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\ein.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\gix.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\plumbing\main.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: true, Name: main,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\plumbing\main.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: true, Name: main,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\plumbing\main.rs
Potential Overunsafe：true

Found function with unsafe block in main:
File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\plumbing\main.rs
Start Line: 55, End Line: 1401
pub fn main() -> Result<()> {
    let args: Args = Args::parse_from(gix::env::args_os());
    #[allow(unsafe_code)]
    unsafe {
        time::util::local_offset::set_soundness(
            time::util::local_offset::Soundness::Unsound,
        );
    }
    let thread_limit = args.threads;
    let verbose = args.verbose;
    let format = args.format;
    let cmd = args.cmd;
    #[cfg_attr(not(feature = "tracing"), allow(unused_mut))]
    #[cfg_attr(feature = "tracing", allow(unused_assignments))]
    let mut trace = false;
    #[cfg(feature = "tracing")] { trace = args.trace }
    let object_hash = args.object_hash;
    let config = args.config;
    let repository = args.repository;
    let repository_path = repository.clone();
    enum Mode {
        Strict,
        StrictWithGitInstallConfig,
        Lenient,
        LenientWithGitInstallConfig,
    }
    let repository = {
        let config = config.clone();
        move |mut mode: Mode| -> Result<gix::Repository> {
            let mut mapping: gix::sec::trust::Mapping<gix::open::Options> = Default::default();
            if !config.is_empty() {
                mode = match mode {
                    Mode::Lenient => Mode::Strict,
                    Mode::LenientWithGitInstallConfig => Mode::StrictWithGitInstallConfig,
                    _ => mode,
                };
            }
            let strict_toggle = matches!(
                mode, Mode::Strict | Mode::StrictWithGitInstallConfig
            ) || args.strict;
            mapping.full = mapping.full.strict_config(strict_toggle);
            mapping.reduced = mapping.reduced.strict_config(strict_toggle);
            let git_installation = matches!(
                mode, Mode::StrictWithGitInstallConfig |
                Mode::LenientWithGitInstallConfig
            );
            let to_match_settings = |mut opts: gix::open::Options| {
                opts.permissions.config.git_binary = git_installation;
                opts.permissions.attributes.git_binary = git_installation;
                if config.is_empty() { opts } else { opts.cli_overrides(config.clone()) }
            };
            mapping.full.modify(to_match_settings);
            mapping.reduced.modify(to_match_settings);
            let mut repo = gix::ThreadSafeRepository::discover_opts(
                    repository,
                    Default::default(),
                    mapping,
                )
                .map(gix::Repository::from)?;
            if !config.is_empty() {
                repo.config_snapshot_mut()
                    .append_config(config.iter(), gix::config::Source::Cli)
                    .context("Unable to parse command-line configuration")?;
            }
            Ok(repo)
        }
    };
    let progress;
    let progress_keep_open;
    #[cfg(feature = "prodash-render-tui")]
    {
        progress = args.progress;
        progress_keep_open = args.progress_keep_open;
    }
    #[cfg(not(feature = "prodash-render-tui"))]
    {
        progress = false;
        progress_keep_open = false;
    }
    let auto_verbose = !progress && !args.no_verbose;
    let should_interrupt = Arc::new(AtomicBool::new(false));
    #[allow(unsafe_code)]
    unsafe {
        gix::interrupt::init_handler(
            1,
            {
                let should_interrupt = Arc::clone(&should_interrupt);
                move || should_interrupt.store(true, Ordering::SeqCst)
            },
        )?;
    }
    match cmd {
        Subcommands::IsClean | Subcommands::IsChanged => {
            let mode = if matches!(cmd, Subcommands::IsClean) {
                core::repository::dirty::Mode::IsClean
            } else {
                core::repository::dirty::Mode::IsDirty
            };
            prepare_and_run(
                "clean",
                trace,
                verbose,
                progress,
                progress_keep_open,
                None,
                move |_progress, out, _err| {
                    core::repository::dirty::check(
                        repository(Mode::Lenient)?,
                        mode,
                        out,
                        format,
                    )
                },
            )
        }
        #[cfg(feature = "gitoxide-core-tools-clean")]
        Subcommands::Clean(
            crate::plumbing::options::clean::Command {
                debug,
                dry_run: _,
                execute,
                ignored,
                precious,
                directories,
                pathspec,
                repositories,
                pathspec_matches_result,
                skip_hidden_repositories,
                find_untracked_repositories,
            },
        ) => {
            prepare_and_run(
                "clean",
                trace,
                verbose,
                progress,
                progress_keep_open,
                None,
                move |_progress, out, err| {
                    core::repository::clean(
                        repository(Mode::Lenient)?,
                        out,
                        err,
                        pathspec,
                        core::repository::clean::Options {
                            debug,
                            format,
                            execute,
                            ignored,
                            precious,
                            directories,
                            repositories,
                            pathspec_matches_result,
                            skip_hidden_repositories: skip_hidden_repositories
                                .map(Into::into),
                            find_untracked_repositories: find_untracked_repositories
                                .into(),
                        },
                    )
                },
            )
        }
        Subcommands::Status(
            crate::plumbing::options::status::Platform {
                ignored,
                format: status_format,
                statistics,
                submodules,
                no_write,
                pathspec,
                index_worktree_renames,
            },
        ) => {
            prepare_and_run(
                "status",
                trace,
                auto_verbose,
                progress,
                progress_keep_open,
                None,
                move |progress, out, err| {
                    use crate::plumbing::options::status::Submodules;
                    core::repository::status::show(
                        repository(Mode::Lenient)?,
                        pathspec,
                        out,
                        err,
                        progress,
                        core::repository::status::Options {
                            format: match status_format.unwrap_or_default() {
                                crate::plumbing::options::status::Format::Simplified => {
                                    core::repository::status::Format::Simplified
                                }
                                crate::plumbing::options::status::Format::PorcelainV2 => {
                                    core::repository::status::Format::PorcelainV2
                                }
                            },
                            ignored: ignored
                                .map(|ignored| match ignored.unwrap_or_default() {
                                    crate::plumbing::options::status::Ignored::Matching => {
                                        core::repository::status::Ignored::Matching
                                    }
                                    crate::plumbing::options::status::Ignored::Collapsed => {
                                        core::repository::status::Ignored::Collapsed
                                    }
                                }),
                            output_format: format,
                            statistics,
                            thread_limit: thread_limit
                                .or(cfg!(target_os = "macos").then_some(3)),
                            allow_write: !no_write,
                            index_worktree_renames: index_worktree_renames
                                .map(|percentage| percentage.unwrap_or(0.5)),
                            submodules: submodules
                                .map(|submodules| match submodules {
                                    Submodules::All => core::repository::status::Submodules::All,
                                    Submodules::RefChange => {
                                        core::repository::status::Submodules::RefChange
                                    }
                                    Submodules::Modifications => {
                                        core::repository::status::Submodules::Modifications
                                    }
                                    Submodules::None => {
                                        core::repository::status::Submodules::None
                                    }
                                }),
                        },
                    )
                },
            )
        }
        Subcommands::Submodule(platform) => {
            match platform
                .cmds
                .unwrap_or(crate::plumbing::options::submodule::Subcommands::List {
                    dirty_suffix: None,
                })
            {
                crate::plumbing::options::submodule::Subcommands::List {
                    dirty_suffix,
                } => {
                    prepare_and_run(
                        "submodule-list",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        None,
                        move |_progress, out, _err| {
                            core::repository::submodule::list(
                                repository(Mode::Lenient)?,
                                out,
                                format,
                                dirty_suffix
                                    .map(|suffix| suffix.unwrap_or_else(|| "dirty".to_string())),
                            )
                        },
                    )
                }
            }
        }
        #[cfg(feature = "gitoxide-core-tools-archive")]
        Subcommands::Archive(
            crate::plumbing::options::archive::Platform {
                format,
                prefix,
                compression_level,
                add_path,
                add_virtual_file,
                output_file,
                treeish,
            },
        ) => {
            prepare_and_run(
                "archive",
                trace,
                auto_verbose,
                progress,
                progress_keep_open,
                None,
                move |progress, _out, _err| {
                    if add_virtual_file.len() % 2 != 0 {
                        anyhow::bail!(
                            "Virtual files must be specified in pairs of two: slash/separated/path content, got {}",
                            add_virtual_file.join(", ")
                        )
                    }
                    core::repository::archive::stream(
                        repository(Mode::Lenient)?,
                        &output_file,
                        treeish.as_deref(),
                        progress,
                        core::repository::archive::Options {
                            add_paths: add_path,
                            prefix,
                            files: add_virtual_file
                                .chunks_exact(2)
                                .map(|c| (c[0].clone(), c[1].clone()))
                                .collect(),
                            format: format
                                .map(|f| match f {
                                    crate::plumbing::options::archive::Format::Internal => {
                                        gix::worktree::archive::Format::InternalTransientNonPersistable
                                    }
                                    crate::plumbing::options::archive::Format::Tar => {
                                        gix::worktree::archive::Format::Tar
                                    }
                                    crate::plumbing::options::archive::Format::TarGz => {
                                        gix::worktree::archive::Format::TarGz {
                                            compression_level,
                                        }
                                    }
                                    crate::plumbing::options::archive::Format::Zip => {
                                        gix::worktree::archive::Format::Zip {
                                            compression_level,
                                        }
                                    }
                                }),
                        },
                    )
                },
            )
        }
        #[cfg(feature = "gitoxide-core-tools-corpus")]
        Subcommands::Corpus(
            crate::plumbing::options::corpus::Platform { db, path, cmd },
        ) => {
            let reverse_trace_lines = progress;
            prepare_and_run(
                "corpus",
                trace,
                auto_verbose,
                progress,
                progress_keep_open,
                core::corpus::PROGRESS_RANGE,
                move |progress, _out, _err| {
                    let mut engine = core::corpus::Engine::open_or_create(
                        db,
                        core::corpus::engine::State {
                            gitoxide_version: option_env!("GIX_VERSION")
                                .ok_or_else(|| {
                                    anyhow::anyhow!("GIX_VERSION must be set in build-script")
                                })?
                                .into(),
                            progress,
                            trace_to_progress: trace,
                            reverse_trace_lines,
                        },
                    )?;
                    match cmd {
                        crate::plumbing::options::corpus::SubCommands::Run {
                            dry_run,
                            repo_sql_suffix,
                            include_task,
                        } => {
                            engine
                                .run(
                                    path,
                                    thread_limit,
                                    dry_run,
                                    repo_sql_suffix,
                                    include_task,
                                )
                        }
                        crate::plumbing::options::corpus::SubCommands::Refresh => {
                            engine.refresh(path)
                        }
                    }
                },
            )
        }
        Subcommands::CommitGraph(cmd) => {
            match cmd {
                commitgraph::Subcommands::List { spec } => {
                    prepare_and_run(
                            "commitgraph-list",
                            trace,
                            auto_verbose,
                            progress,
                            progress_keep_open,
                            None,
                            move |_progress, out, _err| {
                                core::repository::commitgraph::list(
                                    repository(Mode::Lenient)?,
                                    spec,
                                    out,
                                    format,
                                )
                            },
                        )
                        .map(|_| ())
                }
                commitgraph::Subcommands::Verify { statistics } => {
                    prepare_and_run(
                            "commitgraph-verify",
                            trace,
                            auto_verbose,
                            progress,
                            progress_keep_open,
                            None,
                            move |_progress, out, err| {
                                let output_statistics = if statistics {
                                    Some(format)
                                } else {
                                    None
                                };
                                core::repository::commitgraph::verify(
                                    repository(Mode::Lenient)?,
                                    core::repository::commitgraph::verify::Context {
                                        err,
                                        out,
                                        output_statistics,
                                    },
                                )
                            },
                        )
                        .map(|_| ())
                }
            }
        }
        #[cfg(feature = "gitoxide-core-blocking-client")]
        Subcommands::Clone(
            crate::plumbing::options::clone::Platform {
                handshake_info,
                bare,
                no_tags,
                ref_name,
                remote,
                shallow,
                directory,
            },
        ) => {
            let opts = core::repository::clone::Options {
                format,
                bare,
                handshake_info,
                no_tags,
                ref_name,
                shallow: shallow.into(),
            };
            prepare_and_run(
                "clone",
                trace,
                auto_verbose,
                progress,
                progress_keep_open,
                core::repository::clone::PROGRESS_RANGE,
                move |progress, out, err| core::repository::clone(
                    remote,
                    directory,
                    config,
                    progress,
                    out,
                    err,
                    opts,
                ),
            )
        }
        #[cfg(feature = "gitoxide-core-blocking-client")]
        Subcommands::Fetch(
            crate::plumbing::options::fetch::Platform {
                dry_run,
                handshake_info,
                negotiation_info,
                open_negotiation_graph,
                remote,
                shallow,
                ref_spec,
            },
        ) => {
            let opts = core::repository::fetch::Options {
                format,
                dry_run,
                remote,
                handshake_info,
                negotiation_info,
                open_negotiation_graph,
                shallow: shallow.into(),
                ref_specs: ref_spec,
            };
            prepare_and_run(
                "fetch",
                trace,
                auto_verbose,
                progress,
                progress_keep_open,
                core::repository::fetch::PROGRESS_RANGE,
                move |progress, out, err| {
                    core::repository::fetch(
                        repository(Mode::LenientWithGitInstallConfig)?,
                        progress,
                        out,
                        err,
                        opts,
                    )
                },
            )
        }
        Subcommands::ConfigTree => show_progress(),
        Subcommands::Credential(cmd) => {
            core::repository::credential(
                repository(Mode::StrictWithGitInstallConfig)?,
                match cmd {
                    credential::Subcommands::Fill => {
                        gix::credentials::program::main::Action::Get
                    }
                    credential::Subcommands::Approve => {
                        gix::credentials::program::main::Action::Store
                    }
                    credential::Subcommands::Reject => {
                        gix::credentials::program::main::Action::Erase
                    }
                },
            )
        }
        #[cfg(
            any(
                feature = "gitoxide-core-async-client",
                feature = "gitoxide-core-blocking-client"
            )
        )]
        Subcommands::Remote(
            crate::plumbing::options::remote::Platform { name, cmd, handshake_info },
        ) => {
            use crate::plumbing::options::remote;
            match cmd {
                remote::Subcommands::Refs | remote::Subcommands::RefMap { .. } => {
                    let kind = match cmd {
                        remote::Subcommands::Refs => {
                            core::repository::remote::refs::Kind::Remote
                        }
                        remote::Subcommands::RefMap {
                            ref_spec,
                            show_unmapped_remote_refs,
                        } => {
                            core::repository::remote::refs::Kind::Tracking {
                                ref_specs: ref_spec,
                                show_unmapped_remote_refs,
                            }
                        }
                    };
                    let context = core::repository::remote::refs::Options {
                        name_or_url: name,
                        format,
                        handshake_info,
                    };
                    #[cfg(feature = "gitoxide-core-blocking-client")]
                    {
                        prepare_and_run(
                            "remote-refs",
                            trace,
                            auto_verbose,
                            progress,
                            progress_keep_open,
                            core::repository::remote::refs::PROGRESS_RANGE,
                            move |progress, out, err| {
                                core::repository::remote::refs(
                                    repository(Mode::LenientWithGitInstallConfig)?,
                                    kind,
                                    progress,
                                    out,
                                    err,
                                    context,
                                )
                            },
                        )
                    }
                    #[cfg(feature = "gitoxide-core-async-client")]
                    {
                        let (_handle, progress) = async_util::prepare(
                            auto_verbose,
                            trace,
                            "remote-refs",
                            Some(core::repository::remote::refs::PROGRESS_RANGE),
                        );
                        futures_lite::future::block_on(
                            core::repository::remote::refs(
                                repository(Mode::LenientWithGitInstallConfig)?,
                                kind,
                                progress,
                                std::io::stdout(),
                                std::io::stderr(),
                                context,
                            ),
                        )
                    }
                }
            }
        }
        Subcommands::Config(config::Platform { filter }) => {
            prepare_and_run(
                    "config-list",
                    trace,
                    verbose,
                    progress,
                    progress_keep_open,
                    None,
                    move |_progress, out, _err| {
                        core::repository::config::list(
                            repository(Mode::LenientWithGitInstallConfig)?,
                            filter,
                            config,
                            format,
                            out,
                        )
                    },
                )
                .map(|_| ())
        }
        Subcommands::Free(subcommands) => {
            match subcommands {
                free::Subcommands::Discover => {
                    prepare_and_run(
                        "discover",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        None,
                        move |_progress, out, _err| core::discover(&repository_path, out),
                    )
                }
                free::Subcommands::CommitGraph(cmd) => {
                    match cmd {
                        free::commitgraph::Subcommands::Verify { path, statistics } => {
                            prepare_and_run(
                                    "commitgraph-verify",
                                    trace,
                                    auto_verbose,
                                    progress,
                                    progress_keep_open,
                                    None,
                                    move |_progress, out, err| {
                                        let output_statistics = if statistics {
                                            Some(format)
                                        } else {
                                            None
                                        };
                                        core::commitgraph::verify(
                                            path,
                                            core::commitgraph::verify::Context {
                                                err,
                                                out,
                                                output_statistics,
                                            },
                                        )
                                    },
                                )
                                .map(|_| ())
                        }
                    }
                }
                free::Subcommands::Index(
                    free::index::Platform { object_hash, index_path, cmd },
                ) => {
                    match cmd {
                        free::index::Subcommands::FromList {
                            force,
                            index_output_path,
                            skip_hash,
                            file,
                        } => {
                            prepare_and_run(
                                "index-from-list",
                                trace,
                                verbose,
                                progress,
                                progress_keep_open,
                                None,
                                move |_progress, _out, _err| {
                                    core::repository::index::from_list(
                                        file,
                                        index_output_path,
                                        force,
                                        skip_hash,
                                    )
                                },
                            )
                        }
                        free::index::Subcommands::CheckoutExclusive {
                            directory,
                            empty_files,
                            repository,
                            keep_going,
                        } => {
                            prepare_and_run(
                                "index-checkout",
                                trace,
                                auto_verbose,
                                progress,
                                progress_keep_open,
                                None,
                                move |progress, _out, err| {
                                    core::index::checkout_exclusive(
                                        index_path,
                                        directory,
                                        repository,
                                        err,
                                        progress,
                                        &should_interrupt,
                                        core::index::checkout_exclusive::Options {
                                            index: core::index::Options {
                                                object_hash,
                                                format,
                                            },
                                            empty_files,
                                            keep_going,
                                            thread_limit,
                                        },
                                    )
                                },
                            )
                        }
                        free::index::Subcommands::Info { no_details } => {
                            prepare_and_run(
                                "index-info",
                                trace,
                                verbose,
                                progress,
                                progress_keep_open,
                                None,
                                move |_progress, out, err| {
                                    core::index::information(
                                        index_path,
                                        out,
                                        err,
                                        core::index::information::Options {
                                            index: core::index::Options {
                                                object_hash,
                                                format,
                                            },
                                            extension_details: !no_details,
                                        },
                                    )
                                },
                            )
                        }
                        free::index::Subcommands::Verify => {
                            prepare_and_run(
                                "index-verify",
                                trace,
                                auto_verbose,
                                progress,
                                progress_keep_open,
                                None,
                                move |_progress, out, _err| {
                                    core::index::verify(
                                        index_path,
                                        out,
                                        core::index::Options {
                                            object_hash,
                                            format,
                                        },
                                    )
                                },
                            )
                        }
                    }
                }
                free::Subcommands::Mailmap {
                    cmd: free::mailmap::Platform { path, cmd },
                } => {
                    match cmd {
                        free::mailmap::Subcommands::Verify => {
                            prepare_and_run(
                                "mailmap-verify",
                                trace,
                                auto_verbose,
                                progress,
                                progress_keep_open,
                                core::mailmap::PROGRESS_RANGE,
                                move |_progress, out, _err| core::mailmap::verify(
                                    path,
                                    format,
                                    out,
                                ),
                            )
                        }
                    }
                }
                free::Subcommands::Pack(subcommands) => {
                    match subcommands {
                        free::pack::Subcommands::Create {
                            repository,
                            expansion,
                            thin,
                            statistics,
                            nondeterministic_count,
                            tips,
                            pack_cache_size_mb,
                            counting_threads,
                            object_cache_size_mb,
                            output_directory,
                        } => {
                            let has_tips = !tips.is_empty();
                            prepare_and_run(
                                "pack-create",
                                trace,
                                verbose,
                                progress,
                                progress_keep_open,
                                core::pack::create::PROGRESS_RANGE,
                                move |progress, out, _err| {
                                    let input = if has_tips {
                                        None
                                    } else {
                                        stdin_or_bail()?.into()
                                    };
                                    let repository = repository
                                        .unwrap_or_else(|| PathBuf::from("."));
                                    let context = core::pack::create::Context {
                                        thread_limit,
                                        thin,
                                        nondeterministic_thread_count: nondeterministic_count
                                            .then_some(counting_threads),
                                        pack_cache_size_in_bytes: pack_cache_size_mb.unwrap_or(0)
                                            * 1_000_000,
                                        object_cache_size_in_bytes: object_cache_size_mb
                                            .unwrap_or(0) * 1_000_000,
                                        statistics: if statistics { Some(format) } else { None },
                                        out,
                                        expansion: expansion
                                            .unwrap_or(
                                                if has_tips {
                                                    core::pack::create::ObjectExpansion::TreeTraversal
                                                } else {
                                                    core::pack::create::ObjectExpansion::None
                                                },
                                            ),
                                    };
                                    core::pack::create(
                                        repository,
                                        tips,
                                        input,
                                        output_directory,
                                        progress,
                                        context,
                                    )
                                },
                            )
                        }
                        #[cfg(feature = "gitoxide-core-async-client")]
                        free::pack::Subcommands::Receive {
                            protocol,
                            url,
                            directory,
                            refs,
                            refs_directory,
                        } => {
                            let (_handle, progress) = async_util::prepare(
                                verbose,
                                trace,
                                "pack-receive",
                                core::pack::receive::PROGRESS_RANGE,
                            );
                            let fut = core::pack::receive(
                                protocol,
                                &url,
                                directory,
                                refs_directory,
                                refs.into_iter().map(Into::into).collect(),
                                progress,
                                core::pack::receive::Context {
                                    thread_limit,
                                    format,
                                    out: std::io::stdout(),
                                    should_interrupt,
                                    object_hash,
                                },
                            );
                            return futures_lite::future::block_on(fut);
                        }
                        #[cfg(feature = "gitoxide-core-blocking-client")]
                        free::pack::Subcommands::Receive {
                            protocol,
                            url,
                            directory,
                            refs,
                            refs_directory,
                        } => {
                            prepare_and_run(
                                "pack-receive",
                                trace,
                                verbose,
                                progress,
                                progress_keep_open,
                                core::pack::receive::PROGRESS_RANGE,
                                move |progress, out, _err| {
                                    core::pack::receive(
                                        protocol,
                                        &url,
                                        directory,
                                        refs_directory,
                                        refs.into_iter().map(Into::into).collect(),
                                        progress,
                                        core::pack::receive::Context {
                                            thread_limit,
                                            format,
                                            should_interrupt,
                                            out,
                                            object_hash,
                                        },
                                    )
                                },
                            )
                        }
                        free::pack::Subcommands::Explode {
                            check,
                            sink_compress,
                            delete_pack,
                            pack_path,
                            object_path,
                            verify,
                        } => {
                            prepare_and_run(
                                "pack-explode",
                                trace,
                                auto_verbose,
                                progress,
                                progress_keep_open,
                                None,
                                move |progress, _out, _err| {
                                    core::pack::explode::pack_or_pack_index(
                                        pack_path,
                                        object_path,
                                        check,
                                        progress,
                                        core::pack::explode::Context {
                                            thread_limit,
                                            delete_pack,
                                            sink_compress,
                                            verify,
                                            should_interrupt,
                                            object_hash,
                                        },
                                    )
                                },
                            )
                        }
                        free::pack::Subcommands::Verify {
                            args: free::pack::VerifyOptions {
                                algorithm,
                                decode,
                                re_encode,
                                statistics,
                            },
                            path,
                        } => {
                            prepare_and_run(
                                    "pack-verify",
                                    trace,
                                    auto_verbose,
                                    progress,
                                    progress_keep_open,
                                    verify::PROGRESS_RANGE,
                                    move |progress, out, err| {
                                        let mode = verify_mode(decode, re_encode);
                                        let output_statistics = if statistics {
                                            Some(format)
                                        } else {
                                            None
                                        };
                                        verify::pack_or_pack_index(
                                            path,
                                            progress,
                                            verify::Context {
                                                output_statistics,
                                                out,
                                                err,
                                                thread_limit,
                                                mode,
                                                algorithm,
                                                should_interrupt: &should_interrupt,
                                                object_hash,
                                            },
                                        )
                                    },
                                )
                                .map(|_| ())
                        }
                        free::pack::Subcommands::MultiIndex(
                            free::pack::multi_index::Platform { multi_index_path, cmd },
                        ) => {
                            match cmd {
                                free::pack::multi_index::Subcommands::Entries => {
                                    prepare_and_run(
                                        "pack-multi-index-entries",
                                        trace,
                                        verbose,
                                        progress,
                                        progress_keep_open,
                                        core::pack::multi_index::PROGRESS_RANGE,
                                        move |_progress, out, _err| core::pack::multi_index::entries(
                                            multi_index_path,
                                            format,
                                            out,
                                        ),
                                    )
                                }
                                free::pack::multi_index::Subcommands::Info => {
                                    prepare_and_run(
                                        "pack-multi-index-info",
                                        trace,
                                        verbose,
                                        progress,
                                        progress_keep_open,
                                        core::pack::multi_index::PROGRESS_RANGE,
                                        move |_progress, out, err| {
                                            core::pack::multi_index::info(
                                                multi_index_path,
                                                format,
                                                out,
                                                err,
                                            )
                                        },
                                    )
                                }
                                free::pack::multi_index::Subcommands::Verify => {
                                    prepare_and_run(
                                        "pack-multi-index-verify",
                                        trace,
                                        auto_verbose,
                                        progress,
                                        progress_keep_open,
                                        core::pack::multi_index::PROGRESS_RANGE,
                                        move |progress, _out, _err| {
                                            core::pack::multi_index::verify(
                                                multi_index_path,
                                                progress,
                                                &should_interrupt,
                                            )
                                        },
                                    )
                                }
                                free::pack::multi_index::Subcommands::Create {
                                    index_paths,
                                } => {
                                    prepare_and_run(
                                        "pack-multi-index-create",
                                        trace,
                                        verbose,
                                        progress,
                                        progress_keep_open,
                                        core::pack::multi_index::PROGRESS_RANGE,
                                        move |progress, _out, _err| {
                                            core::pack::multi_index::create(
                                                index_paths,
                                                multi_index_path,
                                                progress,
                                                &should_interrupt,
                                                object_hash,
                                            )
                                        },
                                    )
                                }
                            }
                        }
                        free::pack::Subcommands::Index(subcommands) => {
                            match subcommands {
                                free::pack::index::Subcommands::Create {
                                    iteration_mode,
                                    pack_path,
                                    directory,
                                } => {
                                    prepare_and_run(
                                        "pack-index-create",
                                        trace,
                                        verbose,
                                        progress,
                                        progress_keep_open,
                                        core::pack::index::PROGRESS_RANGE,
                                        move |progress, out, _err| {
                                            use gitoxide_core::pack::index::PathOrRead;
                                            let input = if let Some(path) = pack_path {
                                                PathOrRead::Path(path)
                                            } else {
                                                use is_terminal::IsTerminal;
                                                if std::io::stdin().is_terminal() {
                                                    anyhow::bail!(
                                                        "Refusing to read from standard input as no path is given, but it's a terminal."
                                                    )
                                                }
                                                PathOrRead::Read(Box::new(stdin()))
                                            };
                                            core::pack::index::from_pack(
                                                input,
                                                directory,
                                                progress,
                                                core::pack::index::Context {
                                                    thread_limit,
                                                    iteration_mode,
                                                    format,
                                                    out,
                                                    object_hash,
                                                    should_interrupt: &gix::interrupt::IS_INTERRUPTED,
                                                },
                                            )
                                        },
                                    )
                                }
                            }
                        }
                    }
                }
            }
        }
        Subcommands::Verify {
            args: free::pack::VerifyOptions { statistics, algorithm, decode, re_encode },
        } => {
            prepare_and_run(
                "verify",
                trace,
                auto_verbose,
                progress,
                progress_keep_open,
                core::repository::verify::PROGRESS_RANGE,
                move |progress, out, _err| {
                    core::repository::verify::integrity(
                        repository(Mode::Strict)?,
                        out,
                        progress,
                        &should_interrupt,
                        core::repository::verify::Context {
                            output_statistics: statistics.then_some(format),
                            algorithm,
                            verify_mode: verify_mode(decode, re_encode),
                            thread_limit,
                        },
                    )
                },
            )
        }
        Subcommands::Revision(cmd) => {
            match cmd {
                revision::Subcommands::List { spec, svg, limit } => {
                    prepare_and_run(
                        "revision-list",
                        trace,
                        auto_verbose,
                        progress,
                        progress_keep_open,
                        core::repository::revision::list::PROGRESS_RANGE,
                        move |progress, out, _err| {
                            core::repository::revision::list(
                                repository(Mode::Lenient)?,
                                progress,
                                out,
                                core::repository::revision::list::Context {
                                    limit,
                                    spec,
                                    format,
                                    text: svg
                                        .map_or(
                                            core::repository::revision::list::Format::Text,
                                            |path| {
                                                core::repository::revision::list::Format::Svg {
                                                    path,
                                                }
                                            },
                                        ),
                                },
                            )
                        },
                    )
                }
                revision::Subcommands::PreviousBranches => {
                    prepare_and_run(
                        "revision-previousbranches",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        None,
                        move |_progress, out, _err| {
                            core::repository::revision::previous_branches(
                                repository(Mode::Lenient)?,
                                out,
                                format,
                            )
                        },
                    )
                }
                revision::Subcommands::Explain { spec } => {
                    prepare_and_run(
                        "revision-explain",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        None,
                        move |_progress, out, _err| core::repository::revision::explain(
                            spec,
                            out,
                        ),
                    )
                }
                revision::Subcommands::Resolve {
                    specs,
                    explain,
                    cat_file,
                    tree_mode,
                    reference,
                    blob_format,
                } => {
                    prepare_and_run(
                        "revision-parse",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        None,
                        move |_progress, out, _err| {
                            core::repository::revision::resolve(
                                repository(Mode::Strict)?,
                                specs,
                                out,
                                core::repository::revision::resolve::Options {
                                    format,
                                    explain,
                                    cat_file,
                                    show_reference: reference,
                                    tree_mode: match tree_mode {
                                        revision::resolve::TreeMode::Raw => {
                                            core::repository::revision::resolve::TreeMode::Raw
                                        }
                                        revision::resolve::TreeMode::Pretty => {
                                            core::repository::revision::resolve::TreeMode::Pretty
                                        }
                                    },
                                    blob_format: match blob_format {
                                        revision::resolve::BlobFormat::Git => {
                                            core::repository::revision::resolve::BlobFormat::Git
                                        }
                                        revision::resolve::BlobFormat::Worktree => {
                                            core::repository::revision::resolve::BlobFormat::Worktree
                                        }
                                        revision::resolve::BlobFormat::Diff => {
                                            core::repository::revision::resolve::BlobFormat::Diff
                                        }
                                        revision::resolve::BlobFormat::DiffOrGit => {
                                            core::repository::revision::resolve::BlobFormat::DiffOrGit
                                        }
                                    },
                                },
                            )
                        },
                    )
                }
            }
        }
        Subcommands::Commit(cmd) => {
            match cmd {
                commit::Subcommands::Verify { rev_spec } => {
                    prepare_and_run(
                        "commit-verify",
                        trace,
                        auto_verbose,
                        progress,
                        progress_keep_open,
                        None,
                        move |_progress, _out, _err| {
                            core::repository::commit::verify(
                                repository(Mode::Lenient)?,
                                rev_spec.as_deref(),
                            )
                        },
                    )
                }
                commit::Subcommands::Describe {
                    annotated_tags,
                    all_refs,
                    first_parent,
                    always,
                    long,
                    statistics,
                    max_candidates,
                    rev_spec,
                    dirty_suffix,
                } => {
                    prepare_and_run(
                        "commit-describe",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        None,
                        move |_progress, out, err| {
                            core::repository::commit::describe(
                                repository(Mode::Strict)?,
                                rev_spec.as_deref(),
                                out,
                                err,
                                core::repository::commit::describe::Options {
                                    all_tags: !annotated_tags,
                                    all_refs,
                                    long_format: long,
                                    first_parent,
                                    statistics,
                                    max_candidates,
                                    always,
                                    dirty_suffix: dirty_suffix
                                        .map(|suffix| suffix.unwrap_or_else(|| "dirty".to_string())),
                                },
                            )
                        },
                    )
                }
            }
        }
        Subcommands::Tree(cmd) => {
            match cmd {
                tree::Subcommands::Entries { treeish, recursive, extended } => {
                    prepare_and_run(
                        "tree-entries",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        None,
                        move |_progress, out, _err| {
                            core::repository::tree::entries(
                                repository(Mode::Strict)?,
                                treeish.as_deref(),
                                recursive,
                                extended,
                                format,
                                out,
                            )
                        },
                    )
                }
                tree::Subcommands::Info { treeish, extended } => {
                    prepare_and_run(
                        "tree-info",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        None,
                        move |_progress, out, err| {
                            core::repository::tree::info(
                                repository(Mode::Strict)?,
                                treeish.as_deref(),
                                extended,
                                format,
                                out,
                                err,
                            )
                        },
                    )
                }
            }
        }
        Subcommands::Odb(cmd) => {
            match cmd {
                odb::Subcommands::Stats { extra_header_lookup } => {
                    prepare_and_run(
                        "odb-stats",
                        trace,
                        auto_verbose,
                        progress,
                        progress_keep_open,
                        core::repository::odb::statistics::PROGRESS_RANGE,
                        move |progress, out, err| {
                            core::repository::odb::statistics(
                                repository(Mode::Strict)?,
                                progress,
                                out,
                                err,
                                core::repository::odb::statistics::Options {
                                    format,
                                    thread_limit,
                                    extra_header_lookup,
                                },
                            )
                        },
                    )
                }
                odb::Subcommands::Entries => {
                    prepare_and_run(
                        "odb-entries",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        None,
                        move |_progress, out, _err| core::repository::odb::entries(
                            repository(Mode::Strict)?,
                            format,
                            out,
                        ),
                    )
                }
                odb::Subcommands::Info => {
                    prepare_and_run(
                        "odb-info",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        None,
                        move |_progress, out, err| core::repository::odb::info(
                            repository(Mode::Strict)?,
                            format,
                            out,
                            err,
                        ),
                    )
                }
            }
        }
        Subcommands::Fsck(fsck::Platform { spec }) => {
            prepare_and_run(
                "fsck",
                trace,
                auto_verbose,
                progress,
                progress_keep_open,
                None,
                move |_progress, out, _err| core::repository::fsck(
                    repository(Mode::Strict)?,
                    spec,
                    out,
                ),
            )
        }
        Subcommands::Mailmap(cmd) => {
            match cmd {
                mailmap::Subcommands::Entries => {
                    prepare_and_run(
                        "mailmap-entries",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        None,
                        move |_progress, out, err| {
                            core::repository::mailmap::entries(
                                repository(Mode::Lenient)?,
                                format,
                                out,
                                err,
                            )
                        },
                    )
                }
                mailmap::Subcommands::Check { contacts } => {
                    prepare_and_run(
                        "mailmap-check",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        None,
                        move |_progress, out, err| {
                            core::repository::mailmap::check(
                                repository(Mode::Lenient)?,
                                format,
                                contacts,
                                out,
                                err,
                            )
                        },
                    )
                }
            }
        }
        Subcommands::Attributes(cmd) => {
            match cmd {
                attributes::Subcommands::Query { statistics, pathspec } => {
                    prepare_and_run(
                        "attributes-query",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        None,
                        move |_progress, out, err| {
                            let repo = repository(Mode::Strict)?;
                            let pathspecs = if pathspec.is_empty() {
                                PathsOrPatterns::Paths(
                                    Box::new(
                                        stdin_or_bail()?
                                            .byte_lines()
                                            .filter_map(Result::ok)
                                            .map(BString::from),
                                    ),
                                )
                            } else {
                                PathsOrPatterns::Patterns(pathspec)
                            };
                            core::repository::attributes::query(
                                repo,
                                pathspecs,
                                out,
                                err,
                                core::repository::attributes::query::Options {
                                    format,
                                    statistics,
                                },
                            )
                        },
                    )
                }
                attributes::Subcommands::ValidateBaseline { statistics, no_ignore } => {
                    prepare_and_run(
                        "attributes-validate-baseline",
                        trace,
                        auto_verbose,
                        progress,
                        progress_keep_open,
                        None,
                        move |progress, out, err| {
                            core::repository::attributes::validate_baseline(
                                repository(Mode::StrictWithGitInstallConfig)?,
                                stdin_or_bail()
                                    .ok()
                                    .map(|stdin| {
                                        stdin
                                            .byte_lines()
                                            .filter_map(Result::ok)
                                            .map(gix::bstr::BString::from)
                                    }),
                                progress,
                                out,
                                err,
                                core::repository::attributes::validate_baseline::Options {
                                    format,
                                    statistics,
                                    ignore: !no_ignore,
                                },
                            )
                        },
                    )
                }
            }
        }
        Subcommands::Exclude(cmd) => {
            match cmd {
                exclude::Subcommands::Query {
                    statistics,
                    patterns,
                    pathspec,
                    show_ignore_patterns,
                } => {
                    prepare_and_run(
                        "exclude-query",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        None,
                        move |_progress, out, err| {
                            let repo = repository(Mode::Strict)?;
                            let pathspecs = if pathspec.is_empty() {
                                PathsOrPatterns::Paths(
                                    Box::new(
                                        stdin_or_bail()?
                                            .byte_lines()
                                            .filter_map(Result::ok)
                                            .map(BString::from),
                                    ),
                                )
                            } else {
                                PathsOrPatterns::Patterns(pathspec)
                            };
                            core::repository::exclude::query(
                                repo,
                                pathspecs,
                                out,
                                err,
                                core::repository::exclude::query::Options {
                                    format,
                                    show_ignore_patterns,
                                    overrides: patterns,
                                    statistics,
                                },
                            )
                        },
                    )
                }
            }
        }
        Subcommands::Index(cmd) => {
            match cmd {
                index::Subcommands::Entries {
                    format: entry_format,
                    no_attributes,
                    attributes_from_index,
                    statistics,
                    recurse_submodules,
                    pathspec,
                } => {
                    prepare_and_run(
                        "index-entries",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        None,
                        move |_progress, out, err| {
                            core::repository::index::entries(
                                repository(Mode::Lenient)?,
                                pathspec,
                                out,
                                err,
                                core::repository::index::entries::Options {
                                    format,
                                    simple: match entry_format {
                                        index::entries::Format::Simple => true,
                                        index::entries::Format::Rich => false,
                                    },
                                    attributes: if no_attributes {
                                        None
                                    } else {
                                        Some(
                                            if attributes_from_index {
                                                core::repository::index::entries::Attributes::Index
                                            } else {
                                                core::repository::index::entries::Attributes::WorktreeAndIndex
                                            },
                                        )
                                    },
                                    recurse_submodules,
                                    statistics,
                                },
                            )
                        },
                    )
                }
                index::Subcommands::FromTree {
                    force,
                    index_output_path,
                    skip_hash,
                    spec,
                } => {
                    prepare_and_run(
                        "index-from-tree",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        None,
                        move |_progress, _out, _err| {
                            core::repository::index::from_tree(
                                repository(Mode::Strict)?,
                                spec,
                                index_output_path,
                                force,
                                skip_hash,
                            )
                        },
                    )
                }
            }
        }
        Subcommands::Completions { shell, out_dir } => {
            let mut app = Args::command();
            let shell = shell
                .or_else(clap_complete::Shell::from_env)
                .ok_or_else(|| {
                    anyhow!("The shell could not be derived from the environment")
                })?;
            let bin_name = app.get_name().to_owned();
            if let Some(out_dir) = out_dir {
                clap_complete::generate_to(shell, &mut app, bin_name, &out_dir)?;
            } else {
                clap_complete::generate(
                    shell,
                    &mut app,
                    bin_name,
                    &mut std::io::stdout(),
                );
            }
            Ok(())
        }
    }?;
    Ok(())
}



Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\plumbing\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\plumbing\options\free.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\plumbing\options\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\plumbing\progress.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\porcelain\main.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: true, Name: main,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\porcelain\main.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: true, Name: main,  File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\porcelain\main.rs
Potential Overunsafe：true

Found function with unsafe block in main:
File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\porcelain\main.rs
Start Line: 13, End Line: 189
pub fn main() -> Result<()> {
    let args: Args = Args::parse_from(gix::env::args_os());
    #[allow(unsafe_code)]
    unsafe {
        time::util::local_offset::set_soundness(
            time::util::local_offset::Soundness::Unsound,
        );
    }
    let should_interrupt = Arc::new(AtomicBool::new(false));
    #[allow(unsafe_code)]
    unsafe {
        gix::interrupt::init_handler(
            1,
            {
                let should_interrupt = Arc::clone(&should_interrupt);
                move || should_interrupt.store(true, Ordering::SeqCst)
            },
        )?;
    }
    let trace = false;
    let verbose = !args.quiet;
    let progress = args.progress;
    #[cfg(feature = "gitoxide-core-tools")]
    let threads = args.threads;
    let progress_keep_open = args.progress_keep_open;
    match args.cmd {
        #[cfg(debug_assertions)]
        Subcommands::Panic => {
            prepare_and_run(
                "panic-behaviour",
                trace,
                verbose,
                progress,
                progress_keep_open,
                crate::shared::STANDARD_RANGE,
                move |_progress, _out, _err| panic!("something went very wrong"),
            )
        }
        Subcommands::Init { directory } => core::repository::init(directory).map(|_| ()),
        #[cfg(feature = "gitoxide-core-tools")]
        Subcommands::Tool(tool) => {
            match tool {
                #[cfg(feature = "gitoxide-core-tools-query")]
                crate::porcelain::options::ToolCommands::Query(
                    crate::porcelain::options::tools::Query {
                        object_cache_size_mb,
                        find_copies_harder,
                        repo_dir,
                        cmd,
                    },
                ) => {
                    use gitoxide_core::query;
                    prepare_and_run(
                        "query",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        crate::shared::STANDARD_RANGE,
                        move |mut progress, out, err| {
                            let engine = query::prepare(
                                &repo_dir,
                                &mut progress,
                                &mut *err,
                                query::Options {
                                    object_cache_size_mb,
                                    find_copies_harder,
                                    threads,
                                },
                            )?;
                            match cmd {
                                None => {
                                    writeln!(err, "Choose a command for the query engine")?
                                }
                                Some(
                                    crate::porcelain::options::tools::query::Command::TracePath {
                                        path,
                                    },
                                ) => {
                                    engine
                                        .run(
                                            query::Command::TracePath {
                                                spec: path,
                                            },
                                            out,
                                            progress,
                                        )?;
                                }
                            }
                            Ok(())
                        },
                    )
                }
                crate::porcelain::options::ToolCommands::EstimateHours(
                    crate::porcelain::options::tools::EstimateHours {
                        working_dir,
                        rev_spec,
                        no_bots,
                        file_stats,
                        line_stats,
                        show_pii,
                        omit_unify_identities,
                    },
                ) => {
                    use gitoxide_core::hours;
                    prepare_and_run(
                        "estimate-hours",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        crate::shared::STANDARD_RANGE,
                        move |progress, out, _err| {
                            hours::estimate(
                                &working_dir,
                                rev_spec.as_ref(),
                                progress,
                                hours::Context {
                                    show_pii,
                                    ignore_bots: no_bots,
                                    threads,
                                    file_stats,
                                    line_stats,
                                    omit_unify_identities,
                                    out,
                                },
                            )
                        },
                    )
                }
                crate::porcelain::options::ToolCommands::Find { root, debug } => {
                    use gitoxide_core::organize;
                    prepare_and_run(
                        "find",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        crate::shared::STANDARD_RANGE,
                        move |progress, out, _err| {
                            organize::discover(
                                root
                                    .unwrap_or_else(|| {
                                        [std::path::Component::CurDir].iter().collect()
                                    }),
                                out,
                                progress,
                                debug,
                                threads,
                            )
                        },
                    )
                }
                crate::porcelain::options::ToolCommands::Organize {
                    destination_directory,
                    execute,
                    repository_source,
                } => {
                    use gitoxide_core::organize;
                    prepare_and_run(
                        "organize",
                        trace,
                        verbose,
                        progress,
                        progress_keep_open,
                        crate::shared::STANDARD_RANGE,
                        move |progress, _out, _err| {
                            organize::run(
                                if execute {
                                    organize::Mode::Execute
                                } else {
                                    organize::Mode::Simulate
                                },
                                repository_source
                                    .unwrap_or_else(|| {
                                        [std::path::Component::CurDir].iter().collect()
                                    }),
                                destination_directory
                                    .unwrap_or_else(|| {
                                        [std::path::Component::CurDir].iter().collect()
                                    }),
                                progress,
                                threads,
                            )
                        },
                    )
                }
            }
        }
        Subcommands::Completions { shell, out_dir } => {
            let mut app = Args::command();
            let shell = shell
                .or_else(clap_complete::Shell::from_env)
                .ok_or_else(|| {
                    anyhow!("The shell could not be derived from the environment")
                })?;
            let bin_name = app.get_name().to_owned();
            if let Some(out_dir) = out_dir {
                clap_complete::generate_to(shell, &mut app, bin_name, &out_dir)?;
            } else {
                clap_complete::generate(
                    shell,
                    &mut app,
                    bin_name,
                    &mut std::io::stdout(),
                );
            }
            Ok(())
        }
    }?;
    Ok(())
}



Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\porcelain\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\porcelain\options.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\shared.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\uni.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\tests\tools\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\tests\tools\src\main.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\build.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\examples\mk_certs.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs
-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: new_encrypt,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs
Start Line: 96, End Line: 112
/// Prepares a key for encryption.
///
/// # Failure
///
/// Returns an error if the key is not 128, 192, or 256 bits.
#[corresponds(AES_set_encrypt_key)]
pub fn new_encrypt(key: &[u8]) -> Result<AesKey, KeyError> {
    unsafe {
        assert!(key.len() <= c_int::MAX as usize / 8);
        let mut aes_key = MaybeUninit::uninit();
        let r = ffi::AES_set_encrypt_key(
            key.as_ptr() as *const _,
            key.len() as AesBitType * 8,
            aes_key.as_mut_ptr(),
        );
        if r == 0 { Ok(AesKey(aes_key.assume_init())) } else { Err(KeyError(())) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: new_decrypt,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs
Start Line: 120, End Line: 137
/// Prepares a key for decryption.
///
/// # Failure
///
/// Returns an error if the key is not 128, 192, or 256 bits.
#[corresponds(AES_set_decrypt_key)]
pub fn new_decrypt(key: &[u8]) -> Result<AesKey, KeyError> {
    unsafe {
        assert!(key.len() <= c_int::MAX as usize / 8);
        let mut aes_key = MaybeUninit::uninit();
        let r = ffi::AES_set_decrypt_key(
            key.as_ptr() as *const _,
            key.len() as AesBitType * 8,
            aes_key.as_mut_ptr(),
        );
        if r == 0 { Ok(AesKey(aes_key.assume_init())) } else { Err(KeyError(())) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_ige,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: wrap_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs
Potential Overunsafe：true

Found function with unsafe block in wrap_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs
Start Line: 196, End Line: 219
/// Wrap a key, according to [RFC 3394](https://tools.ietf.org/html/rfc3394)
///
/// * `key`: The key-encrypting-key to use. Must be a encrypting key
/// * `iv`: The IV to use. You must use the same IV for both wrapping and unwrapping
/// * `out`: The output buffer to store the ciphertext
/// * `in_`: The input buffer, storing the key to be wrapped
///
/// Returns the number of bytes written into `out`
///
/// # Panics
///
/// Panics if either `out` or `in_` do not have sizes that are a multiple of 8, or if
/// `out` is not 8 bytes longer than `in_`
#[corresponds(AES_wrap_key)]
pub fn wrap_key(
    key: &AesKey,
    iv: Option<[u8; 8]>,
    out: &mut [u8],
    in_: &[u8],
) -> Result<usize, KeyError> {
    unsafe {
        assert!(out.len() >= in_.len() + 8);
        let written = ffi::AES_wrap_key(
            &key.0 as *const _ as *mut _,
            iv.as_ref().map_or(ptr::null(), |iv| iv.as_ptr() as *const _),
            out.as_ptr() as *mut _,
            in_.as_ptr() as *const _,
            in_.len() as AesSizeType,
        );
        if written <= 0 { Err(KeyError(())) } else { Ok(written as usize) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: unwrap_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs
Potential Overunsafe：true

Found function with unsafe block in unwrap_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs
Start Line: 235, End Line: 259
/// Unwrap a key, according to [RFC 3394](https://tools.ietf.org/html/rfc3394)
///
/// * `key`: The key-encrypting-key to decrypt the wrapped key. Must be a decrypting key
/// * `iv`: The same IV used for wrapping the key
/// * `out`: The buffer to write the unwrapped key to
/// * `in_`: The input ciphertext
///
/// Returns the number of bytes written into `out`
///
/// # Panics
///
/// Panics if either `out` or `in_` do not have sizes that are a multiple of 8, or
/// if `in_` is not 8 bytes longer than `out`
#[corresponds(AES_unwrap_key)]
pub fn unwrap_key(
    key: &AesKey,
    iv: Option<[u8; 8]>,
    out: &mut [u8],
    in_: &[u8],
) -> Result<usize, KeyError> {
    unsafe {
        assert!(out.len() + 8 <= in_.len());
        let written = ffi::AES_unwrap_key(
            &key.0 as *const _ as *mut _,
            iv.as_ref().map_or(ptr::null(), |iv| iv.as_ptr() as *const _),
            out.as_ptr() as *mut _,
            in_.as_ptr() as *const _,
            in_.len() as AesSizeType,
        );
        if written <= 0 { Err(KeyError(())) } else { Ok(written as usize) }
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: fmt,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Start Line: 70, End Line: 85
fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    unsafe {
        let mem_bio = match MemBio::new() {
            Err(_) => return f.write_str("error"),
            Ok(m) => m,
        };
        let print_result = cvt(
            ffi::ASN1_GENERALIZEDTIME_print(mem_bio.as_ptr(), self.as_ptr()),
        );
        match print_result {
            Err(_) => f.write_str("error"),
            Ok(_) => f.write_str(str::from_utf8_unchecked(mem_bio.get_buf())),
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: diff,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_period,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_unix,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_str,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Start Line: 342, End Line: 351
/// Creates a new time corresponding to the specified ASN1 time string.
#[corresponds(ASN1_TIME_set_string)]
#[allow(clippy::should_implement_trait)]
pub fn from_str(s: &str) -> Result<Asn1Time, ErrorStack> {
    unsafe {
        let s = CString::new(s).unwrap();
        let time = Asn1Time::new()?;
        cvt(ffi::ASN1_TIME_set_string(time.as_ptr(), s.as_ptr()))?;
        Ok(time)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_str_x509,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Start Line: 358, End Line: 367
/// Creates a new time corresponding to the specified X509 time string.
///
/// Requires BoringSSL or OpenSSL 1.1.1 or newer.
#[corresponds(ASN1_TIME_set_string_X509)]
#[cfg(any(ossl111, boringssl))]
pub fn from_str_x509(s: &str) -> Result<Asn1Time, ErrorStack> {
    unsafe {
        let s = CString::new(s).unwrap();
        let time = Asn1Time::new()?;
        cvt(ffi::ASN1_TIME_set_string_X509(time.as_ptr(), s.as_ptr()))?;
        Ok(time)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: as_utf8,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Start Line: 440, End Line: 450
/// Converts the ASN.1 underlying format to UTF8
///
/// ASN.1 strings may utilize UTF-16, ASCII, BMP, or UTF8.  This is important to
/// consume the string in a meaningful way without knowing the underlying
/// format.
#[corresponds(ASN1_STRING_to_UTF8)]
pub fn as_utf8(&self) -> Result<OpensslString, ErrorStack> {
    unsafe {
        let mut ptr = ptr::null_mut();
        let len = ffi::ASN1_STRING_to_UTF8(&mut ptr, self.as_ptr());
        if len < 0 {
            return Err(ErrorStack::get());
        }
        Ok(OpensslString::from_ptr(ptr as *mut c_char))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: as_slice,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: len,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Start Line: 465, End Line: 467
/// Returns the number of bytes in the string.
#[corresponds(ASN1_STRING_length)]
pub fn len(&self) -> usize {
    unsafe { ffi::ASN1_STRING_length(self.as_ptr()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: get,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Start Line: 535, End Line: 537
#[allow(missing_docs, clippy::unnecessary_cast)]
#[deprecated(since = "0.10.6", note = "use to_bn instead")]
pub fn get(&self) -> i64 {
    unsafe { ffi::ASN1_INTEGER_get(self.as_ptr()) as i64 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: to_bn,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: to_owned,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new_from_bytes,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: nid,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: get_i64,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Start Line: 765, End Line: 774
/// Get the value, if it fits in the required bounds.
#[corresponds(ASN1_ENUMERATED_get_int64)]
#[cfg(ossl110)]
pub fn get_i64(&self) -> Result<i64, ErrorStack> {
    let mut crl_reason = 0;
    unsafe {
        cvt(ffi::ASN1_ENUMERATED_get_int64(&mut crl_reason, self.as_ptr()))?;
    }
    Ok(crl_reason)
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\base64.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: true, Name: encode_block,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\base64.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: true, Name: decode_block,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\base64.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bio.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: drop,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bio.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bio.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bio.rs
Start Line: 21, End Line: 33
pub fn new(buf: &'a [u8]) -> Result<MemBioSlice<'a>, ErrorStack> {
    ffi::init();
    assert!(buf.len() <= c_int::MAX as usize);
    let bio = unsafe {
        cvt_p(BIO_new_mem_buf(buf.as_ptr() as *const _, buf.len() as crate::SLenType))?
    };
    Ok(MemBioSlice(bio, PhantomData))
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: get_buf,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bio.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new_secure,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: clear,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: add_word,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sub_word,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: mul_word,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: div_word,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 187, End Line: 196
/// Divides `self` by a `u32`, returning the remainder.
#[corresponds(BN_div_word)]
#[allow(clippy::useless_conversion)]
pub fn div_word(&mut self, w: u32) -> Result<u64, ErrorStack> {
    unsafe {
        let r = ffi::BN_div_word(self.as_ptr(), w.into());
        if r == ffi::BN_ULONG::MAX { Err(ErrorStack::get()) } else { Ok(r.into()) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: mod_word,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 201, End Line: 210
/// Returns the result of `self` modulo `w`.
#[corresponds(BN_mod_word)]
#[allow(clippy::useless_conversion)]
pub fn mod_word(&self, w: u32) -> Result<u64, ErrorStack> {
    unsafe {
        let r = ffi::BN_mod_word(self.as_ptr(), w.into());
        if r == ffi::BN_ULONG::MAX { Err(ErrorStack::get()) } else { Ok(r.into()) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: rand_range,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: pseudo_rand_range,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_bit,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: clear_bit,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: is_bit_set,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 247, End Line: 249
/// Returns `true` if the `n`th bit of `self` is set to 1, `false` otherwise.
#[corresponds(BN_is_bit_set)]
#[allow(clippy::useless_conversion)]
pub fn is_bit_set(&self, n: i32) -> bool {
    unsafe { ffi::BN_is_bit_set(self.as_ptr(), n.into()) == 1 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: mask_bits,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: lshift1,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: rshift1,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: checked_add,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: checked_sub,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: lshift,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: rshift,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: to_owned,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_negative,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: ucmp,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: is_negative,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 334, End Line: 336
/// Returns `true` if `self` is negative.
#[corresponds(BN_is_negative)]
pub fn is_negative(&self) -> bool {
    unsafe { BN_is_negative(self.as_ptr()) == 1 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: is_odd,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 348, End Line: 350
/// Returns `true` is `self` is odd.
#[corresponds(BN_is_odd)]
#[cfg(any(ossl110, boringssl, libressl350))]
pub fn is_odd(&self) -> bool {
    unsafe { ffi::BN_is_odd(self.as_ptr()) == 1 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: num_bits,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 355, End Line: 357
/// Returns the number of significant bits in `self`.
#[corresponds(BN_num_bits)]
#[allow(clippy::unnecessary_cast)]
pub fn num_bits(&self) -> i32 {
    unsafe { ffi::BN_num_bits(self.as_ptr()) as i32 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: rand,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: pseudo_rand,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: generate_prime,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: checked_mul,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: checked_div,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: checked_rem,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: div_rem,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sqr,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: nnmod,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: mod_add,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: mod_sub,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: mod_mul,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: mod_sqr,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: mod_sqrt,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: exp,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: mod_exp,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: mod_inverse,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: gcd,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: is_prime,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: is_prime_fasttest,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: to_vec,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: to_vec_padded,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 851, End Line: 858
/// Returns a big-endian byte vector representation of the absolute value of `self` padded
/// to `pad_to` bytes.
///
/// If `pad_to` is less than `self.num_bytes()` then an error is returned.
///
/// `self` can be recreated by using `from_slice`.
///
/// ```
/// # use openssl::bn::BigNum;
/// let bn = BigNum::from_u32(0x4543).unwrap();
///
/// let bn_vec = bn.to_vec_padded(4).unwrap();
/// assert_eq!(&bn_vec, &[0, 0, 0x45, 0x43]);
///
/// let r = bn.to_vec_padded(1);
/// assert!(r.is_err());
///
/// let bn = -BigNum::from_u32(0x4543).unwrap();
/// let bn_vec = bn.to_vec_padded(4).unwrap();
/// assert_eq!(&bn_vec, &[0, 0, 0x45, 0x43]);
/// ```
#[corresponds(BN_bn2binpad)]
#[cfg(any(ossl110, libressl340, boringssl))]
pub fn to_vec_padded(&self, pad_to: i32) -> Result<Vec<u8>, ErrorStack> {
    let mut v = Vec::with_capacity(pad_to as usize);
    unsafe {
        cvt(ffi::BN_bn2binpad(self.as_ptr(), v.as_mut_ptr(), pad_to))?;
        v.set_len(pad_to as usize);
    }
    Ok(v)
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: to_dec_str,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: to_hex_str,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: to_asn1_integer,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_const_time,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: is_const_time,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 911, End Line: 916
/// Returns true if `self` is in const time mode.
#[corresponds(BN_get_flags)]
#[cfg(ossl110)]
pub fn is_const_time(&self) -> bool {
    unsafe {
        let ret = ffi::BN_get_flags(self.as_ptr(), ffi::BN_FLG_CONSTTIME);
        ret == ffi::BN_FLG_CONSTTIME
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: is_secure,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 921, End Line: 926
/// Returns true if `self` was created with [`BigNum::new_secure`].
#[corresponds(BN_get_flags)]
#[cfg(ossl110)]
pub fn is_secure(&self) -> bool {
    unsafe {
        let ret = ffi::BN_get_flags(self.as_ptr(), ffi::BN_FLG_SECURE);
        ret == ffi::BN_FLG_SECURE
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_u32,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_dec_str,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 961, End Line: 969
/// Creates a `BigNum` from a decimal string.
#[corresponds(BN_dec2bn)]
pub fn from_dec_str(s: &str) -> Result<BigNum, ErrorStack> {
    unsafe {
        ffi::init();
        let c_str = CString::new(s.as_bytes()).unwrap();
        let mut bn = ptr::null_mut();
        cvt(ffi::BN_dec2bn(&mut bn, c_str.as_ptr() as *const _))?;
        Ok(BigNum::from_ptr(bn))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_hex_str,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 973, End Line: 981
/// Creates a `BigNum` from a hexadecimal string.
#[corresponds(BN_hex2bn)]
pub fn from_hex_str(s: &str) -> Result<BigNum, ErrorStack> {
    unsafe {
        ffi::init();
        let c_str = CString::new(s.as_bytes()).unwrap();
        let mut bn = ptr::null_mut();
        cvt(ffi::BN_hex2bn(&mut bn, c_str.as_ptr() as *const _))?;
        Ok(BigNum::from_ptr(bn))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: get_rfc2409_prime_768,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: get_rfc2409_prime_1024,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: get_rfc3526_prime_1536,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: get_rfc3526_prime_2048,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: get_rfc3526_prime_3072,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: get_rfc3526_prime_4096,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: get_rfc3526_prime_6144,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: get_rfc3526_prime_8192,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_slice,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: copy_from_slice,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 1137, End Line: 1144
/// Copies data from a slice overwriting what was in the BigNum.
///
/// This function can be used to copy data from a slice to a
/// [secure BigNum][`BigNum::new_secure`].
///
/// # Examples
///
/// ```
/// # use openssl::bn::BigNum;
/// let mut bignum = BigNum::new().unwrap();
/// bignum.copy_from_slice(&[0x12, 0x00, 0x34]).unwrap();
///
/// assert_eq!(bignum, BigNum::from_u32(0x120034).unwrap());
/// ```
#[corresponds(BN_bin2bn)]
pub fn copy_from_slice(&mut self, n: &[u8]) -> Result<(), ErrorStack> {
    unsafe {
        assert!(n.len() <= LenType::MAX as usize);
        cvt_p(ffi::BN_bin2bn(n.as_ptr(), n.len() as LenType, self.0))?;
        Ok(())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cmp,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_nid,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 121, End Line: 130
/// Looks up the cipher for a certain nid.
#[corresponds(EVP_get_cipherbynid)]
pub fn from_nid(nid: Nid) -> Option<&'static CipherRef> {
    unsafe {
        let ptr = ffi::EVP_get_cipherbyname(ffi::OBJ_nid2sn(nid.as_raw()));
        if ptr.is_null() { None } else { Some(CipherRef::from_ptr(ptr as *mut _)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: fetch,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_xts,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_xts,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_ctr,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_cfb1,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_cfb128,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_cfb8,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_gcm,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_ccm,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_ocb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_wrap,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_wrap_pad,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_ctr,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_cfb1,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_cfb128,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_cfb8,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_gcm,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_ccm,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_ocb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_wrap,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_wrap_pad,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_ctr,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_cfb1,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_cfb128,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_cfb8,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_gcm,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_ccm,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_ocb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_wrap,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_wrap_pad,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: bf_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: bf_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: bf_cfb64,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: bf_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: des_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: des_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: des_ede3,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: des_ede3_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: des_ede3_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: des_ede3_cfb8,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: des_ede3_cfb64,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: des_ede3_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: rc4,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia128_cfb128,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia128_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia128_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia128_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia192_cfb128,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia192_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia192_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia192_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia256_cfb128,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia256_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia256_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia256_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cast5_cfb64,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cast5_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cast5_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cast5_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: idea_cfb64,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: idea_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: idea_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: idea_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: chacha20,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: chacha20_poly1305,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: seed_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: seed_cfb128,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: seed_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: seed_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sm4_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sm4_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sm4_ctr,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sm4_cfb128,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sm4_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: nid,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: key_length,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 574, End Line: 576
/// Returns the length of keys used with this cipher.
#[corresponds(EVP_CIPHER_key_length)]
pub fn key_length(&self) -> usize {
    unsafe { EVP_CIPHER_key_length(self.as_ptr()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: iv_length,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 584, End Line: 586
/// Returns the length of the IV used with this cipher.
///
/// # Note
///
/// Ciphers that do not use an IV have an IV length of 0.
#[corresponds(EVP_CIPHER_iv_length)]
pub fn iv_length(&self) -> usize {
    unsafe { EVP_CIPHER_iv_length(self.as_ptr()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: block_size,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 594, End Line: 596
/// Returns the block size of the cipher.
///
/// # Note
///
/// Stream ciphers have a block size of 1.
#[corresponds(EVP_CIPHER_block_size)]
pub fn block_size(&self) -> usize {
    unsafe { EVP_CIPHER_block_size(self.as_ptr()) as usize }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: copy,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 109, End Line: 114
#[corresponds(EVP_CIPHER_CTX_copy)]
pub fn copy(&mut self, src: &CipherCtxRef) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_CIPHER_CTX_copy(self.as_ptr(), src.as_ptr()))?;
        Ok(())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: cipher_init,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 156, End Line: 190
fn cipher_init(
    &mut self,
    type_: Option<&CipherRef>,
    key: Option<&[u8]>,
    iv: Option<&[u8]>,
    f: unsafe extern "C" fn(
        *mut ffi::EVP_CIPHER_CTX,
        *const ffi::EVP_CIPHER,
        *mut ffi::ENGINE,
        *const c_uchar,
        *const c_uchar,
    ) -> c_int,
) -> Result<(), ErrorStack> {
    if let Some(key) = key {
        let key_len = type_.map_or_else(|| self.key_length(), |c| c.key_length());
        assert!(key_len <= key.len());
    }
    if let Some(iv) = iv {
        let iv_len = type_.map_or_else(|| self.iv_length(), |c| c.iv_length());
        assert!(iv_len <= iv.len());
    }
    unsafe {
        cvt(
            f(
                self.as_ptr(),
                type_.map_or(ptr::null(), |p| p.as_ptr()),
                ptr::null_mut(),
                key.map_or(ptr::null(), |k| k.as_ptr()),
                iv.map_or(ptr::null(), |iv| iv.as_ptr()),
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: seal_init,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 206, End Line: 250
/// Initializes the context to perform envelope encryption.
///
/// Normally this is called once to set both the cipher and public keys. However, this process may be split up by
/// first providing the cipher with no public keys and then setting the public keys with no cipher.
///
/// `encrypted_keys` will contain the generated symmetric key encrypted with each corresponding asymmetric private
/// key. The generated IV will be written to `iv`.
///
/// # Panics
///
/// Panics if `pub_keys` is not the same size as `encrypted_keys`, the IV buffer is smaller than the cipher's IV
/// size, or if an IV is provided before the cipher.
#[corresponds(EVP_SealInit)]
#[cfg(not(boringssl))]
pub fn seal_init<T>(
    &mut self,
    type_: Option<&CipherRef>,
    pub_keys: &[PKey<T>],
    encrypted_keys: &mut [Vec<u8>],
    iv: Option<&mut [u8]>,
) -> Result<(), ErrorStack>
where
    T: HasPublic,
{
    assert_eq!(pub_keys.len(), encrypted_keys.len());
    if !pub_keys.is_empty() {
        let iv_len = type_.map_or_else(|| self.iv_length(), |c| c.iv_length());
        assert!(iv.as_ref().map_or(0, | b | b.len()) >= iv_len);
    }
    for (pub_key, buf) in pub_keys.iter().zip(&mut *encrypted_keys) {
        buf.resize(pub_key.size(), 0);
    }
    let mut keys = encrypted_keys.iter_mut().map(|b| b.as_mut_ptr()).collect::<Vec<_>>();
    let mut key_lengths = vec![0; pub_keys.len()];
    let pub_keys_len = i32::try_from(pub_keys.len()).unwrap();
    unsafe {
        cvt(
            ffi::EVP_SealInit(
                self.as_ptr(),
                type_.map_or(ptr::null(), |p| p.as_ptr()),
                keys.as_mut_ptr(),
                key_lengths.as_mut_ptr(),
                iv.map_or(ptr::null_mut(), |b| b.as_mut_ptr()),
                pub_keys.as_ptr() as *mut _,
                pub_keys_len,
            ),
        )?;
    }
    for (buf, len) in encrypted_keys.iter_mut().zip(key_lengths) {
        buf.truncate(len as usize);
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: open_init,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 263, End Line: 291
/// Initializes the context to perform envelope decryption.
///
/// Normally this is called once with all of the arguments present. However, this process may be split up by first
/// providing the cipher alone and then after providing the rest of the arguments in a second call.
///
/// # Panics
///
/// Panics if the IV buffer is smaller than the cipher's required IV size or if the IV is provided before the
/// cipher.
#[corresponds(EVP_OpenInit)]
#[cfg(not(boringssl))]
pub fn open_init<T>(
    &mut self,
    type_: Option<&CipherRef>,
    encrypted_key: &[u8],
    iv: Option<&[u8]>,
    priv_key: Option<&PKeyRef<T>>,
) -> Result<(), ErrorStack>
where
    T: HasPrivate,
{
    if priv_key.is_some() {
        let iv_len = type_.map_or_else(|| self.iv_length(), |c| c.iv_length());
        assert!(iv.map_or(0, | b | b.len()) >= iv_len);
    }
    let len = c_int::try_from(encrypted_key.len()).unwrap();
    unsafe {
        cvt(
            ffi::EVP_OpenInit(
                self.as_ptr(),
                type_.map_or(ptr::null(), |p| p.as_ptr()),
                encrypted_key.as_ptr(),
                len,
                iv.map_or(ptr::null(), |b| b.as_ptr()),
                priv_key.map_or(ptr::null_mut(), ForeignTypeRef::as_ptr),
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: assert_cipher,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: block_size,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 307, End Line: 311
/// Returns the block size of the context's cipher.
///
/// Stream ciphers will report a block size of 1.
///
/// # Panics
///
/// Panics if the context has not been initialized with a cipher.
#[corresponds(EVP_CIPHER_CTX_block_size)]
pub fn block_size(&self) -> usize {
    self.assert_cipher();
    unsafe { ffi::EVP_CIPHER_CTX_block_size(self.as_ptr()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: key_length,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 319, End Line: 323
/// Returns the key length of the context's cipher.
///
/// # Panics
///
/// Panics if the context has not been initialized with a cipher.
#[corresponds(EVP_CIPHER_CTX_key_length)]
pub fn key_length(&self) -> usize {
    self.assert_cipher();
    unsafe { ffi::EVP_CIPHER_CTX_key_length(self.as_ptr()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: rand_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 337, End Line: 348
/// Generates a random key based on the configured cipher.
///
/// # Panics
///
/// Panics if the context has not been initialized with a cipher or if the buffer is smaller than the cipher's key
/// length.
///
/// This corresponds to [`EVP_CIPHER_CTX_rand_key`].
///
/// [`EVP_CIPHER_CTX_rand_key`]: https://www.openssl.org/docs/manmaster/man3/EVP_CIPHER_CTX_rand_key.html
#[corresponds(EVP_CIPHER_CTX_rand_key)]
#[cfg(not(boringssl))]
pub fn rand_key(&self, buf: &mut [u8]) -> Result<(), ErrorStack> {
    assert!(buf.len() >= self.key_length());
    unsafe {
        cvt(ffi::EVP_CIPHER_CTX_rand_key(self.as_ptr(), buf.as_mut_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_key_length,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 358, End Line: 369
/// Sets the length of the key expected by the context.
///
/// Only some ciphers support configurable key lengths.
///
/// # Panics
///
/// Panics if the context has not been initialized with a cipher.
#[corresponds(EVP_CIPHER_CTX_set_key_length)]
pub fn set_key_length(&mut self, len: usize) -> Result<(), ErrorStack> {
    self.assert_cipher();
    unsafe {
        cvt(ffi::EVP_CIPHER_CTX_set_key_length(self.as_ptr(), len.try_into().unwrap()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: iv_length,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 379, End Line: 383
/// Returns the length of the IV expected by this context.
///
/// Returns 0 if the cipher does not use an IV.
///
/// # Panics
///
/// Panics if the context has not been initialized with a cipher.
#[corresponds(EVP_CIPHER_CTX_iv_length)]
pub fn iv_length(&self) -> usize {
    self.assert_cipher();
    unsafe { ffi::EVP_CIPHER_CTX_iv_length(self.as_ptr()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: num,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 395, End Line: 399
/// Returns the `num` parameter of the cipher.
///
/// Built-in ciphers typically use this to track how much of the
/// current underlying block has been "used" already.
///
/// # Panics
///
/// Panics if the context has not been initialized with a cipher.
#[corresponds(EVP_CIPHER_CTX_num)]
#[cfg(ossl110)]
pub fn num(&self) -> usize {
    self.assert_cipher();
    unsafe { ffi::EVP_CIPHER_CTX_num(self.as_ptr()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_iv_length,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 409, End Line: 424
/// Sets the length of the IV expected by this context.
///
/// Only some ciphers support configurable IV lengths.
///
/// # Panics
///
/// Panics if the context has not been initialized with a cipher.
#[corresponds(EVP_CIPHER_CTX_ctrl)]
pub fn set_iv_length(&mut self, len: usize) -> Result<(), ErrorStack> {
    self.assert_cipher();
    let len = c_int::try_from(len).unwrap();
    unsafe {
        cvt(
            ffi::EVP_CIPHER_CTX_ctrl(
                self.as_ptr(),
                ffi::EVP_CTRL_GCM_SET_IVLEN,
                len,
                ptr::null_mut(),
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: tag_length,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 437, End Line: 441
/// Returns the length of the authentication tag expected by this context.
///
/// Returns 0 if the cipher is not authenticated.
///
/// # Panics
///
/// Panics if the context has not been initialized with a cipher.
///
/// Requires OpenSSL 3.0.0 or newer.
#[corresponds(EVP_CIPHER_CTX_get_tag_length)]
#[cfg(ossl300)]
pub fn tag_length(&self) -> usize {
    self.assert_cipher();
    unsafe { ffi::EVP_CIPHER_CTX_get_tag_length(self.as_ptr()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: tag,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 450, End Line: 463
/// Retrieves the calculated authentication tag from the context.
///
/// This should be called after [`Self::cipher_final`], and is only supported by authenticated ciphers.
///
/// The size of the buffer indicates the size of the tag. While some ciphers support a range of tag sizes, it is
/// recommended to pick the maximum size.
#[corresponds(EVP_CIPHER_CTX_ctrl)]
pub fn tag(&self, tag: &mut [u8]) -> Result<(), ErrorStack> {
    let len = c_int::try_from(tag.len()).unwrap();
    unsafe {
        cvt(
            ffi::EVP_CIPHER_CTX_ctrl(
                self.as_ptr(),
                ffi::EVP_CTRL_GCM_GET_TAG,
                len,
                tag.as_mut_ptr() as *mut _,
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_tag_length,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 469, End Line: 482
/// Sets the length of the generated authentication tag.
///
/// This must be called when encrypting with a cipher in CCM mode to use a tag size other than the default.
#[corresponds(EVP_CIPHER_CTX_ctrl)]
pub fn set_tag_length(&mut self, len: usize) -> Result<(), ErrorStack> {
    let len = c_int::try_from(len).unwrap();
    unsafe {
        cvt(
            ffi::EVP_CIPHER_CTX_ctrl(
                self.as_ptr(),
                ffi::EVP_CTRL_GCM_SET_TAG,
                len,
                ptr::null_mut(),
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_tag,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 486, End Line: 499
/// Sets the authentication tag for verification during decryption.
#[corresponds(EVP_CIPHER_CTX_ctrl)]
pub fn set_tag(&mut self, tag: &[u8]) -> Result<(), ErrorStack> {
    let len = c_int::try_from(tag.len()).unwrap();
    unsafe {
        cvt(
            ffi::EVP_CIPHER_CTX_ctrl(
                self.as_ptr(),
                ffi::EVP_CTRL_GCM_SET_TAG,
                len,
                tag.as_ptr() as *mut _,
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_padding,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_data_len,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 515, End Line: 529
/// Sets the total length of plaintext data.
///
/// This is required for ciphers operating in CCM mode.
#[corresponds(EVP_CipherUpdate)]
pub fn set_data_len(&mut self, len: usize) -> Result<(), ErrorStack> {
    let len = c_int::try_from(len).unwrap();
    unsafe {
        cvt(
            ffi::EVP_CipherUpdate(
                self.as_ptr(),
                ptr::null_mut(),
                &mut 0,
                ptr::null(),
                len,
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_flags,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cipher_update,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cipher_update_inplace,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cipher_final,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs
-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: decrypt,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs
Start Line: 76, End Line: 96
/// Given the sender's private key, `pkey` and the recipient's certificate, `cert`,
/// decrypt the data in `self`.
#[corresponds(CMS_decrypt)]
pub fn decrypt<T>(&self, pkey: &PKeyRef<T>, cert: &X509) -> Result<Vec<u8>, ErrorStack>
where
    T: HasPrivate,
{
    unsafe {
        let pkey = pkey.as_ptr();
        let cert = cert.as_ptr();
        let out = MemBio::new()?;
        cvt(
            ffi::CMS_decrypt(self.as_ptr(), pkey, cert, ptr::null_mut(), out.as_ptr(), 0),
        )?;
        Ok(out.get_buf().to_owned())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: decrypt_without_cert_check,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs
Start Line: 104, End Line: 123
/// Given the sender's private key, `pkey`,
/// decrypt the data in `self` without validating the recipient certificate.
///
/// *Warning*: Not checking the recipient certificate may leave you vulnerable to Bleichenbacher's attack on PKCS#1 v1.5 RSA padding.
#[corresponds(CMS_decrypt)]
pub fn decrypt_without_cert_check<T>(
    &self,
    pkey: &PKeyRef<T>,
) -> Result<Vec<u8>, ErrorStack>
where
    T: HasPrivate,
{
    unsafe {
        let pkey = pkey.as_ptr();
        let out = MemBio::new()?;
        cvt(
            ffi::CMS_decrypt(
                self.as_ptr(),
                pkey,
                ptr::null_mut(),
                ptr::null_mut(),
                out.as_ptr(),
                0,
            ),
        )?;
        Ok(out.get_buf().to_owned())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: smime_read_cms,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 7 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sign,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs
Potential Overunsafe：false

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs
Start Line: 174, End Line: 204
/// Given a signing cert `signcert`, private key `pkey`, a certificate stack `certs`,
/// data `data` and flags `flags`, create a CmsContentInfo struct.
///
/// All arguments are optional.
#[corresponds(CMS_sign)]
pub fn sign<T>(
    signcert: Option<&X509Ref>,
    pkey: Option<&PKeyRef<T>>,
    certs: Option<&StackRef<X509>>,
    data: Option<&[u8]>,
    flags: CMSOptions,
) -> Result<CmsContentInfo, ErrorStack>
where
    T: HasPrivate,
{
    unsafe {
        let signcert = signcert.map_or(ptr::null_mut(), |p| p.as_ptr());
        let pkey = pkey.map_or(ptr::null_mut(), |p| p.as_ptr());
        let data_bio = match data {
            Some(data) => Some(MemBioSlice::new(data)?),
            None => None,
        };
        let data_bio_ptr = data_bio.as_ref().map_or(ptr::null_mut(), |p| p.as_ptr());
        let certs = certs.map_or(ptr::null_mut(), |p| p.as_ptr());
        let cms = cvt_p(
            ffi::CMS_sign(signcert, pkey, certs, data_bio_ptr, flags.bits()),
        )?;
        Ok(CmsContentInfo::from_ptr(cms))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: encrypt,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 8 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: verify,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs
Start Line: 241, End Line: 277
/// Verify this CmsContentInfo's signature,
/// This will search the 'certs' list for the signing certificate.
/// Additional certificates, needed for building the certificate chain, may be
/// given in 'store' as well as additional CRLs.
/// A detached signature may be passed in `detached_data`. The signed content
/// without signature, will be copied into output_data if it is present.
///
#[corresponds(CMS_verify)]
pub fn verify(
    &mut self,
    certs: Option<&StackRef<X509>>,
    store: Option<&X509StoreRef>,
    detached_data: Option<&[u8]>,
    output_data: Option<&mut Vec<u8>>,
    flags: CMSOptions,
) -> Result<(), ErrorStack> {
    unsafe {
        let certs_ptr = certs.map_or(ptr::null_mut(), |p| p.as_ptr());
        let store_ptr = store.map_or(ptr::null_mut(), |p| p.as_ptr());
        let detached_data_bio = match detached_data {
            Some(data) => Some(MemBioSlice::new(data)?),
            None => None,
        };
        let detached_data_bio_ptr = detached_data_bio
            .as_ref()
            .map_or(ptr::null_mut(), |p| p.as_ptr());
        let out_bio = MemBio::new()?;
        cvt(
            ffi::CMS_verify(
                self.as_ptr(),
                certs_ptr,
                store_ptr,
                detached_data_bio_ptr,
                out_bio.as_ptr(),
                flags.bits(),
            ),
        )?;
        if let Some(data) = output_data {
            data.clear();
            data.extend_from_slice(out_bio.get_buf());
        }
        Ok(())
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\conf.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: default,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\conf.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\conf.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\derive.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\derive.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_peer,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\derive.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_peer_ex,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\derive.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: len,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\derive.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: derive,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\derive.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: drop,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\derive.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: check_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 45, End Line: 51
/// Validates DH parameters for correctness
#[corresponds(DH_check_key)]
pub fn check_key(&self) -> Result<bool, ErrorStack> {
    unsafe {
        let mut codes = 0;
        cvt(ffi::DH_check(self.as_ptr(), &mut codes))?;
        Ok(codes == 0)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_pqg,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 61, End Line: 77
/// Creates a DH instance based upon the given primes and generator params.
#[corresponds(DH_set0_pqg)]
pub fn from_pqg(
    prime_p: BigNum,
    prime_q: Option<BigNum>,
    generator: BigNum,
) -> Result<Dh<Params>, ErrorStack> {
    unsafe {
        let dh = Dh::from_ptr(cvt_p(ffi::DH_new())?);
        cvt(
            DH_set0_pqg(
                dh.0,
                prime_p.as_ptr(),
                prime_q.as_ref().map_or(ptr::null_mut(), |q| q.as_ptr()),
                generator.as_ptr(),
            ),
        )?;
        mem::forget((prime_p, prime_q, generator));
        Ok(dh)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_public_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 80, End Line: 87
/// Sets the public key on the DH object.
pub fn set_public_key(self, pub_key: BigNum) -> Result<Dh<Public>, ErrorStack> {
    unsafe {
        let dh_ptr = self.0;
        cvt(DH_set0_key(dh_ptr, pub_key.as_ptr(), ptr::null_mut()))?;
        mem::forget((self, pub_key));
        Ok(Dh::from_ptr(dh_ptr))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_private_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 90, End Line: 100
/// Sets the private key on the DH object and recomputes the public key.
pub fn set_private_key(self, priv_key: BigNum) -> Result<Dh<Private>, ErrorStack> {
    unsafe {
        let dh_ptr = self.0;
        cvt(DH_set0_key(dh_ptr, ptr::null_mut(), priv_key.as_ptr()))?;
        mem::forget(priv_key);
        cvt(ffi::DH_generate_key(dh_ptr))?;
        mem::forget(self);
        Ok(Dh::from_ptr(dh_ptr))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 103, End Line: 110
/// Sets the public and private keys on the DH object.
pub fn set_key(
    self,
    pub_key: BigNum,
    priv_key: BigNum,
) -> Result<Dh<Private>, ErrorStack> {
    unsafe {
        let dh_ptr = self.0;
        cvt(DH_set0_key(dh_ptr, pub_key.as_ptr(), priv_key.as_ptr()))?;
        mem::forget((self, pub_key, priv_key));
        Ok(Dh::from_ptr(dh_ptr))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: generate_params,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 114, End Line: 125
/// Generates DH params based on the given `prime_len` and a fixed `generator` value.
#[corresponds(DH_generate_parameters_ex)]
pub fn generate_params(
    prime_len: u32,
    generator: u32,
) -> Result<Dh<Params>, ErrorStack> {
    unsafe {
        let dh = Dh::from_ptr(cvt_p(ffi::DH_new())?);
        cvt(
            ffi::DH_generate_parameters_ex(
                dh.0,
                prime_len as i32,
                generator as i32,
                ptr::null_mut(),
            ),
        )?;
        Ok(dh)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: generate_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 129, End Line: 136
/// Generates a public and a private key based on the DH params.
#[corresponds(DH_generate_key)]
pub fn generate_key(self) -> Result<Dh<Private>, ErrorStack> {
    unsafe {
        let dh_ptr = self.0;
        cvt(ffi::DH_generate_key(dh_ptr))?;
        mem::forget(self);
        Ok(Dh::from_ptr(dh_ptr))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: get_1024_160,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: get_2048_224,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: get_2048_256,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: prime_p,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: prime_q,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 203, End Line: 213
/// Returns the prime `q` from the DH instance.
#[corresponds(DH_get0_pqg)]
pub fn prime_q(&self) -> Option<&BigNumRef> {
    let mut q = ptr::null();
    unsafe {
        DH_get0_pqg(self.as_ptr(), ptr::null_mut(), &mut q, ptr::null_mut());
        if q.is_null() { None } else { Some(BigNumRef::from_ptr(q as *mut _)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: generator,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: public_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: compute_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 247, End Line: 258
/// Computes a shared secret from the own private key and the given `public_key`.
#[corresponds(DH_compute_key)]
pub fn compute_key(&self, public_key: &BigNumRef) -> Result<Vec<u8>, ErrorStack> {
    unsafe {
        let key_len = ffi::DH_size(self.as_ptr());
        let mut key = vec![0u8; key_len as usize];
        cvt(ffi::DH_compute_key(key.as_mut_ptr(), public_key.as_ptr(), self.as_ptr()))?;
        Ok(key)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: private_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: to_owned,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: pub_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: priv_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: size,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Start Line: 155, End Line: 157
/// Returns the maximum size of the signature output by `self` in bytes.
#[corresponds(DSA_size)]
pub fn size(&self) -> u32 {
    unsafe { ffi::DSA_size(self.as_ptr()) as u32 }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: p,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: q,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: g,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_pqg,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Start Line: 197, End Line: 204
/// Creates a DSA params based upon the given parameters.
#[corresponds(DSA_set0_pqg)]
pub fn from_pqg(p: BigNum, q: BigNum, g: BigNum) -> Result<Dsa<Params>, ErrorStack> {
    unsafe {
        let dsa = Dsa::from_ptr(cvt_p(ffi::DSA_new())?);
        cvt(DSA_set0_pqg(dsa.0, p.as_ptr(), q.as_ptr(), g.as_ptr()))?;
        mem::forget((p, q, g));
        Ok(dsa)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: generate_params,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Start Line: 208, End Line: 223
/// Generates DSA params based on the given number of bits.
#[corresponds(DSA_generate_parameters_ex)]
pub fn generate_params(bits: u32) -> Result<Dsa<Params>, ErrorStack> {
    ffi::init();
    unsafe {
        let dsa = Dsa::from_ptr(cvt_p(ffi::DSA_new())?);
        cvt(
            ffi::DSA_generate_parameters_ex(
                dsa.0,
                bits as BitType,
                ptr::null(),
                0,
                ptr::null_mut(),
                ptr::null_mut(),
                ptr::null_mut(),
            ),
        )?;
        Ok(dsa)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: generate_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Start Line: 227, End Line: 234
/// Generates a private key based on the DSA params.
#[corresponds(DSA_generate_key)]
pub fn generate_key(self) -> Result<Dsa<Private>, ErrorStack> {
    unsafe {
        let dsa_ptr = self.0;
        cvt(ffi::DSA_generate_key(dsa_ptr))?;
        mem::forget(self);
        Ok(Dsa::from_ptr(dsa_ptr))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_private_components,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Start Line: 251, End Line: 267
/// Create a DSA key pair with the given parameters
///
/// `p`, `q` and `g` are the common parameters.
/// `priv_key` is the private component of the key pair.
/// `pub_key` is the public component of the key. Can be computed via `g^(priv_key) mod p`
pub fn from_private_components(
    p: BigNum,
    q: BigNum,
    g: BigNum,
    priv_key: BigNum,
    pub_key: BigNum,
) -> Result<Dsa<Private>, ErrorStack> {
    ffi::init();
    unsafe {
        let dsa = Dsa::from_ptr(cvt_p(ffi::DSA_new())?);
        cvt(DSA_set0_pqg(dsa.0, p.as_ptr(), q.as_ptr(), g.as_ptr()))?;
        mem::forget((p, q, g));
        cvt(DSA_set0_key(dsa.0, pub_key.as_ptr(), priv_key.as_ptr()))?;
        mem::forget((pub_key, priv_key));
        Ok(dsa)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_public_components,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Start Line: 293, End Line: 308
/// Create a new DSA key with only public components.
///
/// `p`, `q` and `g` are the common parameters.
/// `pub_key` is the public component of the key.
pub fn from_public_components(
    p: BigNum,
    q: BigNum,
    g: BigNum,
    pub_key: BigNum,
) -> Result<Dsa<Public>, ErrorStack> {
    ffi::init();
    unsafe {
        let dsa = Dsa::from_ptr(cvt_p(ffi::DSA_new())?);
        cvt(DSA_set0_pqg(dsa.0, p.as_ptr(), q.as_ptr(), g.as_ptr()))?;
        mem::forget((p, q, g));
        cvt(DSA_set0_key(dsa.0, pub_key.as_ptr(), ptr::null_mut()))?;
        mem::forget(pub_key);
        Ok(dsa)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: r,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: s,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_curve_name,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_components,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: components_gfp,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: components_gf2m,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cofactor,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: degree,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 237, End Line: 239
/// Returns the degree of the curve.
#[corresponds(EC_GROUP_get_degree)]
pub fn degree(&self) -> u32 {
    unsafe { ffi::EC_GROUP_get_degree(self.as_ptr()) as u32 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: order_bits,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 244, End Line: 246
/// Returns the number of bits in the group order.
#[corresponds(EC_GROUP_order_bits)]
#[cfg(ossl110)]
pub fn order_bits(&self) -> u32 {
    unsafe { ffi::EC_GROUP_order_bits(self.as_ptr()) as u32 }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: generator,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_generator,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: order,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_asn1_flag,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: asn1_flag,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: curve_name,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: add,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: mul,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: mul_generator,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: mul_full,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: invert,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: to_bytes,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 439, End Line: 472
/// Serializes the point to a binary representation.
#[corresponds(EC_POINT_point2oct)]
pub fn to_bytes(
    &self,
    group: &EcGroupRef,
    form: PointConversionForm,
    ctx: &mut BigNumContextRef,
) -> Result<Vec<u8>, ErrorStack> {
    unsafe {
        let len = ffi::EC_POINT_point2oct(
            group.as_ptr(),
            self.as_ptr(),
            form.0,
            ptr::null_mut(),
            0,
            ctx.as_ptr(),
        );
        if len == 0 {
            return Err(ErrorStack::get());
        }
        let mut buf = vec![0; len];
        let len = ffi::EC_POINT_point2oct(
            group.as_ptr(),
            self.as_ptr(),
            form.0,
            buf.as_mut_ptr(),
            len,
            ctx.as_ptr(),
        );
        if len == 0 { Err(ErrorStack::get()) } else { Ok(buf) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: to_hex_str,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: to_owned,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: eq,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: affine_coordinates,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: affine_coordinates_gfp,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_affine_coordinates_gfp,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: affine_coordinates_gf2m,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: is_infinity,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 611, End Line: 616
/// Checks if point is infinity
#[corresponds(EC_POINT_is_at_infinity)]
pub fn is_infinity(&self, group: &EcGroupRef) -> bool {
    unsafe {
        let res = ffi::EC_POINT_is_at_infinity(group.as_ptr(), self.as_ptr());
        res == 1
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: is_on_curve,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_bytes,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 645, End Line: 661
/// Creates point from a binary representation
#[corresponds(EC_POINT_oct2point)]
pub fn from_bytes(
    group: &EcGroupRef,
    buf: &[u8],
    ctx: &mut BigNumContextRef,
) -> Result<EcPoint, ErrorStack> {
    let point = EcPoint::new(group)?;
    unsafe {
        cvt(
            ffi::EC_POINT_oct2point(
                group.as_ptr(),
                point.as_ptr(),
                buf.as_ptr(),
                buf.len(),
                ctx.as_ptr(),
            ),
        )?;
    }
    Ok(point)
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_hex_str,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 666, End Line: 682
/// Creates point from a hexadecimal string representation
#[corresponds(EC_POINT_hex2point)]
#[cfg(not(boringssl))]
pub fn from_hex_str(
    group: &EcGroupRef,
    s: &str,
    ctx: &mut BigNumContextRef,
) -> Result<EcPoint, ErrorStack> {
    let point = EcPoint::new(group)?;
    unsafe {
        let c_str = CString::new(s.as_bytes()).unwrap();
        cvt_p(
            ffi::EC_POINT_hex2point(
                group.as_ptr(),
                c_str.as_ptr() as *const _,
                point.as_ptr(),
                ctx.as_ptr(),
            ),
        )?;
    }
    Ok(point)
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: private_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: public_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: group,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: check_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_group,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_public_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_public_key_affine_coordinates,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: generate,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_private_components,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ecdsa.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sign,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ecdsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_private_components,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ecdsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: verify,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ecdsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: r,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ecdsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: s,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ecdsa.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: drop,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Start Line: 76, End Line: 95
/// Creates a new `Encrypter`.
///
/// OpenSSL documentation at [`EVP_PKEY_encrypt_init`].
///
/// [`EVP_PKEY_encrypt_init`]: https://www.openssl.org/docs/manmaster/man3/EVP_PKEY_encrypt_init.html
pub fn new<T>(pkey: &'a PKeyRef<T>) -> Result<Encrypter<'a>, ErrorStack>
where
    T: HasPublic,
{
    unsafe {
        ffi::init();
        let pctx = cvt_p(ffi::EVP_PKEY_CTX_new(pkey.as_ptr(), ptr::null_mut()))?;
        let r = ffi::EVP_PKEY_encrypt_init(pctx);
        if r != 1 {
            ffi::EVP_PKEY_CTX_free(pctx);
            return Err(ErrorStack::get());
        }
        Ok(Encrypter { pctx, _p: PhantomData })
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: rsa_padding,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_rsa_padding,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_rsa_mgf1_md,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_rsa_oaep_md,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_rsa_oaep_label,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: encrypt,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Start Line: 221, End Line: 234
/// Performs public key encryption.
///
/// In order to know the size needed for the output buffer, use [`encrypt_len`](Encrypter::encrypt_len).
/// Note that the length of the output buffer can be greater of the length of the encoded data.
/// ```
/// # use openssl::{
/// #   encrypt::Encrypter,
/// #   pkey::PKey,
/// #   rsa::{Rsa, Padding},
/// # };
/// #
/// # let key = include_bytes!("../test/rsa.pem");
/// # let private_key = Rsa::private_key_from_pem(key).unwrap();
/// # let pkey = PKey::from_rsa(private_key).unwrap();
/// # let input = b"hello world".to_vec();
/// #
/// let mut encrypter = Encrypter::new(&pkey).unwrap();
/// encrypter.set_rsa_padding(Padding::PKCS1).unwrap();
///
/// // Get the length of the output buffer
/// let buffer_len = encrypter.encrypt_len(&input).unwrap();
/// let mut encoded = vec![0u8; buffer_len];
///
/// // Encode the data and get its length
/// let encoded_len = encrypter.encrypt(&input, &mut encoded).unwrap();
///
/// // Use only the part of the buffer with the encoded data
/// let encoded = &encoded[..encoded_len];
/// ```
///
/// This corresponds to [`EVP_PKEY_encrypt`].
///
/// [`EVP_PKEY_encrypt`]: https://www.openssl.org/docs/manmaster/man3/EVP_PKEY_encrypt.html
pub fn encrypt(&self, from: &[u8], to: &mut [u8]) -> Result<usize, ErrorStack> {
    let mut written = to.len();
    unsafe {
        cvt(
            ffi::EVP_PKEY_encrypt(
                self.pctx,
                to.as_mut_ptr(),
                &mut written,
                from.as_ptr(),
                from.len(),
            ),
        )?;
    }
    Ok(written)
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: encrypt_len,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Start Line: 241, End Line: 254
/// Gets the size of the buffer needed to encrypt the input data.
///
/// This corresponds to [`EVP_PKEY_encrypt`] called with a null pointer as output argument.
///
/// [`EVP_PKEY_encrypt`]: https://www.openssl.org/docs/manmaster/man3/EVP_PKEY_encrypt.html
pub fn encrypt_len(&self, from: &[u8]) -> Result<usize, ErrorStack> {
    let mut written = 0;
    unsafe {
        cvt(
            ffi::EVP_PKEY_encrypt(
                self.pctx,
                ptr::null_mut(),
                &mut written,
                from.as_ptr(),
                from.len(),
            ),
        )?;
    }
    Ok(written)
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: decrypt,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Start Line: 440, End Line: 453
/// Performs public key decryption.
///
/// In order to know the size needed for the output buffer, use [`decrypt_len`](Decrypter::decrypt_len).
/// Note that the length of the output buffer can be greater of the length of the decoded data.
/// ```
/// # use openssl::{
/// #   encrypt::Decrypter,
/// #   pkey::PKey,
/// #   rsa::{Rsa, Padding},
/// # };
/// #
/// # const INPUT: &[u8] = b"\
/// #     \x26\xa1\xc1\x13\xc5\x7f\xb4\x9f\xa0\xb4\xde\x61\x5e\x2e\xc6\xfb\x76\x5c\xd1\x2b\x5f\
/// #     \x1d\x36\x60\xfa\xf8\xe8\xb3\x21\xf4\x9c\x70\xbc\x03\xea\xea\xac\xce\x4b\xb3\xf6\x45\
/// #     \xcc\xb3\x80\x9e\xa8\xf7\xc3\x5d\x06\x12\x7a\xa3\x0c\x30\x67\xf1\xe7\x94\x6c\xf6\x26\
/// #     \xac\x28\x17\x59\x69\xe1\xdc\xed\x7e\xc0\xe9\x62\x57\x49\xce\xdd\x13\x07\xde\x18\x03\
/// #     \x0f\x9d\x61\x65\xb9\x23\x8c\x78\x4b\xad\x23\x49\x75\x47\x64\xa0\xa0\xa2\x90\xc1\x49\
/// #     \x1b\x05\x24\xc2\xe9\x2c\x0d\x49\x78\x72\x61\x72\xed\x8b\x6f\x8a\xe8\xca\x05\x5c\x58\
/// #     \xd6\x95\xd6\x7b\xe3\x2d\x0d\xaa\x3e\x6d\x3c\x9a\x1c\x1d\xb4\x6c\x42\x9d\x9a\x82\x55\
/// #     \xd9\xde\xc8\x08\x7b\x17\xac\xd7\xaf\x86\x7b\x69\x9e\x3c\xf4\x5e\x1c\x39\x52\x6d\x62\
/// #     \x50\x51\xbd\xa6\xc8\x4e\xe9\x34\xf0\x37\x0d\xa9\xa9\x77\xe6\xf5\xc2\x47\x2d\xa8\xee\
/// #     \x3f\x69\x78\xff\xa9\xdc\x70\x22\x20\x9a\x5c\x9b\x70\x15\x90\xd3\xb4\x0e\x54\x9e\x48\
/// #     \xed\xb6\x2c\x88\xfc\xb4\xa9\x37\x10\xfa\x71\xb2\xec\x75\xe7\xe7\x0e\xf4\x60\x2c\x7b\
/// #     \x58\xaf\xa0\x53\xbd\x24\xf1\x12\xe3\x2e\x99\x25\x0a\x54\x54\x9d\xa1\xdb\xca\x41\x85\
/// #     \xf4\x62\x78\x64";
/// #
/// # let key = include_bytes!("../test/rsa.pem");
/// # let private_key = Rsa::private_key_from_pem(key).unwrap();
/// # let pkey = PKey::from_rsa(private_key).unwrap();
/// # let input = INPUT.to_vec();
/// #
/// let mut decrypter = Decrypter::new(&pkey).unwrap();
/// decrypter.set_rsa_padding(Padding::PKCS1).unwrap();
///
/// // Get the length of the output buffer
/// let buffer_len = decrypter.decrypt_len(&input).unwrap();
/// let mut decoded = vec![0u8; buffer_len];
///
/// // Decrypt the data and get its length
/// let decoded_len = decrypter.decrypt(&input, &mut decoded).unwrap();
///
/// // Use only the part of the buffer with the decrypted data
/// let decoded = &decoded[..decoded_len];
/// ```
///
/// This corresponds to [`EVP_PKEY_decrypt`].
///
/// [`EVP_PKEY_decrypt`]: https://www.openssl.org/docs/manmaster/man3/EVP_PKEY_decrypt.html
pub fn decrypt(&self, from: &[u8], to: &mut [u8]) -> Result<usize, ErrorStack> {
    let mut written = to.len();
    unsafe {
        cvt(
            ffi::EVP_PKEY_decrypt(
                self.pctx,
                to.as_mut_ptr(),
                &mut written,
                from.as_ptr(),
                from.len(),
            ),
        )?;
    }
    Ok(written)
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: decrypt_len,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Start Line: 460, End Line: 473
/// Gets the size of the buffer needed to decrypt the input data.
///
/// This corresponds to [`EVP_PKEY_decrypt`] called with a null pointer as output argument.
///
/// [`EVP_PKEY_decrypt`]: https://www.openssl.org/docs/manmaster/man3/EVP_PKEY_decrypt.html
pub fn decrypt_len(&self, from: &[u8]) -> Result<usize, ErrorStack> {
    let mut written = 0;
    unsafe {
        cvt(
            ffi::EVP_PKEY_decrypt(
                self.pctx,
                ptr::null_mut(),
                &mut written,
                from.as_ptr(),
                from.len(),
            ),
        )?;
    }
    Ok(written)
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\envelope.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\envelope.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\error.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: put_error,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\error.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: library,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\error.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\error.rs
Start Line: 228, End Line: 237
/// Returns the name of the library reporting the error, if available.
pub fn library(&self) -> Option<&'static str> {
    unsafe {
        let cstr = ffi::ERR_lib_error_string(self.code);
        if cstr.is_null() {
            return None;
        }
        let bytes = CStr::from_ptr(cstr as *const _).to_bytes();
        Some(str::from_utf8(bytes).unwrap())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: library_code,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\error.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: reason,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\error.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\error.rs
Start Line: 254, End Line: 263
/// Returns the reason for the error.
pub fn reason(&self) -> Option<&'static str> {
    unsafe {
        let cstr = ffi::ERR_reason_error_string(self.code);
        if cstr.is_null() {
            return None;
        }
        let bytes = CStr::from_ptr(cstr as *const _).to_bytes();
        Some(str::from_utf8(bytes).unwrap())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: reason_code,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\error.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ex_data.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\fips.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: enable,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\fips.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: enabled,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\fips.rs
Potential Overunsafe：true

Found function with unsafe block in enabled:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\fips.rs
Start Line: 19, End Line: 21
/// Determines if the library is running in the FIPS 140-2 mode of operation.
#[corresponds(FIPS_mode)]
pub fn enabled() -> bool {
    unsafe { ffi::FIPS_mode() != 0 }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_nid,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 72, End Line: 81
/// Returns the `MessageDigest` corresponding to an `Nid`.
///
/// This corresponds to [`EVP_get_digestbynid`].
///
/// [`EVP_get_digestbynid`]: https://www.openssl.org/docs/manmaster/crypto/EVP_DigestInit.html
pub fn from_nid(type_: Nid) -> Option<MessageDigest> {
    unsafe {
        let ptr = ffi::EVP_get_digestbynid(type_.as_raw());
        if ptr.is_null() { None } else { Some(MessageDigest(ptr)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_name,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 88, End Line: 99
/// Returns the `MessageDigest` corresponding to an algorithm name.
///
/// This corresponds to [`EVP_get_digestbyname`].
///
/// [`EVP_get_digestbyname`]: https://www.openssl.org/docs/manmaster/crypto/EVP_DigestInit.html
pub fn from_name(name: &str) -> Option<MessageDigest> {
    ffi::init();
    let name = CString::new(name).ok()?;
    unsafe {
        let ptr = ffi::EVP_get_digestbyname(name.as_ptr());
        if ptr.is_null() { None } else { Some(MessageDigest(ptr)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: null,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: md5,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha1,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha224,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha256,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha384,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha512,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha3_224,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha3_256,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha3_384,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha3_512,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: shake_128,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: shake_256,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: ripemd160,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sm3,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: block_size,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 177, End Line: 179
/// The block size of the digest in bytes.
#[allow(clippy::trivially_copy_pass_by_ref)]
pub fn block_size(&self) -> usize {
    unsafe { ffi::EVP_MD_block_size(self.0) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: size,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 183, End Line: 185
/// The size of the digest in bytes.
#[allow(clippy::trivially_copy_pass_by_ref)]
pub fn size(&self) -> usize {
    unsafe { ffi::EVP_MD_size(self.0) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: type_,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 246, End Line: 259
/// Creates a new `Hasher` with the specified hash type.
pub fn new(ty: MessageDigest) -> Result<Hasher, ErrorStack> {
    ffi::init();
    let ctx = unsafe { cvt_p(EVP_MD_CTX_new())? };
    let mut h = Hasher {
        ctx,
        md: ty.as_ptr(),
        type_: ty,
        state: Finalized,
    };
    h.init()?;
    Ok(h)
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: init,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 261, End Line: 274
fn init(&mut self) -> Result<(), ErrorStack> {
    match self.state {
        Reset => return Ok(()),
        Updated => {
            self.finish()?;
        }
        Finalized => {}
    }
    unsafe {
        cvt(ffi::EVP_DigestInit_ex(self.ctx, self.md, ptr::null_mut()))?;
    }
    self.state = Reset;
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: update,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 277, End Line: 290
/// Feeds data into the hasher.
pub fn update(&mut self, data: &[u8]) -> Result<(), ErrorStack> {
    if self.state == Finalized {
        self.init()?;
    }
    unsafe {
        cvt(ffi::EVP_DigestUpdate(self.ctx, data.as_ptr() as *mut _, data.len()))?;
    }
    self.state = Updated;
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: finish,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 293, End Line: 314
/// Returns the hash of the data written and resets the non-XOF hasher.
pub fn finish(&mut self) -> Result<DigestBytes, ErrorStack> {
    if self.state == Finalized {
        self.init()?;
    }
    unsafe {
        #[cfg(not(boringssl))]
        let mut len = ffi::EVP_MAX_MD_SIZE;
        #[cfg(boringssl)]
        let mut len = ffi::EVP_MAX_MD_SIZE as u32;
        let mut buf = [0; ffi::EVP_MAX_MD_SIZE as usize];
        cvt(ffi::EVP_DigestFinal_ex(self.ctx, buf.as_mut_ptr(), &mut len))?;
        self.state = Finalized;
        Ok(DigestBytes {
            buf,
            len: len as usize,
        })
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: finish_xof,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 319, End Line: 332
/// Writes the hash of the data into the supplied buf and resets the XOF hasher.
/// The hash will be as long as the buf.
#[cfg(ossl111)]
pub fn finish_xof(&mut self, buf: &mut [u8]) -> Result<(), ErrorStack> {
    if self.state == Finalized {
        self.init()?;
    }
    unsafe {
        cvt(ffi::EVP_DigestFinalXOF(self.ctx, buf.as_mut_ptr(), buf.len()))?;
        self.state = Finalized;
        Ok(())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: clone,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 348, End Line: 362
fn clone(&self) -> Hasher {
    let ctx = unsafe {
        let ctx = EVP_MD_CTX_new();
        assert!(! ctx.is_null());
        let r = ffi::EVP_MD_CTX_copy_ex(ctx, self.ctx);
        assert_eq!(r, 1);
        ctx
    };
    Hasher {
        ctx,
        md: self.md,
        type_: self.type_,
        state: self.state,
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: drop,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 366, End Line: 373
fn drop(&mut self) {
    unsafe {
        if self.state != Finalized {
            drop(self.finish());
        }
        EVP_MD_CTX_free(self.ctx);
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\lib_ctx.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\lib_ctx.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\macros.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_nid,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Start Line: 82, End Line: 91
/// Returns the `Md` corresponding to an [`Nid`].
#[corresponds(EVP_get_digestbynid)]
pub fn from_nid(type_: Nid) -> Option<&'static MdRef> {
    unsafe {
        let ptr = ffi::EVP_get_digestbynid(type_.as_raw());
        if ptr.is_null() { None } else { Some(MdRef::from_ptr(ptr as *mut _)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: fetch,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: null,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: md5,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha1,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha224,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha256,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha384,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha512,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha3_224,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha3_256,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha3_384,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha3_512,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: shake128,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: shake256,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: ripemd160,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sm3,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: block_size,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Start Line: 216, End Line: 218
/// Returns the block size of the digest in bytes.
#[corresponds(EVP_MD_block_size)]
#[inline]
pub fn block_size(&self) -> usize {
    unsafe { ffi::EVP_MD_block_size(self.as_ptr()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: size,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Start Line: 223, End Line: 225
/// Returns the size of the digest in bytes.
#[corresponds(EVP_MD_size)]
#[inline]
pub fn size(&self) -> usize {
    unsafe { ffi::EVP_MD_size(self.as_ptr()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: type_,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: digest_init,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 130, End Line: 140
/// Initializes the context to compute the digest of data.
#[corresponds(EVP_DigestInit_ex)]
#[inline]
pub fn digest_init(&mut self, digest: &MdRef) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_DigestInit_ex(self.as_ptr(), digest.as_ptr(), ptr::null_mut()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: digest_sign_init,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 147, End Line: 166
/// Initializes the context to compute the signature of data.
///
/// A reference to the context's inner `PkeyCtx` is returned, allowing signature settings to be configured.
#[corresponds(EVP_DigestSignInit)]
#[inline]
pub fn digest_sign_init<'a, T>(
    &'a mut self,
    digest: Option<&MdRef>,
    pkey: &PKeyRef<T>,
) -> Result<&'a mut PkeyCtxRef<T>, ErrorStack>
where
    T: HasPrivate,
{
    unsafe {
        let mut p = ptr::null_mut();
        cvt(
            ffi::EVP_DigestSignInit(
                self.as_ptr(),
                &mut p,
                digest.map_or(ptr::null(), |p| p.as_ptr()),
                ptr::null_mut(),
                pkey.as_ptr(),
            ),
        )?;
        Ok(PkeyCtxRef::from_ptr_mut(p))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: digest_verify_init,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 173, End Line: 192
/// Initializes the context to verify the signature of data.
///
/// A reference to the context's inner `PkeyCtx` is returned, allowing signature settings to be configured.
#[corresponds(EVP_DigestVerifyInit)]
#[inline]
pub fn digest_verify_init<'a, T>(
    &'a mut self,
    digest: Option<&MdRef>,
    pkey: &PKeyRef<T>,
) -> Result<&'a mut PkeyCtxRef<T>, ErrorStack>
where
    T: HasPublic,
{
    unsafe {
        let mut p = ptr::null_mut();
        cvt(
            ffi::EVP_DigestVerifyInit(
                self.as_ptr(),
                &mut p,
                digest.map_or(ptr::null(), |p| p.as_ptr()),
                ptr::null_mut(),
                pkey.as_ptr(),
            ),
        )?;
        Ok(PkeyCtxRef::from_ptr_mut(p))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: digest_update,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 197, End Line: 207
/// Updates the context with more data.
#[corresponds(EVP_DigestUpdate)]
#[inline]
pub fn digest_update(&mut self, data: &[u8]) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
            ffi::EVP_DigestUpdate(self.as_ptr(), data.as_ptr() as *const _, data.len()),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: digest_sign_update,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 212, End Line: 222
/// Updates the context with more data.
#[corresponds(EVP_DigestSignUpdate)]
#[inline]
pub fn digest_sign_update(&mut self, data: &[u8]) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
            ffi::EVP_DigestSignUpdate(
                self.as_ptr(),
                data.as_ptr() as *const _,
                data.len(),
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: digest_verify_update,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 227, End Line: 237
/// Updates the context with more data.
#[corresponds(EVP_DigestVerifyUpdate)]
#[inline]
pub fn digest_verify_update(&mut self, data: &[u8]) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
            ffi::EVP_DigestVerifyUpdate(
                self.as_ptr(),
                data.as_ptr() as *const _,
                data.len(),
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: digest_final,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 242, End Line: 254
/// Copies the computed digest into the buffer, returning the number of bytes written.
#[corresponds(EVP_DigestFinal)]
#[inline]
pub fn digest_final(&mut self, out: &mut [u8]) -> Result<usize, ErrorStack> {
    let mut len = u32::try_from(out.len()).unwrap_or(u32::MAX);
    unsafe {
        cvt(ffi::EVP_DigestFinal(self.as_ptr(), out.as_mut_ptr(), &mut len))?;
    }
    Ok(len as usize)
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: digest_final_xof,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 262, End Line: 272
/// Copies the computed digest into the buffer.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(EVP_DigestFinalXOF)]
#[inline]
#[cfg(ossl111)]
pub fn digest_final_xof(&mut self, out: &mut [u8]) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_DigestFinalXOF(self.as_ptr(), out.as_mut_ptr(), out.len()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: digest_sign_final,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 280, End Line: 292
/// Signs the computed digest.
///
/// If `out` is set to `None`, an upper bound on the number of bytes required for the output buffer will be
/// returned.
#[corresponds(EVP_DigestSignFinal)]
#[inline]
pub fn digest_sign_final(
    &mut self,
    out: Option<&mut [u8]>,
) -> Result<usize, ErrorStack> {
    let mut len = out.as_ref().map_or(0, |b| b.len());
    unsafe {
        cvt(
            ffi::EVP_DigestSignFinal(
                self.as_ptr(),
                out.map_or(ptr::null_mut(), |b| b.as_mut_ptr()),
                &mut len,
            ),
        )?;
    }
    Ok(len)
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: digest_verify_final,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: digest_sign,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 330, End Line: 344
/// Computes the signature of the data in `from`.
///
/// If `to` is set to `None`, an upper bound on the number of bytes required for the output buffer will be
/// returned.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(EVP_DigestSign)]
#[cfg(ossl111)]
#[inline]
pub fn digest_sign(
    &mut self,
    from: &[u8],
    to: Option<&mut [u8]>,
) -> Result<usize, ErrorStack> {
    let mut len = to.as_ref().map_or(0, |b| b.len());
    unsafe {
        cvt(
            ffi::EVP_DigestSign(
                self.as_ptr(),
                to.map_or(ptr::null_mut(), |b| b.as_mut_ptr()),
                &mut len,
                from.as_ptr(),
                from.len(),
            ),
        )?;
    }
    Ok(len)
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: digest_verify,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: size,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 386, End Line: 388
/// Returns the size of the message digest, i.e. the size of the hash
#[corresponds(EVP_MD_CTX_size)]
#[inline]
pub fn size(&self) -> usize {
    unsafe { ffi::EVP_MD_CTX_size(self.as_ptr()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: reset,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\memcmp.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: eq,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\memcmp.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\nid.rs
-----------------------------------------------------------------
Checking unsafe block with 6 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: create,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\nid.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\nid.rs
Start Line: 66, End Line: 79
/// Creates a new `Nid` for the `oid` with short name `sn` and long name `ln`.
#[corresponds(OBJ_create)]
pub fn create(oid: &str, sn: &str, ln: &str) -> Result<Nid, ErrorStack> {
    unsafe {
        ffi::init();
        let oid = CString::new(oid).unwrap();
        let sn = CString::new(sn).unwrap();
        let ln = CString::new(ln).unwrap();
        let raw = ffi::OBJ_create(oid.as_ptr(), sn.as_ptr(), ln.as_ptr());
        if raw == ffi::NID_undef { Err(ErrorStack::get()) } else { Ok(Nid(raw)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: signature_algorithms,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\nid.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\nid.rs
Start Line: 86, End Line: 99
/// Returns the `Nid`s of the digest and public key algorithms associated with a signature ID.
///
/// This corresponds to `OBJ_find_sigid_algs`.
#[corresponds(OBJ_find_sigid_algs)]
#[allow(clippy::trivially_copy_pass_by_ref)]
pub fn signature_algorithms(&self) -> Option<SignatureAlgorithms> {
    unsafe {
        let mut digest = 0;
        let mut pkey = 0;
        if ffi::OBJ_find_sigid_algs(self.0, &mut digest, &mut pkey) == 1 {
            Some(SignatureAlgorithms {
                digest: Nid(digest),
                pkey: Nid(pkey),
            })
        } else {
            None
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: long_name,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\nid.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: short_name,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\nid.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: check_validity,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: verify,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 7 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: find_status,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs
Start Line: 180, End Line: 211
/// Looks up the status for the specified certificate ID.
#[corresponds(OCSP_resp_find_status)]
pub fn find_status<'a>(&'a self, id: &OcspCertIdRef) -> Option<OcspStatus<'a>> {
    unsafe {
        let mut status = ffi::V_OCSP_CERTSTATUS_UNKNOWN;
        let mut reason = ffi::OCSP_REVOKED_STATUS_NOSTATUS;
        let mut revocation_time = ptr::null_mut();
        let mut this_update = ptr::null_mut();
        let mut next_update = ptr::null_mut();
        let r = ffi::OCSP_resp_find_status(
            self.as_ptr(),
            id.as_ptr(),
            &mut status,
            &mut reason,
            &mut revocation_time,
            &mut this_update,
            &mut next_update,
        );
        if r == 1 {
            let revocation_time = Asn1GeneralizedTimeRef::from_const_ptr_opt(
                revocation_time,
            );
            Some(OcspStatus {
                status: OcspCertStatus(status),
                reason: OcspRevokedStatus(status),
                revocation_time,
                this_update: Asn1GeneralizedTimeRef::from_ptr(this_update),
                next_update: Asn1GeneralizedTimeRef::from_ptr(next_update),
            })
        } else {
            None
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_cert,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: create,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: status,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: basic,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: add_id,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs12.rs
-----------------------------------------------------------------
Checking unsafe block with 9 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: parse2,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs12.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs12.rs
Start Line: 50, End Line: 72
/// Extracts the contents of the `Pkcs12`.
#[corresponds(PKCS12_parse)]
pub fn parse2(&self, pass: &str) -> Result<ParsedPkcs12_2, ErrorStack> {
    unsafe {
        let pass = CString::new(pass.as_bytes()).unwrap();
        let mut pkey = ptr::null_mut();
        let mut cert = ptr::null_mut();
        let mut ca = ptr::null_mut();
        cvt(
            ffi::PKCS12_parse(
                self.as_ptr(),
                pass.as_ptr(),
                &mut pkey,
                &mut cert,
                &mut ca,
            ),
        )?;
        let pkey = PKey::from_ptr_opt(pkey);
        let cert = X509::from_ptr_opt(cert);
        let ca = Stack::from_ptr_opt(ca);
        Ok(ParsedPkcs12_2 { pkey, cert, ca })
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: pkey,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs12.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 12 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: build2,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs12.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs12.rs
Start Line: 226, End Line: 282
/// Builds the PKCS#12 object.
#[corresponds(PKCS12_create)]
pub fn build2(&self, password: &str) -> Result<Pkcs12, ErrorStack> {
    unsafe {
        let pass = CString::new(password).unwrap();
        let pass = pass.as_ptr();
        let friendly_name = self.name.as_ref().map_or(ptr::null(), |p| p.as_ptr());
        let pkey = self.pkey.as_ref().map_or(ptr::null(), |p| p.as_ptr());
        let cert = self.cert.as_ref().map_or(ptr::null(), |p| p.as_ptr());
        let ca = self.ca.as_ref().map(|ca| ca.as_ptr()).unwrap_or(ptr::null_mut());
        let nid_key = self.nid_key.as_raw();
        let nid_cert = self.nid_cert.as_raw();
        let keytype = 0;
        let pkcs12 = cvt_p(
                ffi::PKCS12_create(
                    pass as *mut _,
                    friendly_name as *mut _,
                    pkey as *mut _,
                    cert as *mut _,
                    ca,
                    nid_key,
                    nid_cert,
                    self.iter,
                    self.mac_iter,
                    keytype,
                ),
            )
            .map(Pkcs12)?;
        #[cfg(not(boringssl))]
        {
            let md_type = self
                .mac_md
                .map(|md_type| md_type.as_ptr())
                .unwrap_or(ptr::null());
            cvt(
                ffi::PKCS12_set_mac(
                    pkcs12.as_ptr(),
                    pass,
                    -1,
                    ptr::null_mut(),
                    0,
                    self.mac_iter,
                    md_type,
                ),
            )?;
        }
        Ok(pkcs12)
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs5.rs
-----------------------------------------------------------------
Checking unsafe block with 11 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: bytes_to_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs5.rs
Potential Overunsafe：true

Found function with unsafe block in bytes_to_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs5.rs
Start Line: 33, End Line: 87
/// Derives a key and an IV from various parameters.
///
/// If specified, `salt` must be 8 bytes in length.
///
/// If the total key and IV length is less than 16 bytes and MD5 is used then
/// the algorithm is compatible with the key derivation algorithm from PKCS#5
/// v1.5 or PBKDF1 from PKCS#5 v2.0.
///
/// New applications should not use this and instead use
/// `pbkdf2_hmac` or another more modern key derivation algorithm.
#[corresponds(EVP_BytesToKey)]
#[allow(clippy::useless_conversion)]
#[cfg(not(boringssl))]
pub fn bytes_to_key(
    cipher: Cipher,
    digest: MessageDigest,
    data: &[u8],
    salt: Option<&[u8]>,
    count: i32,
) -> Result<KeyIvPair, ErrorStack> {
    unsafe {
        assert!(data.len() <= c_int::MAX as usize);
        let salt_ptr = match salt {
            Some(salt) => {
                assert_eq!(salt.len(), ffi::PKCS5_SALT_LEN as usize);
                salt.as_ptr()
            }
            None => ptr::null(),
        };
        ffi::init();
        let mut iv = cipher.iv_len().map(|l| vec![0; l]);
        let cipher = cipher.as_ptr();
        let digest = digest.as_ptr();
        let len = cvt(
            ffi::EVP_BytesToKey(
                cipher,
                digest,
                salt_ptr,
                ptr::null(),
                data.len() as c_int,
                count.into(),
                ptr::null_mut(),
                ptr::null_mut(),
            ),
        )?;
        let mut key = vec![0; len as usize];
        let iv_ptr = iv.as_mut().map(|v| v.as_mut_ptr()).unwrap_or(ptr::null_mut());
        cvt(
            ffi::EVP_BytesToKey(
                cipher,
                digest,
                salt_ptr,
                data.as_ptr(),
                data.len() as c_int,
                count as c_int,
                key.as_mut_ptr(),
                iv_ptr,
            ),
        )?;
        Ok(KeyIvPair { key, iv })
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: pbkdf2_hmac,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs5.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: scrypt,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs5.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_smime,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: encrypt,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sign,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: to_smime,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: decrypt,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: verify,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs
Start Line: 251, End Line: 285
/// Verifies the PKCS#7 `signedData` structure contained by `&self`.
///
/// `certs` is a set of certificates in which to search for the signer's
/// certificate. `store` is a trusted certificate store (used for chain
/// verification). `indata` is the signed data if the content is not present
/// in `&self`. The content is written to `out` if it is not `None`.
#[corresponds(PKCS7_verify)]
pub fn verify(
    &self,
    certs: &StackRef<X509>,
    store: &X509StoreRef,
    indata: Option<&[u8]>,
    out: Option<&mut Vec<u8>>,
    flags: Pkcs7Flags,
) -> Result<(), ErrorStack> {
    let out_bio = MemBio::new()?;
    let indata_bio = match indata {
        Some(data) => Some(MemBioSlice::new(data)?),
        None => None,
    };
    let indata_bio_ptr = indata_bio.as_ref().map_or(ptr::null_mut(), |p| p.as_ptr());
    unsafe {
        cvt(
                ffi::PKCS7_verify(
                    self.as_ptr(),
                    certs.as_ptr(),
                    store.as_ptr(),
                    indata_bio_ptr,
                    out_bio.as_ptr(),
                    flags.bits(),
                ),
            )
            .map(|_| ())?
    }
    if let Some(data) = out {
        data.clear();
        data.extend_from_slice(out_bio.get_buf());
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: signers,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs
Start Line: 289, End Line: 311
/// Retrieve the signer's certificates from the PKCS#7 structure without verifying them.
#[corresponds(PKCS7_get0_signers)]
pub fn signers(
    &self,
    certs: &StackRef<X509>,
    flags: Pkcs7Flags,
) -> Result<Stack<X509>, ErrorStack> {
    unsafe {
        let ptr = cvt_p(
            ffi::PKCS7_get0_signers(self.as_ptr(), certs.as_ptr(), flags.bits()),
        )?;
        let stack = Stack::<X509>::from_ptr(ptr);
        for cert in &stack {
            mem::forget(cert.to_owned());
        }
        Ok(stack)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: type_,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: signed,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs
Start Line: 322, End Line: 330
/// Get the signed data of a PKCS#7 structure of type PKCS7_SIGNED
pub fn signed(&self) -> Option<&Pkcs7SignedRef> {
    unsafe {
        if self.type_().map(|x| x.nid()) != Some(Nid::PKCS7_SIGNED) {
            return None;
        }
        let signed_data = (*self.as_ptr()).d.sign;
        Pkcs7SignedRef::from_const_ptr_opt(signed_data)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: certificates,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: to_owned,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: rsa,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: dsa,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: dh,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: ec_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: id,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: size,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 206, End Line: 208
/// Returns the maximum size of a signature in bytes.
#[corresponds(EVP_PKEY_size)]
pub fn size(&self) -> usize {
    unsafe { ffi::EVP_PKEY_size(self.as_ptr()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: bits,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 236, End Line: 238
/// Returns the size of the key.
///
/// This corresponds to the bit length of the modulus of an RSA key, and the bit length of the
/// group order for an elliptic curve key, for example.
#[corresponds(EVP_PKEY_bits)]
pub fn bits(&self) -> u32 {
    unsafe { ffi::EVP_PKEY_bits(self.as_ptr()) as u32 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: security_bits,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 245, End Line: 247
///Returns the number of security bits.
///
///Bits of security is defined in NIST SP800-57.
#[corresponds(EVP_PKEY_security_bits)]
#[cfg(any(ossl110, libressl360))]
pub fn security_bits(&self) -> u32 {
    unsafe { ffi::EVP_PKEY_security_bits(self.as_ptr()) as u32 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: public_eq,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 251, End Line: 260
/// Compares the public component of this key with another.
#[corresponds(EVP_PKEY_cmp)]
pub fn public_eq<U>(&self, other: &PKeyRef<U>) -> bool
where
    U: HasPublic,
{
    let res = unsafe { ffi::EVP_PKEY_cmp(self.as_ptr(), other.as_ptr()) == 1 };
    let _ = ErrorStack::get();
    res
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: raw_public_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 268, End Line: 285
/// Raw byte representation of a public key.
///
/// This function only works for algorithms that support raw public keys.
/// Currently this is: [`Id::X25519`], [`Id::ED25519`], [`Id::X448`] or [`Id::ED448`].
#[corresponds(EVP_PKEY_get_raw_public_key)]
#[cfg(any(ossl111, boringssl, libressl370))]
pub fn raw_public_key(&self) -> Result<Vec<u8>, ErrorStack> {
    unsafe {
        let mut len = 0;
        cvt(ffi::EVP_PKEY_get_raw_public_key(self.as_ptr(), ptr::null_mut(), &mut len))?;
        let mut buf = vec![0u8; len];
        cvt(
            ffi::EVP_PKEY_get_raw_public_key(self.as_ptr(), buf.as_mut_ptr(), &mut len),
        )?;
        buf.truncate(len);
        Ok(buf)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: raw_private_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 319, End Line: 336
/// Raw byte representation of a private key.
///
/// This function only works for algorithms that support raw private keys.
/// Currently this is: [`Id::HMAC`], [`Id::X25519`], [`Id::ED25519`], [`Id::X448`] or [`Id::ED448`].
#[corresponds(EVP_PKEY_get_raw_private_key)]
#[cfg(any(ossl111, boringssl, libressl370))]
pub fn raw_private_key(&self) -> Result<Vec<u8>, ErrorStack> {
    unsafe {
        let mut len = 0;
        cvt(
            ffi::EVP_PKEY_get_raw_private_key(self.as_ptr(), ptr::null_mut(), &mut len),
        )?;
        let mut buf = vec![0u8; len];
        cvt(
            ffi::EVP_PKEY_get_raw_private_key(self.as_ptr(), buf.as_mut_ptr(), &mut len),
        )?;
        buf.truncate(len);
        Ok(buf)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: private_key_to_pkcs8,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 340, End Line: 355
/// Serializes a private key into an unencrypted DER-formatted PKCS#8
#[corresponds(i2d_PKCS8PrivateKey_bio)]
pub fn private_key_to_pkcs8(&self) -> Result<Vec<u8>, ErrorStack> {
    unsafe {
        let bio = MemBio::new()?;
        cvt(
            ffi::i2d_PKCS8PrivateKey_bio(
                bio.as_ptr(),
                self.as_ptr(),
                ptr::null(),
                ptr::null_mut(),
                0,
                None,
                ptr::null_mut(),
            ),
        )?;
        Ok(bio.get_buf().to_owned())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: private_key_to_pkcs8_passphrase,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 360, End Line: 379
/// Serializes a private key into a DER-formatted PKCS#8, using the supplied password to
/// encrypt the key.
#[corresponds(i2d_PKCS8PrivateKey_bio)]
pub fn private_key_to_pkcs8_passphrase(
    &self,
    cipher: Cipher,
    passphrase: &[u8],
) -> Result<Vec<u8>, ErrorStack> {
    unsafe {
        let bio = MemBio::new()?;
        cvt(
            ffi::i2d_PKCS8PrivateKey_bio(
                bio.as_ptr(),
                self.as_ptr(),
                cipher.as_ptr(),
                passphrase.as_ptr() as *const _ as *mut _,
                passphrase.len().try_into().unwrap(),
                None,
                ptr::null_mut(),
            ),
        )?;
        Ok(bio.get_buf().to_owned())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_rsa,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 411, End Line: 419
/// Creates a new `PKey` containing an RSA key.
#[corresponds(EVP_PKEY_assign_RSA)]
pub fn from_rsa(rsa: Rsa<T>) -> Result<PKey<T>, ErrorStack> {
    unsafe {
        let evp = cvt_p(ffi::EVP_PKEY_new())?;
        let pkey = PKey::from_ptr(evp);
        cvt(ffi::EVP_PKEY_assign_RSA(pkey.0, rsa.as_ptr()))?;
        mem::forget(rsa);
        Ok(pkey)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_dsa,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 423, End Line: 431
/// Creates a new `PKey` containing a DSA key.
#[corresponds(EVP_PKEY_assign_DSA)]
pub fn from_dsa(dsa: Dsa<T>) -> Result<PKey<T>, ErrorStack> {
    unsafe {
        let evp = cvt_p(ffi::EVP_PKEY_new())?;
        let pkey = PKey::from_ptr(evp);
        cvt(ffi::EVP_PKEY_assign_DSA(pkey.0, dsa.as_ptr()))?;
        mem::forget(dsa);
        Ok(pkey)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_dh,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 436, End Line: 444
/// Creates a new `PKey` containing a Diffie-Hellman key.
#[corresponds(EVP_PKEY_assign_DH)]
#[cfg(not(boringssl))]
pub fn from_dh(dh: Dh<T>) -> Result<PKey<T>, ErrorStack> {
    unsafe {
        let evp = cvt_p(ffi::EVP_PKEY_new())?;
        let pkey = PKey::from_ptr(evp);
        cvt(ffi::EVP_PKEY_assign_DH(pkey.0, dh.as_ptr()))?;
        mem::forget(dh);
        Ok(pkey)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_dhx,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 448, End Line: 460
/// Creates a new `PKey` containing a Diffie-Hellman key with type DHX.
#[cfg(all(not(boringssl), ossl110))]
pub fn from_dhx(dh: Dh<T>) -> Result<PKey<T>, ErrorStack> {
    unsafe {
        let evp = cvt_p(ffi::EVP_PKEY_new())?;
        let pkey = PKey::from_ptr(evp);
        cvt(ffi::EVP_PKEY_assign(pkey.0, ffi::EVP_PKEY_DHX, dh.as_ptr().cast()))?;
        mem::forget(dh);
        Ok(pkey)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_ec_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 464, End Line: 472
/// Creates a new `PKey` containing an elliptic curve key.
#[corresponds(EVP_PKEY_assign_EC_KEY)]
pub fn from_ec_key(ec_key: EcKey<T>) -> Result<PKey<T>, ErrorStack> {
    unsafe {
        let evp = cvt_p(ffi::EVP_PKEY_new())?;
        let pkey = PKey::from_ptr(evp);
        cvt(ffi::EVP_PKEY_assign_EC_KEY(pkey.0, ec_key.as_ptr()))?;
        mem::forget(ec_key);
        Ok(pkey)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: hmac,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cmac,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: ec_gen,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 6 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: private_key_from_pkcs8,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 676, End Line: 689
/// Deserializes a DER-formatted PKCS#8 unencrypted private key.
///
/// This method is mainly for interoperability reasons. Encrypted keyfiles should be preferred.
pub fn private_key_from_pkcs8(der: &[u8]) -> Result<PKey<Private>, ErrorStack> {
    unsafe {
        ffi::init();
        let len = der.len().min(c_long::MAX as usize) as c_long;
        let p8inf = cvt_p(
            ffi::d2i_PKCS8_PRIV_KEY_INFO(ptr::null_mut(), &mut der.as_ptr(), len),
        )?;
        let res = cvt_p(ffi::EVP_PKCS82PKEY(p8inf)).map(|p| PKey::from_ptr(p));
        ffi::PKCS8_PRIV_KEY_INFO_free(p8inf);
        res
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: private_key_from_pkcs8_callback,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: private_key_from_pkcs8_passphrase,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: private_key_from_raw_bytes,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: public_key_from_raw_bytes,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new_id,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: encrypt_init,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 168, End Line: 174
/// Prepares the context for encryption using the public key.
#[corresponds(EVP_PKEY_encrypt_init)]
#[inline]
pub fn encrypt_init(&mut self) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_encrypt_init(self.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: verify_init,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 179, End Line: 185
/// Prepares the context for signature verification using the public key.
#[corresponds(EVP_PKEY_verify_init)]
#[inline]
pub fn verify_init(&mut self) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_verify_init(self.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: verify_recover_init,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 190, End Line: 196
/// Prepares the context for signature recovery using the public key.
#[corresponds(EVP_PKEY_verify_recover_init)]
#[inline]
pub fn verify_recover_init(&mut self) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_verify_recover_init(self.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: encrypt,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 204, End Line: 217
/// Encrypts data using the public key.
///
/// If `to` is set to `None`, an upper bound on the number of bytes required for the output buffer will be
/// returned.
#[corresponds(EVP_PKEY_encrypt)]
#[inline]
pub fn encrypt(
    &mut self,
    from: &[u8],
    to: Option<&mut [u8]>,
) -> Result<usize, ErrorStack> {
    let mut written = to.as_ref().map_or(0, |b| b.len());
    unsafe {
        cvt(
            ffi::EVP_PKEY_encrypt(
                self.as_ptr(),
                to.map_or(ptr::null_mut(), |b| b.as_mut_ptr()),
                &mut written,
                from.as_ptr(),
                from.len(),
            ),
        )?;
    }
    Ok(written)
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: verify,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 241, End Line: 264
/// Verifies the signature of data using the public key.
///
/// Returns `Ok(true)` if the signature is valid, `Ok(false)` if the signature is invalid, and `Err` if an error
/// occurred.
///
/// # Note
///
/// This verifies the signature of the *raw* data. It is more common to compute and verify the signature of the
/// cryptographic hash of an arbitrary amount of data. The [`MdCtx`](crate::md_ctx::MdCtx) type can be used to do
/// that.
#[corresponds(EVP_PKEY_verify)]
#[inline]
pub fn verify(&mut self, data: &[u8], sig: &[u8]) -> Result<bool, ErrorStack> {
    unsafe {
        let r = ffi::EVP_PKEY_verify(
            self.as_ptr(),
            sig.as_ptr(),
            sig.len(),
            data.as_ptr(),
            data.len(),
        );
        if r <= 0 {
            let errors = ErrorStack::get();
            if !errors.errors().is_empty() {
                return Err(errors);
            }
        }
        Ok(r == 1)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: verify_recover,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 273, End Line: 290
/// Recovers the original data signed by the private key. You almost
/// always want `verify` instead.
///
/// Returns the number of bytes written to `to`, or the number of bytes
/// that would be written, if `to` is `None.
#[corresponds(EVP_PKEY_verify_recover)]
#[inline]
pub fn verify_recover(
    &mut self,
    sig: &[u8],
    to: Option<&mut [u8]>,
) -> Result<usize, ErrorStack> {
    let mut written = to.as_ref().map_or(0, |b| b.len());
    unsafe {
        cvt(
            ffi::EVP_PKEY_verify_recover(
                self.as_ptr(),
                to.map_or(ptr::null_mut(), |b| b.as_mut_ptr()),
                &mut written,
                sig.as_ptr(),
                sig.len(),
            ),
        )?;
    }
    Ok(written)
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: decrypt_init,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 300, End Line: 306
/// Prepares the context for decryption using the private key.
#[corresponds(EVP_PKEY_decrypt_init)]
#[inline]
pub fn decrypt_init(&mut self) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_decrypt_init(self.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: sign_init,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 311, End Line: 317
/// Prepares the context for signing using the private key.
#[corresponds(EVP_PKEY_sign_init)]
#[inline]
pub fn sign_init(&mut self) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_sign_init(self.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: derive_set_peer,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 321, End Line: 330
/// Sets the peer key used for secret derivation.
#[corresponds(EVP_PKEY_derive_set_peer)]
pub fn derive_set_peer<U>(&mut self, key: &PKeyRef<U>) -> Result<(), ErrorStack>
where
    U: HasPublic,
{
    unsafe {
        cvt(ffi::EVP_PKEY_derive_set_peer(self.as_ptr(), key.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: decrypt,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 338, End Line: 351
/// Decrypts data using the private key.
///
/// If `to` is set to `None`, an upper bound on the number of bytes required for the output buffer will be
/// returned.
#[corresponds(EVP_PKEY_decrypt)]
#[inline]
pub fn decrypt(
    &mut self,
    from: &[u8],
    to: Option<&mut [u8]>,
) -> Result<usize, ErrorStack> {
    let mut written = to.as_ref().map_or(0, |b| b.len());
    unsafe {
        cvt(
            ffi::EVP_PKEY_decrypt(
                self.as_ptr(),
                to.map_or(ptr::null_mut(), |b| b.as_mut_ptr()),
                &mut written,
                from.as_ptr(),
                from.len(),
            ),
        )?;
    }
    Ok(written)
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: sign,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 374, End Line: 387
/// Signs the contents of `data`.
///
/// If `sig` is set to `None`, an upper bound on the number of bytes required for the output buffer will be
/// returned.
///
/// # Note
///
/// This computes the signature of the *raw* bytes of `data`. It is more common to sign the cryptographic hash of
/// an arbitrary amount of data. The [`MdCtx`](crate::md_ctx::MdCtx) type can be used to do that.
#[corresponds(EVP_PKEY_sign)]
#[inline]
pub fn sign(
    &mut self,
    data: &[u8],
    sig: Option<&mut [u8]>,
) -> Result<usize, ErrorStack> {
    let mut written = sig.as_ref().map_or(0, |b| b.len());
    unsafe {
        cvt(
            ffi::EVP_PKEY_sign(
                self.as_ptr(),
                sig.map_or(ptr::null_mut(), |b| b.as_mut_ptr()),
                &mut written,
                data.as_ptr(),
                data.len(),
            ),
        )?;
    }
    Ok(written)
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: derive_init,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 404, End Line: 410
/// Prepares the context for shared secret derivation.
#[corresponds(EVP_PKEY_derive_init)]
#[inline]
pub fn derive_init(&mut self) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_derive_init(self.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: keygen_init,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 415, End Line: 421
/// Prepares the context for key generation.
#[corresponds(EVP_PKEY_keygen_init)]
#[inline]
pub fn keygen_init(&mut self) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_keygen_init(self.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_signature_md,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 429, End Line: 437
/// Sets which algorithm was used to compute the digest used in a
/// signature. With RSA signatures this causes the signature to be wrapped
/// in a `DigestInfo` structure. This is almost always what you want with
/// RSA signatures.
#[corresponds(EVP_PKEY_CTX_set_signature_md)]
#[inline]
pub fn set_signature_md(&self, md: &MdRef) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_set_signature_md(self.as_ptr(), md.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: rsa_padding,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 444, End Line: 451
/// Returns the RSA padding mode in use.
///
/// This is only useful for RSA keys.
#[corresponds(EVP_PKEY_CTX_get_rsa_padding)]
#[inline]
pub fn rsa_padding(&self) -> Result<Padding, ErrorStack> {
    let mut pad = 0;
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_get_rsa_padding(self.as_ptr(), &mut pad))?;
    }
    Ok(Padding::from_raw(pad))
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_rsa_padding,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 458, End Line: 467
/// Sets the RSA padding mode.
///
/// This is only useful for RSA keys.
#[corresponds(EVP_PKEY_CTX_set_rsa_padding)]
#[inline]
pub fn set_rsa_padding(&mut self, padding: Padding) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_set_rsa_padding(self.as_ptr(), padding.as_raw()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_rsa_pss_saltlen,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_rsa_mgf1_md,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 489, End Line: 498
/// Sets the RSA MGF1 algorithm.
///
/// This is only useful for RSA keys.
#[corresponds(EVP_PKEY_CTX_set_rsa_mgf1_md)]
#[inline]
pub fn set_rsa_mgf1_md(&mut self, md: &MdRef) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_set_rsa_mgf1_md(self.as_ptr(), md.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_rsa_oaep_md,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 506, End Line: 515
/// Sets the RSA OAEP algorithm.
///
/// This is only useful for RSA keys.
#[corresponds(EVP_PKEY_CTX_set_rsa_oaep_md)]
#[cfg(any(ossl102, libressl310, boringssl))]
#[inline]
pub fn set_rsa_oaep_md(&mut self, md: &MdRef) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_set_rsa_oaep_md(self.as_ptr(), md.as_ptr() as *mut _))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_rsa_oaep_label,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 522, End Line: 542
/// Sets the RSA OAEP label.
///
/// This is only useful for RSA keys.
#[corresponds(EVP_PKEY_CTX_set0_rsa_oaep_label)]
#[cfg(any(ossl102, libressl310, boringssl))]
pub fn set_rsa_oaep_label(&mut self, label: &[u8]) -> Result<(), ErrorStack> {
    use crate::LenType;
    let len = LenType::try_from(label.len()).unwrap();
    unsafe {
        let p = ffi::OPENSSL_malloc(label.len() as _);
        ptr::copy_nonoverlapping(label.as_ptr(), p as *mut _, label.len());
        let r = cvt(
            ffi::EVP_PKEY_CTX_set0_rsa_oaep_label(self.as_ptr(), p as *mut _, len),
        );
        if r.is_err() {
            ffi::OPENSSL_free(p);
        }
        r?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_keygen_cipher,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 548, End Line: 561
/// Sets the cipher used during key generation.
#[cfg(not(boringssl))]
#[corresponds(EVP_PKEY_CTX_ctrl)]
#[inline]
pub fn set_keygen_cipher(&mut self, cipher: &CipherRef) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
            ffi::EVP_PKEY_CTX_ctrl(
                self.as_ptr(),
                -1,
                ffi::EVP_PKEY_OP_KEYGEN,
                ffi::EVP_PKEY_CTRL_CIPHER,
                0,
                cipher.as_ptr() as *mut _,
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_keygen_mac_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 567, End Line: 582
/// Sets the key MAC key used during key generation.
#[cfg(not(boringssl))]
#[corresponds(EVP_PKEY_CTX_ctrl)]
#[inline]
pub fn set_keygen_mac_key(&mut self, key: &[u8]) -> Result<(), ErrorStack> {
    let len = c_int::try_from(key.len()).unwrap();
    unsafe {
        cvt(
            ffi::EVP_PKEY_CTX_ctrl(
                self.as_ptr(),
                -1,
                ffi::EVP_PKEY_OP_KEYGEN,
                ffi::EVP_PKEY_CTRL_SET_MAC_KEY,
                len,
                key.as_ptr() as *mut _,
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_hkdf_md,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 590, End Line: 599
/// Sets the digest used for HKDF derivation.
///
/// Requires OpenSSL 1.1.0 or newer.
#[corresponds(EVP_PKEY_CTX_set_hkdf_md)]
#[cfg(any(ossl110, boringssl, libressl360))]
#[inline]
pub fn set_hkdf_md(&mut self, digest: &MdRef) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_set_hkdf_md(self.as_ptr(), digest.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_hkdf_mode,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 613, End Line: 619
/// Sets the HKDF mode of operation.
///
/// Defaults to [`HkdfMode::EXTRACT_THEN_EXPAND`].
///
/// WARNING: Although this API calls it a "mode", HKDF-Extract and HKDF-Expand are distinct
/// operations with distinct inputs and distinct kinds of keys. Callers should not pass input
/// secrets for one operation into the other.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(EVP_PKEY_CTX_set_hkdf_mode)]
#[cfg(any(ossl111, libressl360))]
#[inline]
pub fn set_hkdf_mode(&mut self, mode: HkdfMode) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_set_hkdf_mode(self.as_ptr(), mode.0))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_hkdf_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 632, End Line: 647
/// Sets the input material for HKDF generation as the "key".
///
/// Which input is the key depends on the "mode" (see [`set_hkdf_mode`][Self::set_hkdf_mode]).
/// If [`HkdfMode::EXTRACT_THEN_EXPAND`] or [`HkdfMode::EXTRACT_ONLY`], this function specifies
/// the input keying material (IKM) for HKDF-Extract. If [`HkdfMode::EXPAND_ONLY`], it instead
/// specifies the pseudorandom key (PRK) for HKDF-Expand.
///
/// Requires OpenSSL 1.1.0 or newer.
#[corresponds(EVP_PKEY_CTX_set1_hkdf_key)]
#[cfg(any(ossl110, boringssl, libressl360))]
#[inline]
pub fn set_hkdf_key(&mut self, key: &[u8]) -> Result<(), ErrorStack> {
    #[cfg(not(boringssl))]
    let len = c_int::try_from(key.len()).unwrap();
    #[cfg(boringssl)]
    let len = key.len();
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_set1_hkdf_key(self.as_ptr(), key.as_ptr(), len))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_hkdf_salt,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 657, End Line: 672
/// Sets the salt value for HKDF generation.
///
/// If performing HKDF-Expand only, this parameter is ignored.
///
/// Requires OpenSSL 1.1.0 or newer.
#[corresponds(EVP_PKEY_CTX_set1_hkdf_salt)]
#[cfg(any(ossl110, boringssl, libressl360))]
#[inline]
pub fn set_hkdf_salt(&mut self, salt: &[u8]) -> Result<(), ErrorStack> {
    #[cfg(not(boringssl))]
    let len = c_int::try_from(salt.len()).unwrap();
    #[cfg(boringssl)]
    let len = salt.len();
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_set1_hkdf_salt(self.as_ptr(), salt.as_ptr(), len))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: add_hkdf_info,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 682, End Line: 697
/// Appends info bytes for HKDF generation.
///
/// If performing HKDF-Extract only, this parameter is ignored.
///
/// Requires OpenSSL 1.1.0 or newer.
#[corresponds(EVP_PKEY_CTX_add1_hkdf_info)]
#[cfg(any(ossl110, boringssl, libressl360))]
#[inline]
pub fn add_hkdf_info(&mut self, info: &[u8]) -> Result<(), ErrorStack> {
    #[cfg(not(boringssl))]
    let len = c_int::try_from(info.len()).unwrap();
    #[cfg(boringssl)]
    let len = info.len();
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_add1_hkdf_info(self.as_ptr(), info.as_ptr(), len))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: derive,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 703, End Line: 714
/// Derives a shared secret between two keys.
///
/// If `buf` is set to `None`, an upper bound on the number of bytes required for the buffer will be returned.
#[corresponds(EVP_PKEY_derive)]
pub fn derive(&mut self, buf: Option<&mut [u8]>) -> Result<usize, ErrorStack> {
    let mut len = buf.as_ref().map_or(0, |b| b.len());
    unsafe {
        cvt(
            ffi::EVP_PKEY_derive(
                self.as_ptr(),
                buf.map_or(ptr::null_mut(), |b| b.as_mut_ptr()),
                &mut len,
            ),
        )?;
    }
    Ok(len)
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: keygen,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 729, End Line: 735
/// Generates a new public/private keypair.
#[corresponds(EVP_PKEY_keygen)]
#[inline]
pub fn keygen(&mut self) -> Result<PKey<Private>, ErrorStack> {
    unsafe {
        let mut key = ptr::null_mut();
        cvt(ffi::EVP_PKEY_keygen(self.as_ptr(), &mut key))?;
        Ok(PKey::from_ptr(key))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_nonce_type,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 745, End Line: 757
/// Sets the nonce type for a private key context.
///
/// The nonce for DSA and ECDSA can be either random (the default) or deterministic (as defined by RFC 6979).
///
/// This is only useful for DSA and ECDSA.
/// Requires OpenSSL 3.2.0 or newer.
#[cfg(ossl320)]
#[corresponds(EVP_PKEY_CTX_set_params)]
pub fn set_nonce_type(&mut self, nonce_type: NonceType) -> Result<(), ErrorStack> {
    let nonce_field_name = CStr::from_bytes_with_nul(b"nonce-type\0").unwrap();
    let mut nonce_type = nonce_type.0;
    unsafe {
        let param_nonce = ffi::OSSL_PARAM_construct_uint(
            nonce_field_name.as_ptr(),
            &mut nonce_type,
        );
        let param_end = ffi::OSSL_PARAM_construct_end();
        let params = [param_nonce, param_end];
        cvt(ffi::EVP_PKEY_CTX_set_params(self.as_ptr(), params.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: nonce_type,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 767, End Line: 782
/// Gets the nonce type for a private key context.
///
/// The nonce for DSA and ECDSA can be either random (the default) or deterministic (as defined by RFC 6979).
///
/// This is only useful for DSA and ECDSA.
/// Requires OpenSSL 3.2.0 or newer.
#[cfg(ossl320)]
#[corresponds(EVP_PKEY_CTX_get_params)]
pub fn nonce_type(&mut self) -> Result<NonceType, ErrorStack> {
    let nonce_field_name = CStr::from_bytes_with_nul(b"nonce-type\0").unwrap();
    let mut nonce_type: c_uint = 0;
    unsafe {
        let param_nonce = ffi::OSSL_PARAM_construct_uint(
            nonce_field_name.as_ptr(),
            &mut nonce_type,
        );
        let param_end = ffi::OSSL_PARAM_construct_end();
        let mut params = [param_nonce, param_end];
        cvt(ffi::EVP_PKEY_CTX_get_params(self.as_ptr(), params.as_mut_ptr()))?;
    }
    Ok(NonceType(nonce_type))
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\provider.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: load,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\provider.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: try_load,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\provider.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_default_search_path,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\provider.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rand.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: rand_bytes,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rand.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: rand_priv_bytes,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rand.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: keep_random_devices_open,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rand.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: to_owned,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: private_decrypt,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: private_encrypt,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: d,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: p,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: q,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: dmp1,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: dmq1,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: iqmp,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: check_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Start Line: 238, End Line: 247
/// Validates RSA parameters for correctness
#[corresponds(RSA_check_key)]
#[allow(clippy::unnecessary_cast)]
pub fn check_key(&self) -> Result<bool, ErrorStack> {
    unsafe {
        let result = ffi::RSA_check_key(self.as_ptr()) as i32;
        if result == -1 { Err(ErrorStack::get()) } else { Ok(result == 1) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: size,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Start Line: 288, End Line: 290
/// Returns the size of the modulus in bytes.
#[corresponds(RSA_size)]
pub fn size(&self) -> u32 {
    unsafe { ffi::RSA_size(self.as_ptr()) as u32 }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: public_decrypt,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: public_encrypt,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: n,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: e,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_public_components,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_factors,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_crt_params,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: generate_with_e,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Start Line: 536, End Line: 547
/// Generates a public/private key pair with the specified size and a custom exponent.
///
/// Unless you have specific needs and know what you're doing, use `Rsa::generate` instead.
#[corresponds(RSA_generate_key_ex)]
pub fn generate_with_e(bits: u32, e: &BigNumRef) -> Result<Rsa<Private>, ErrorStack> {
    unsafe {
        let rsa = Rsa::from_ptr(cvt_p(ffi::RSA_new())?);
        cvt(
            ffi::RSA_generate_key_ex(rsa.0, bits as c_int, e.as_ptr(), ptr::null_mut()),
        )?;
        Ok(rsa)
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sha.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha1,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sha.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha224,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sha.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha256,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sha.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha384,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sha.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sha512,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sha.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: drop,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 7 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: new_intern,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Start Line: 164, End Line: 196
fn new_intern<'a, T>(
    type_: Option<MessageDigest>,
    pkey: &PKeyRef<T>,
) -> Result<Signer<'a>, ErrorStack>
where
    T: HasPrivate,
{
    unsafe {
        ffi::init();
        let ctx = cvt_p(EVP_MD_CTX_new())?;
        let mut pctx: *mut ffi::EVP_PKEY_CTX = ptr::null_mut();
        let r = ffi::EVP_DigestSignInit(
            ctx,
            &mut pctx,
            type_.map(|t| t.as_ptr()).unwrap_or(ptr::null()),
            ptr::null_mut(),
            pkey.as_ptr(),
        );
        if r != 1 {
            EVP_MD_CTX_free(ctx);
            return Err(ErrorStack::get());
        }
        assert!(! pctx.is_null());
        Ok(Signer {
            md_ctx: ctx,
            pctx,
            _p: PhantomData,
        })
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: rsa_padding,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_rsa_padding,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_rsa_pss_saltlen,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_rsa_mgf1_md,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: update,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: len_intern,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Start Line: 294, End Line: 304
#[cfg(all(not(ossl111), not(boringssl), not(libressl370)))]
fn len_intern(&self) -> Result<usize, ErrorStack> {
    unsafe {
        let mut len = 0;
        cvt(ffi::EVP_DigestSignFinal(self.md_ctx, ptr::null_mut(), &mut len))?;
        Ok(len)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: sign,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Start Line: 329, End Line: 339
/// Writes the signature into the provided buffer, returning the number of bytes written.
///
/// This method will fail if the buffer is not large enough for the signature. Use the `len`
/// method to get an upper bound on the required size.
///
/// OpenSSL documentation at [`EVP_DigestSignFinal`].
///
/// [`EVP_DigestSignFinal`]: https://www.openssl.org/docs/manmaster/crypto/EVP_DigestSignFinal.html
pub fn sign(&self, buf: &mut [u8]) -> Result<usize, ErrorStack> {
    unsafe {
        let mut len = buf.len();
        cvt(
            ffi::EVP_DigestSignFinal(self.md_ctx, buf.as_mut_ptr() as *mut _, &mut len),
        )?;
        Ok(len)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: sign_oneshot,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Start Line: 364, End Line: 380
/// Signs the data in `data_buf` and writes the signature into the buffer `sig_buf`, returning the
/// number of bytes written.
///
/// For PureEdDSA (Ed25519 and Ed448 keys), this is the only way to sign data.
///
/// This method will fail if the buffer is not large enough for the signature. Use the `len`
/// method to get an upper bound on the required size.
///
/// OpenSSL documentation at [`EVP_DigestSign`].
///
/// [`EVP_DigestSign`]: https://www.openssl.org/docs/man1.1.1/man3/EVP_DigestSign.html
#[cfg(any(ossl111, boringssl, libressl370))]
pub fn sign_oneshot(
    &mut self,
    sig_buf: &mut [u8],
    data_buf: &[u8],
) -> Result<usize, ErrorStack> {
    unsafe {
        let mut sig_len = sig_buf.len();
        cvt(
            ffi::EVP_DigestSign(
                self.md_ctx,
                sig_buf.as_mut_ptr() as *mut _,
                &mut sig_len,
                data_buf.as_ptr() as *const _,
                data_buf.len(),
            ),
        )?;
        Ok(sig_len)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: verify,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Start Line: 579, End Line: 592
/// Determines if the data fed into the `Verifier` matches the provided signature.
///
/// OpenSSL documentation at [`EVP_DigestVerifyFinal`].
///
/// [`EVP_DigestVerifyFinal`]: https://www.openssl.org/docs/manmaster/man3/EVP_DigestVerifyFinal.html
pub fn verify(&self, signature: &[u8]) -> Result<bool, ErrorStack> {
    unsafe {
        let r = EVP_DigestVerifyFinal(
            self.md_ctx,
            signature.as_ptr() as *mut _,
            signature.len(),
        );
        match r {
            1 => Ok(true),
            0 => {
                ErrorStack::get();
                Ok(false)
            }
            _ => Err(ErrorStack::get()),
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: verify_oneshot,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Start Line: 600, End Line: 618
/// Determines if the data given in `buf` matches the provided signature.
///
/// OpenSSL documentation at [`EVP_DigestVerify`].
///
/// [`EVP_DigestVerify`]: https://www.openssl.org/docs/man1.1.1/man3/EVP_DigestVerify.html
#[cfg(any(ossl111, boringssl, libressl370))]
pub fn verify_oneshot(
    &mut self,
    signature: &[u8],
    buf: &[u8],
) -> Result<bool, ErrorStack> {
    unsafe {
        let r = ffi::EVP_DigestVerify(
            self.md_ctx,
            signature.as_ptr() as *const _,
            signature.len(),
            buf.as_ptr() as *const _,
            buf.len(),
        );
        match r {
            1 => Ok(true),
            0 => {
                ErrorStack::get();
                Ok(false)
            }
            _ => Err(ErrorStack::get()),
        }
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\srtp.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: id,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\srtp.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\srtp.rs
Start Line: 24, End Line: 26
pub fn id(&self) -> SrtpProfileId {
    SrtpProfileId::from_raw(unsafe { (*self.as_ptr()).id })
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: name,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\srtp.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\bio.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: raw_verify,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Potential Overunsafe：true

Found function with unsafe block in raw_verify:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 37, End Line: 57
pub extern "C" fn raw_verify<F>(
    preverify_ok: c_int,
    x509_ctx: *mut ffi::X509_STORE_CTX,
) -> c_int
where
    F: Fn(bool, &mut X509StoreContextRef) -> bool + 'static + Sync + Send,
{
    unsafe {
        let ctx = X509StoreContextRef::from_ptr_mut(x509_ctx);
        let ssl_idx = X509StoreContext::ssl_idx()
            .expect("BUG: store context ssl index missing");
        let verify_idx = SslContext::cached_ex_index::<F>();
        let verify = ctx
            .ex_data(ssl_idx)
            .expect("BUG: store context missing ssl")
            .ssl_context()
            .ex_data(verify_idx)
            .expect("BUG: verify callback missing") as *const F;
        (*verify)(preverify_ok != 0, ctx) as c_int
    }
}



-----------------------------------------------------------------
Checking unsafe block with 7 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: raw_client_psk,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Potential Overunsafe：true

Found function with unsafe block in raw_client_psk:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 60, End Line: 99
#[cfg(not(osslconf = "OPENSSL_NO_PSK"))]
pub extern "C" fn raw_client_psk<F>(
    ssl: *mut ffi::SSL,
    hint: *const c_char,
    identity: *mut c_char,
    max_identity_len: c_uint,
    psk: *mut c_uchar,
    max_psk_len: c_uint,
) -> c_uint
where
    F: Fn(&mut SslRef, Option<&[u8]>, &mut [u8], &mut [u8]) -> Result<usize, ErrorStack>
        + 'static + Sync + Send,
{
    unsafe {
        let ssl = SslRef::from_ptr_mut(ssl);
        let callback_idx = SslContext::cached_ex_index::<F>();
        let callback = ssl
            .ssl_context()
            .ex_data(callback_idx)
            .expect("BUG: psk callback missing") as *const F;
        let hint = if !hint.is_null() {
            Some(CStr::from_ptr(hint).to_bytes())
        } else {
            None
        };
        let identity_sl = slice::from_raw_parts_mut(
            identity as *mut u8,
            max_identity_len as usize,
        );
        #[allow(clippy::unnecessary_cast)]
        let psk_sl = slice::from_raw_parts_mut(psk as *mut u8, max_psk_len as usize);
        match (*callback)(ssl, hint, identity_sl, psk_sl) {
            Ok(psk_len) => psk_len as u32,
            Err(e) => {
                e.put();
                0
            }
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: raw_server_psk,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Potential Overunsafe：true

Found function with unsafe block in raw_server_psk:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 102, End Line: 138
#[cfg(not(osslconf = "OPENSSL_NO_PSK"))]
pub extern "C" fn raw_server_psk<F>(
    ssl: *mut ffi::SSL,
    identity: *const c_char,
    psk: *mut c_uchar,
    max_psk_len: c_uint,
) -> c_uint
where
    F: Fn(&mut SslRef, Option<&[u8]>, &mut [u8]) -> Result<usize, ErrorStack> + 'static
        + Sync + Send,
{
    unsafe {
        let ssl = SslRef::from_ptr_mut(ssl);
        let callback_idx = SslContext::cached_ex_index::<F>();
        let callback = ssl
            .ssl_context()
            .ex_data(callback_idx)
            .expect("BUG: psk callback missing") as *const F;
        let identity = if identity.is_null() {
            None
        } else {
            Some(CStr::from_ptr(identity).to_bytes())
        };
        #[allow(clippy::unnecessary_cast)]
        let psk_sl = slice::from_raw_parts_mut(psk as *mut u8, max_psk_len as usize);
        match (*callback)(ssl, identity, psk_sl) {
            Ok(psk_len) => psk_len as u32,
            Err(e) => {
                e.put();
                0
            }
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: ssl_raw_verify,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Potential Overunsafe：true

Found function with unsafe block in ssl_raw_verify:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 140, End Line: 161
pub extern "C" fn ssl_raw_verify<F>(
    preverify_ok: c_int,
    x509_ctx: *mut ffi::X509_STORE_CTX,
) -> c_int
where
    F: Fn(bool, &mut X509StoreContextRef) -> bool + 'static + Sync + Send,
{
    unsafe {
        let ctx = X509StoreContextRef::from_ptr_mut(x509_ctx);
        let ssl_idx = X509StoreContext::ssl_idx()
            .expect("BUG: store context ssl index missing");
        let callback_idx = Ssl::cached_ex_index::<Arc<F>>();
        let callback = ctx
            .ex_data(ssl_idx)
            .expect("BUG: store context missing ssl")
            .ex_data(callback_idx)
            .expect("BUG: ssl verify callback missing")
            .clone();
        callback(preverify_ok != 0, ctx) as c_int
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: raw_sni,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Potential Overunsafe：true

Found function with unsafe block in raw_sni:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 163, End Line: 179
pub extern "C" fn raw_sni<F>(
    ssl: *mut ffi::SSL,
    al: *mut c_int,
    arg: *mut c_void,
) -> c_int
where
    F: Fn(&mut SslRef, &mut SslAlert) -> Result<(), SniError> + 'static + Sync + Send,
{
    unsafe {
        let ssl = SslRef::from_ptr_mut(ssl);
        let callback = arg as *const F;
        let mut alert = SslAlert(*al);
        let r = (*callback)(ssl, &mut alert);
        *al = alert.0;
        match r {
            Ok(()) => ffi::SSL_TLSEXT_ERR_OK,
            Err(e) => e.0,
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: raw_alpn_select,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Potential Overunsafe：true

Found function with unsafe block in raw_alpn_select:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 182, End Line: 211
#[cfg(any(ossl102, libressl261))]
pub extern "C" fn raw_alpn_select<F>(
    ssl: *mut ffi::SSL,
    out: *mut *const c_uchar,
    outlen: *mut c_uchar,
    inbuf: *const c_uchar,
    inlen: c_uint,
    _arg: *mut c_void,
) -> c_int
where
    F: for<'a> Fn(&mut SslRef, &'a [u8]) -> Result<&'a [u8], AlpnError> + 'static + Sync
        + Send,
{
    unsafe {
        let ssl = SslRef::from_ptr_mut(ssl);
        let callback = ssl
            .ssl_context()
            .ex_data(SslContext::cached_ex_index::<F>())
            .expect("BUG: alpn callback missing") as *const F;
        #[allow(clippy::unnecessary_cast)]
        let protos = slice::from_raw_parts(inbuf as *const u8, inlen as usize);
        match (*callback)(ssl, protos) {
            Ok(proto) => {
                *out = proto.as_ptr() as *const c_uchar;
                *outlen = proto.len() as c_uchar;
                ffi::SSL_TLSEXT_ERR_OK
            }
            Err(e) => e.0,
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: raw_cookie_generate,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Potential Overunsafe：true

Found function with unsafe block in raw_cookie_generate:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 496, End Line: 526
#[cfg(not(boringssl))]
pub extern "C" fn raw_cookie_generate<F>(
    ssl: *mut ffi::SSL,
    cookie: *mut c_uchar,
    cookie_len: *mut c_uint,
) -> c_int
where
    F: Fn(&mut SslRef, &mut [u8]) -> Result<usize, ErrorStack> + 'static + Sync + Send,
{
    unsafe {
        let ssl = SslRef::from_ptr_mut(ssl);
        let callback = ssl
            .ssl_context()
            .ex_data(SslContext::cached_ex_index::<F>())
            .expect("BUG: cookie generate callback missing") as *const F;
        #[allow(clippy::unnecessary_cast)]
        let slice = slice::from_raw_parts_mut(
            cookie as *mut u8,
            ffi::DTLS1_COOKIE_LENGTH as usize - 1,
        );
        match (*callback)(ssl, slice) {
            Ok(len) => {
                *cookie_len = len as c_uint;
                1
            }
            Err(e) => {
                e.put();
                0
            }
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: raw_cookie_verify,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Potential Overunsafe：true

Found function with unsafe block in raw_cookie_verify:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 538, End Line: 557
#[cfg(not(boringssl))]
pub extern "C" fn raw_cookie_verify<F>(
    ssl: *mut ffi::SSL,
    cookie: CookiePtr,
    cookie_len: c_uint,
) -> c_int
where
    F: Fn(&mut SslRef, &[u8]) -> bool + 'static + Sync + Send,
{
    unsafe {
        let ssl = SslRef::from_ptr_mut(ssl);
        let callback = ssl
            .ssl_context()
            .ex_data(SslContext::cached_ex_index::<F>())
            .expect("BUG: cookie verify callback missing") as *const F;
        #[allow(clippy::unnecessary_cast)]
        let slice = slice::from_raw_parts(
            cookie as *const c_uchar as *const u8,
            cookie_len as usize,
        );
        (*callback)(ssl, slice) as c_int
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: raw_custom_ext_add,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Potential Overunsafe：true

Found function with unsafe block in raw_custom_ext_add:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 563, End Line: 619
#[cfg(ossl111)]
pub extern "C" fn raw_custom_ext_add<F, T>(
    ssl: *mut ffi::SSL,
    _: c_uint,
    context: c_uint,
    out: *mut *const c_uchar,
    outlen: *mut size_t,
    x: *mut ffi::X509,
    chainidx: size_t,
    al: *mut c_int,
    _: *mut c_void,
) -> c_int
where
    F: Fn(
            &mut SslRef,
            ExtensionContext,
            Option<(usize, &X509Ref)>,
        ) -> Result<Option<T>, SslAlert> + 'static + Sync + Send,
    T: AsRef<[u8]> + 'static + Sync + Send,
{
    unsafe {
        let ssl = SslRef::from_ptr_mut(ssl);
        let callback = ssl
            .ssl_context()
            .ex_data(SslContext::cached_ex_index::<F>())
            .expect("BUG: custom ext add callback missing") as *const F;
        let ectx = ExtensionContext::from_bits_truncate(context);
        let cert = if ectx.contains(ExtensionContext::TLS1_3_CERTIFICATE) {
            Some((chainidx, X509Ref::from_ptr(x)))
        } else {
            None
        };
        match (*callback)(ssl, ectx, cert) {
            Ok(None) => 0,
            Ok(Some(buf)) => {
                *outlen = buf.as_ref().len();
                *out = buf.as_ref().as_ptr();
                let idx = Ssl::cached_ex_index::<CustomExtAddState<T>>();
                let mut buf = Some(buf);
                let new = match ssl.ex_data_mut(idx) {
                    Some(state) => {
                        state.0 = buf.take();
                        false
                    }
                    None => true,
                };
                if new {
                    ssl.set_ex_data(idx, CustomExtAddState(buf));
                }
                1
            }
            Err(alert) => {
                *al = alert.0;
                -1
            }
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: raw_custom_ext_free,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Potential Overunsafe：true

Found function with unsafe block in raw_custom_ext_free:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 622, End Line: 638
#[cfg(ossl111)]
pub extern "C" fn raw_custom_ext_free<T>(
    ssl: *mut ffi::SSL,
    _: c_uint,
    _: c_uint,
    _: *const c_uchar,
    _: *mut c_void,
)
where
    T: 'static + Sync + Send,
{
    unsafe {
        let ssl = SslRef::from_ptr_mut(ssl);
        let idx = Ssl::cached_ex_index::<CustomExtAddState<T>>();
        if let Some(state) = ssl.ex_data_mut(idx) {
            state.0 = None;
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: raw_custom_ext_parse,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Potential Overunsafe：true

Found function with unsafe block in raw_custom_ext_parse:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 641, End Line: 680
#[cfg(ossl111)]
pub extern "C" fn raw_custom_ext_parse<F>(
    ssl: *mut ffi::SSL,
    _: c_uint,
    context: c_uint,
    input: *const c_uchar,
    inlen: size_t,
    x: *mut ffi::X509,
    chainidx: size_t,
    al: *mut c_int,
    _: *mut c_void,
) -> c_int
where
    F: Fn(
            &mut SslRef,
            ExtensionContext,
            &[u8],
            Option<(usize, &X509Ref)>,
        ) -> Result<(), SslAlert> + 'static + Sync + Send,
{
    unsafe {
        let ssl = SslRef::from_ptr_mut(ssl);
        let callback = ssl
            .ssl_context()
            .ex_data(SslContext::cached_ex_index::<F>())
            .expect("BUG: custom ext parse callback missing") as *const F;
        let ectx = ExtensionContext::from_bits_truncate(context);
        #[allow(clippy::unnecessary_cast)]
        let slice = slice::from_raw_parts(input as *const u8, inlen);
        let cert = if ectx.contains(ExtensionContext::TLS1_3_CERTIFICATE) {
            Some((chainidx, X509Ref::from_ptr(x)))
        } else {
            None
        };
        match (*callback)(ssl, ectx, slice, cert) {
            Ok(()) => 1,
            Err(alert) => {
                *al = alert.0;
                0
            }
        }
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\connector.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\error.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cipher_name,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: tls,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: dtls,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: tls_client,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: tls_server,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: select_next_proto,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

Found function with unsafe block in select_next_proto:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 698, End Line: 716
/// A standard implementation of protocol selection for Application Layer Protocol Negotiation
/// (ALPN).
///
/// `server` should contain the server's list of supported protocols and `client` the client's. They
/// must both be in the ALPN wire format. See the documentation for
/// [`SslContextBuilder::set_alpn_protos`] for details.
///
/// It will select the first protocol supported by the server which is also supported by the client.
///
/// [`SslContextBuilder::set_alpn_protos`]: struct.SslContextBuilder.html#method.set_alpn_protos
#[corresponds(SSL_select_next_proto)]
pub fn select_next_proto<'a>(server: &[u8], client: &'a [u8]) -> Option<&'a [u8]> {
    unsafe {
        let mut out = ptr::null_mut();
        let mut outlen = 0;
        let r = ffi::SSL_select_next_proto(
            &mut out,
            &mut outlen,
            server.as_ptr(),
            server.len() as c_uint,
            client.as_ptr(),
            client.len() as c_uint,
        );
        if r == ffi::OPENSSL_NPN_NEGOTIATED {
            Some(slice::from_raw_parts(out as *const u8, outlen as usize))
        } else {
            None
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_verify,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_verify_callback,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_servername_callback,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_verify_depth,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_verify_cert_store,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 818, End Line: 826
/// Sets a custom certificate store for verifying peer certificates.
///
/// Requires OpenSSL 1.0.2 or newer.
#[corresponds(SSL_CTX_set0_verify_cert_store)]
#[cfg(ossl102)]
pub fn set_verify_cert_store(
    &mut self,
    cert_store: X509Store,
) -> Result<(), ErrorStack> {
    unsafe {
        let ptr = cert_store.as_ptr();
        cvt(ffi::SSL_CTX_set0_verify_cert_store(self.as_ptr(), ptr) as c_int)?;
        mem::forget(cert_store);
        Ok(())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_cert_store,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_read_ahead,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_mode,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_tmp_dh,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_tmp_dh_callback,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_tmp_ecdh,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_tmp_ecdh_callback,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_default_verify_paths,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_ca_file,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_client_ca_list,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: add_client_ca,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_session_id_context,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_certificate_file,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_certificate_chain_file,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_certificate,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: add_extra_chain_cert,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1033, End Line: 1039
/// Appends a certificate to the certificate chain.
///
/// This chain should contain all certificates necessary to go from the certificate specified by
/// `set_certificate` to a trusted root.
#[corresponds(SSL_CTX_add_extra_chain_cert)]
pub fn add_extra_chain_cert(&mut self, cert: X509) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::SSL_CTX_add_extra_chain_cert(self.as_ptr(), cert.as_ptr()) as c_int)?;
        mem::forget(cert);
        Ok(())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_private_key_file,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_private_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_cipher_list,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_ciphersuites,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_ecdh_auto,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_options,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: options,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: clear_options,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_min_proto_version,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_max_proto_version,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: min_proto_version,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1189, End Line: 1198
/// Gets the minimum supported protocol version.
///
/// A value of `None` indicates that all versions down to the lowest version supported by
/// OpenSSL are enabled.
///
/// Requires OpenSSL 1.1.0g or LibreSSL 2.7.0 or newer.
#[corresponds(SSL_CTX_get_min_proto_version)]
#[cfg(any(ossl110g, libressl270))]
pub fn min_proto_version(&mut self) -> Option<SslVersion> {
    unsafe {
        let r = ffi::SSL_CTX_get_min_proto_version(self.as_ptr());
        if r == 0 { None } else { Some(SslVersion(r)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: max_proto_version,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1208, End Line: 1217
/// Gets the maximum supported protocol version.
///
/// A value of `None` indicates that all versions up to the highest version supported by
/// OpenSSL are enabled.
///
/// Requires OpenSSL 1.1.0g or LibreSSL 2.7.0 or newer.
#[corresponds(SSL_CTX_get_max_proto_version)]
#[cfg(any(ossl110g, libressl270))]
pub fn max_proto_version(&mut self) -> Option<SslVersion> {
    unsafe {
        let r = ffi::SSL_CTX_get_max_proto_version(self.as_ptr());
        if r == 0 { None } else { Some(SslVersion(r)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_alpn_protos,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1229, End Line: 1244
/// Sets the protocols to sent to the server for Application Layer Protocol Negotiation (ALPN).
///
/// The input must be in ALPN "wire format". It consists of a sequence of supported protocol
/// names prefixed by their byte length. For example, the protocol list consisting of `spdy/1`
/// and `http/1.1` is encoded as `b"\x06spdy/1\x08http/1.1"`. The protocols are ordered by
/// preference.
///
/// Requires BoringSSL or OpenSSL 1.0.2 or LibreSSL 2.6.1 or newer.
#[corresponds(SSL_CTX_set_alpn_protos)]
#[cfg(any(ossl102, libressl261, boringssl))]
pub fn set_alpn_protos(&mut self, protocols: &[u8]) -> Result<(), ErrorStack> {
    unsafe {
        assert!(protocols.len() <= c_uint::MAX as usize);
        let r = ffi::SSL_CTX_set_alpn_protos(
            self.as_ptr(),
            protocols.as_ptr(),
            protocols.len() as _,
        );
        if r == 0 { Ok(()) } else { Err(ErrorStack::get()) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_tlsext_use_srtp,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1248, End Line: 1260
/// Enables the DTLS extension "use_srtp" as defined in RFC5764.
#[corresponds(SSL_CTX_set_tlsext_use_srtp)]
pub fn set_tlsext_use_srtp(&mut self, protocols: &str) -> Result<(), ErrorStack> {
    unsafe {
        let cstr = CString::new(protocols).unwrap();
        let r = ffi::SSL_CTX_set_tlsext_use_srtp(self.as_ptr(), cstr.as_ptr());
        if r == 0 { Ok(()) } else { Err(ErrorStack::get()) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_alpn_select_callback,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: check_private_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cert_store,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cert_store_mut,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: verify_param,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: verify_param_mut,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_status_callback,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_psk_client_callback,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_psk_server_callback,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_new_session_callback,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_remove_session_callback,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_keylog_callback,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_session_cache_mode,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_stateless_cookie_generate_cb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_stateless_cookie_verify_cb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_cookie_generate_cb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_cookie_verify_cb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_ex_data_inner,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1580, End Line: 1592
fn set_ex_data_inner<T>(&mut self, index: Index<SslContext, T>, data: T) -> *mut c_void {
    match self.ex_data_mut(index) {
        Some(v) => {
            *v = data;
            (v as *mut T).cast()
        }
        _ => {
            unsafe {
                let data = Box::into_raw(Box::new(data)) as *mut c_void;
                ffi::SSL_CTX_set_ex_data(self.as_ptr(), index.as_raw(), data);
                data
            }
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: ex_data_mut,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1594, End Line: 1603
fn ex_data_mut<T>(&mut self, index: Index<SslContext, T>) -> Option<&mut T> {
    unsafe {
        let data = ffi::SSL_CTX_get_ex_data(self.as_ptr(), index.as_raw());
        if data.is_null() { None } else { Some(&mut *data.cast()) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: add_custom_ext,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_max_early_data,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_client_hello_callback,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_session_cache_size,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1701, End Line: 1705
/// Sets the context's session cache size limit, returning the previous limit.
///
/// A value of 0 means that the cache size is unbounded.
#[corresponds(SSL_CTX_sess_set_cache_size)]
#[allow(clippy::useless_conversion)]
pub fn set_session_cache_size(&mut self, size: i32) -> i64 {
    unsafe {
        ffi::SSL_CTX_sess_set_cache_size(self.as_ptr(), size as SslCacheSize)
            as SslCacheTy
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_sigalgs_list,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_groups_list,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_num_tickets,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_security_level,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: to_owned,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new_ex_index,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cached_ex_index,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: certificate,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: private_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: extra_chain_certs,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: ex_data,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1882, End Line: 1891
/// Returns a reference to the extra data at the specified index.
#[corresponds(SSL_CTX_get_ex_data)]
pub fn ex_data<T>(&self, index: Index<SslContext, T>) -> Option<&T> {
    unsafe {
        let data = ffi::SSL_CTX_get_ex_data(self.as_ptr(), index.as_raw());
        if data.is_null() { None } else { Some(&*(data as *const T)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: max_early_data,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: session_cache_size,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1933, End Line: 1935
/// Returns the context's session cache size limit.
///
/// A value of 0 means that the cache size is unbounded.
#[corresponds(SSL_CTX_sess_get_cache_size)]
#[allow(clippy::unnecessary_cast)]
pub fn session_cache_size(&self) -> i64 {
    unsafe { ffi::SSL_CTX_sess_get_cache_size(self.as_ptr()) as i64 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: verify_mode,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: num_tickets,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: security_level,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1962, End Line: 1964
/// Get the context's security level, which controls the allowed parameters
/// and algorithms.
///
/// Requires OpenSSL 1.1.0 or newer.
#[corresponds(SSL_CTX_get_security_level)]
#[cfg(any(ossl110, libressl360))]
pub fn security_level(&self) -> u32 {
    unsafe { ffi::SSL_CTX_get_security_level(self.as_ptr()) as u32 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: deref,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: deref_mut,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: name,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: standard_name,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2036, End Line: 2045
/// Returns the RFC-standard name of the cipher, if one exists.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_CIPHER_standard_name)]
#[cfg(ossl111)]
pub fn standard_name(&self) -> Option<&'static str> {
    unsafe {
        let ptr = ffi::SSL_CIPHER_standard_name(self.as_ptr());
        if ptr.is_null() { None } else { Some(CStr::from_ptr(ptr).to_str().unwrap()) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: version,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: bits,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2061, End Line: 2070
/// Returns the number of bits used for the cipher.
#[corresponds(SSL_CIPHER_get_bits)]
#[allow(clippy::useless_conversion)]
pub fn bits(&self) -> CipherBits {
    unsafe {
        let mut algo_bits = 0;
        let secret_bits = ffi::SSL_CIPHER_get_bits(self.as_ptr(), &mut algo_bits);
        CipherBits {
            secret: secret_bits.into(),
            algorithm: algo_bits.into(),
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: description,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: handshake_digest,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2088, End Line: 2097
/// Returns the handshake digest of the cipher.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_CIPHER_get_handshake_digest)]
#[cfg(ossl111)]
pub fn handshake_digest(&self) -> Option<MessageDigest> {
    unsafe {
        let ptr = ffi::SSL_CIPHER_get_handshake_digest(self.as_ptr());
        if ptr.is_null() { None } else { Some(MessageDigest::from_ptr(ptr)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cipher_nid,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: id,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: master_key_len,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: master_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: time,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: timeout,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: protocol_version,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: get_raw_rbio,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: get_error,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_connect_state,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_accept_state,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: current_cipher,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: state_string,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: state_string_long,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_hostname,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: peer_certificate,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: peer_cert_chain,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: verified_chain,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: version2,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2612, End Line: 2621
/// Returns the protocol version of the session.
#[corresponds(SSL_version)]
pub fn version2(&self) -> Option<SslVersion> {
    unsafe {
        let r = ffi::SSL_version(self.as_ptr());
        if r == 0 { None } else { Some(SslVersion(r)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: version_str,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: selected_alpn_protocol,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2642, End Line: 2656
/// Returns the protocol selected via Application Layer Protocol Negotiation (ALPN).
///
/// The protocol's name is returned is an opaque sequence of bytes. It is up to the client
/// to interpret it.
///
/// Requires BoringSSL or OpenSSL 1.0.2 or LibreSSL 2.6.1 or newer.
#[corresponds(SSL_get0_alpn_selected)]
#[cfg(any(ossl102, libressl261, boringssl))]
pub fn selected_alpn_protocol(&self) -> Option<&[u8]> {
    unsafe {
        let mut data: *const c_uchar = ptr::null();
        let mut len: c_uint = 0;
        ffi::SSL_get0_alpn_selected(self.as_ptr(), &mut data, &mut len);
        if data.is_null() {
            None
        } else {
            Some(slice::from_raw_parts(data, len as usize))
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: srtp_profiles,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: selected_srtp_profile,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: pending,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2711, End Line: 2713
/// Returns the number of bytes remaining in the currently processed TLS record.
///
/// If this is greater than 0, the next call to `read` will not call down to the underlying
/// stream.
#[corresponds(SSL_pending)]
pub fn pending(&self) -> usize {
    unsafe { ffi::SSL_pending(self.as_ptr()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: servername_raw,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2742, End Line: 2751
/// Returns the servername sent by the client via Server Name Indication (SNI).
///
/// It is only useful on the server side.
///
/// # Note
///
/// Unlike `servername`, this method does not require the name be valid UTF-8.
#[corresponds(SSL_get_servername)]
pub fn servername_raw(&self, type_: NameType) -> Option<&[u8]> {
    unsafe {
        let name = ffi::SSL_get_servername(self.as_ptr(), type_.0);
        if name.is_null() {
            None
        } else {
            Some(CStr::from_ptr(name as *const _).to_bytes())
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_ssl_context,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: ssl_context,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: param_mut,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: verify_result,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: session,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: client_random,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: server_random,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: export_keying_material,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: export_keying_material_early,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: session_reused,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2894, End Line: 2896
/// Determines if the session provided to `set_session` was successfully reused.
#[corresponds(SSL_session_reused)]
pub fn session_reused(&self) -> bool {
    unsafe { ffi::SSL_session_reused(self.as_ptr()) != 0 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_status_type,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: extms_support,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2911, End Line: 2918
/// Determines if current session used Extended Master Secret
///
/// Returns `None` if the handshake is still in-progress.
#[corresponds(SSL_get_extms_support)]
#[cfg(ossl110)]
pub fn extms_support(&self) -> Option<bool> {
    unsafe {
        match ffi::SSL_get_extms_support(self.as_ptr()) {
            -1 => None,
            ret => Some(ret != 0),
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: ocsp_status,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2923, End Line: 2934
/// Returns the server's OCSP response, if present.
#[corresponds(SSL_get_tlsext_status_ocsp_resp)]
#[cfg(not(boringssl))]
pub fn ocsp_status(&self) -> Option<&[u8]> {
    unsafe {
        let mut p = ptr::null_mut();
        let len = ffi::SSL_get_tlsext_status_ocsp_resp(self.as_ptr(), &mut p);
        if len < 0 {
            None
        } else {
            Some(slice::from_raw_parts(p as *const u8, len as usize))
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_ocsp_status,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: is_server,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2959, End Line: 2961
/// Determines if this `Ssl` is configured for server-side or client-side use.
#[corresponds(SSL_is_server)]
pub fn is_server(&self) -> bool {
    unsafe { SSL_is_server(self.as_ptr()) != 0 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: finished,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: peer_finished,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: is_init_finished,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3055, End Line: 3057
/// Determines if the initial handshake has been completed.
#[corresponds(SSL_is_init_finished)]
#[cfg(ossl110)]
pub fn is_init_finished(&self) -> bool {
    unsafe { ffi::SSL_is_init_finished(self.as_ptr()) != 0 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: client_hello_isv2,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3066, End Line: 3068
/// Determines if the client's hello message is in the SSLv2 format.
///
/// This can only be used inside of the client hello callback. Otherwise, `false` is returned.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_client_hello_isv2)]
#[cfg(ossl111)]
pub fn client_hello_isv2(&self) -> bool {
    unsafe { ffi::SSL_client_hello_isv2(self.as_ptr()) != 0 }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: client_hello_legacy_version,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3077, End Line: 3086
/// Returns the legacy version field of the client's hello message.
///
/// This can only be used inside of the client hello callback. Otherwise, `None` is returned.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_client_hello_get0_legacy_version)]
#[cfg(ossl111)]
pub fn client_hello_legacy_version(&self) -> Option<SslVersion> {
    unsafe {
        let version = ffi::SSL_client_hello_get0_legacy_version(self.as_ptr());
        if version == 0 { None } else { Some(SslVersion(version as c_int)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: client_hello_random,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3095, End Line: 3105
/// Returns the random field of the client's hello message.
///
/// This can only be used inside of the client hello callback. Otherwise, `None` is returned.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_client_hello_get0_random)]
#[cfg(ossl111)]
pub fn client_hello_random(&self) -> Option<&[u8]> {
    unsafe {
        let mut ptr = ptr::null();
        let len = ffi::SSL_client_hello_get0_random(self.as_ptr(), &mut ptr);
        if len == 0 { None } else { Some(slice::from_raw_parts(ptr, len)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: client_hello_session_id,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3114, End Line: 3124
/// Returns the session ID field of the client's hello message.
///
/// This can only be used inside of the client hello callback. Otherwise, `None` is returned.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_client_hello_get0_session_id)]
#[cfg(ossl111)]
pub fn client_hello_session_id(&self) -> Option<&[u8]> {
    unsafe {
        let mut ptr = ptr::null();
        let len = ffi::SSL_client_hello_get0_session_id(self.as_ptr(), &mut ptr);
        if len == 0 { None } else { Some(slice::from_raw_parts(ptr, len)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: client_hello_ciphers,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3133, End Line: 3143
/// Returns the ciphers field of the client's hello message.
///
/// This can only be used inside of the client hello callback. Otherwise, `None` is returned.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_client_hello_get0_ciphers)]
#[cfg(ossl111)]
pub fn client_hello_ciphers(&self) -> Option<&[u8]> {
    unsafe {
        let mut ptr = ptr::null();
        let len = ffi::SSL_client_hello_get0_ciphers(self.as_ptr(), &mut ptr);
        if len == 0 { None } else { Some(slice::from_raw_parts(ptr, len)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: bytes_to_cipher_list,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3151, End Line: 3178
/// Decodes a slice of wire-format cipher suite specification bytes. Unsupported cipher suites
/// are ignored.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_bytes_to_cipher_list)]
#[cfg(ossl111)]
pub fn bytes_to_cipher_list(
    &self,
    bytes: &[u8],
    isv2format: bool,
) -> Result<CipherLists, ErrorStack> {
    unsafe {
        let ptr = bytes.as_ptr();
        let len = bytes.len();
        let mut sk = ptr::null_mut();
        let mut scsvs = ptr::null_mut();
        let res = ffi::SSL_bytes_to_cipher_list(
            self.as_ptr(),
            ptr,
            len,
            isv2format as c_int,
            &mut sk,
            &mut scsvs,
        );
        if res == 1 {
            Ok(CipherLists {
                suites: Stack::from_ptr(sk),
                signalling_suites: Stack::from_ptr(scsvs),
            })
        } else {
            Err(ErrorStack::get())
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: client_hello_compression_methods,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3187, End Line: 3197
/// Returns the compression methods field of the client's hello message.
///
/// This can only be used inside of the client hello callback. Otherwise, `None` is returned.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_client_hello_get0_compression_methods)]
#[cfg(ossl111)]
pub fn client_hello_compression_methods(&self) -> Option<&[u8]> {
    unsafe {
        let mut ptr = ptr::null();
        let len = ffi::SSL_client_hello_get0_compression_methods(
            self.as_ptr(),
            &mut ptr,
        );
        if len == 0 { None } else { Some(slice::from_raw_parts(ptr, len)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_mtu,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: psk_identity_hint,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3210, End Line: 3219
/// Returns the PSK identity hint used during connection setup.
///
/// May return `None` if no PSK identity hint was used during the connection setup.
#[corresponds(SSL_get_psk_identity_hint)]
#[cfg(not(osslconf = "OPENSSL_NO_PSK"))]
pub fn psk_identity_hint(&self) -> Option<&[u8]> {
    unsafe {
        let ptr = ffi::SSL_get_psk_identity_hint(self.as_ptr());
        if ptr.is_null() { None } else { Some(CStr::from_ptr(ptr).to_bytes()) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: psk_identity,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3224, End Line: 3233
/// Returns the PSK identity used during connection setup.
#[corresponds(SSL_get_psk_identity)]
#[cfg(not(osslconf = "OPENSSL_NO_PSK"))]
pub fn psk_identity(&self) -> Option<&[u8]> {
    unsafe {
        let ptr = ffi::SSL_get_psk_identity(self.as_ptr());
        if ptr.is_null() { None } else { Some(CStr::from_ptr(ptr).to_bytes()) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: add_chain_cert,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3237, End Line: 3243
#[corresponds(SSL_add0_chain_cert)]
#[cfg(ossl102)]
pub fn add_chain_cert(&mut self, chain: X509) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::SSL_add0_chain_cert(self.as_ptr(), chain.as_ptr()) as c_int)
            .map(|_| ())?;
        mem::forget(chain);
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: set_method,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3247, End Line: 3252
/// Sets a new default TLS/SSL method for SSL objects
#[cfg(not(boringssl))]
pub fn set_method(&mut self, method: SslMethod) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::SSL_set_ssl_method(self.as_ptr(), method.as_ptr()))?;
    };
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: peer_tmp_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3462, End Line: 3470
/// Get the temporary key provided by the peer that is used during key
/// exchange.
#[corresponds(SSL_get_peer_tmp_key)]
#[cfg(ossl300)]
pub fn peer_tmp_key(&self) -> Result<PKey<Public>, ErrorStack> {
    unsafe {
        let mut key = ptr::null_mut();
        match cvt_long(ffi::SSL_get_peer_tmp_key(self.as_ptr(), &mut key)) {
            Ok(_) => Ok(PKey::<Public>::from_ptr(key)),
            Err(e) => Err(e),
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: tmp_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3478, End Line: 3486
/// Returns the temporary key from the local end of the connection that is
/// used during key exchange.
#[corresponds(SSL_get_tmp_key)]
#[cfg(ossl300)]
pub fn tmp_key(&self) -> Result<PKey<Private>, ErrorStack> {
    unsafe {
        let mut key = ptr::null_mut();
        match cvt_long(ffi::SSL_get_tmp_key(self.as_ptr(), &mut key)) {
            Ok(_) => Ok(PKey::<Private>::from_ptr(key)),
            Err(e) => Err(e),
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: drop,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: read_early_data,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: write_early_data,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: do_handshake,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: stateless,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: true, Name: ssl_read,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: shutdown,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: get_shutdown,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_shutdown,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: check_panic,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: get_bio_error,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: true, Name: read,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_dtls_mtu_size,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\test\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\test\server.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: drop,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs
Start Line: 58, End Line: 63
fn drop(&mut self) {
    unsafe {
        while self.pop().is_some() {}
        OPENSSL_sk_free(self.0 as *mut _);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: deref,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: deref_mut,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: next,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: next_back,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: len,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs
Start Line: 195, End Line: 197
/// Returns the number of items in the stack.
pub fn len(&self) -> usize {
    unsafe { OPENSSL_sk_num(self.as_stack()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: get,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs
Start Line: 220, End Line: 228
/// Returns a reference to the element at the given index in the
/// stack or `None` if the index is out of bounds
pub fn get(&self, idx: usize) -> Option<&T::Ref> {
    unsafe {
        if idx >= self.len() {
            return None;
        }
        Some(T::Ref::from_ptr(self._get(idx)))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: get_mut,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs
Start Line: 232, End Line: 240
/// Returns a mutable reference to the element at the given index in the
/// stack or `None` if the index is out of bounds
pub fn get_mut(&mut self, idx: usize) -> Option<&mut T::Ref> {
    unsafe {
        if idx >= self.len() {
            return None;
        }
        Some(T::Ref::from_ptr_mut(self._get(idx)))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: push,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs
Start Line: 243, End Line: 249
/// Pushes a value onto the top of the stack.
pub fn push(&mut self, data: T) -> Result<(), ErrorStack> {
    unsafe {
        cvt(OPENSSL_sk_push(self.as_stack(), data.as_ptr() as *mut _) as c_int)?;
        mem::forget(data);
        Ok(())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: pop,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\string.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: deref,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\string.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_nid,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: nid,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_xts,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_ctr,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_cfb1,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_cfb128,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_cfb8,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_gcm,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_ccm,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_128_ocb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_ctr,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_cfb1,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_cfb128,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_cfb8,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_gcm,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_ccm,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_192_ocb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_xts,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_ctr,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_cfb1,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_cfb128,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_cfb8,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_gcm,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_ccm,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: aes_256_ocb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: bf_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: bf_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: bf_cfb64,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: bf_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: des_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: des_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: des_ede3,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: des_ede3_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: des_ede3_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: des_ede3_cfb64,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: des_ede3_cfb8,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: des_ede3_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: rc4,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia_128_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia_128_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia_128_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia_128_cfb128,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia_192_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia_192_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia_192_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia_192_cfb128,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia_256_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia_256_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia_256_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: camellia_256_cfb128,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cast5_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cast5_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cast5_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cast5_cfb64,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: chacha20,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: chacha20_poly1305,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: idea_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: idea_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: idea_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: idea_cfb64,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: seed_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: seed_cfb128,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: seed_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: seed_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sm4_ecb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sm4_cbc,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sm4_ctr,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sm4_cfb128,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sm4_ofb,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: key_len,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Start Line: 478, End Line: 480
/// Returns the length of keys used with this cipher.
#[allow(clippy::trivially_copy_pass_by_ref)]
pub fn key_len(&self) -> usize {
    unsafe { EVP_CIPHER_key_length(self.0) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: iv_len,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Start Line: 485, End Line: 494
/// Returns the length of the IV used with this cipher, or `None` if the
/// cipher does not use an IV.
#[allow(clippy::trivially_copy_pass_by_ref)]
pub fn iv_len(&self) -> Option<usize> {
    unsafe {
        let len = EVP_CIPHER_iv_length(self.0) as usize;
        if len == 0 { None } else { Some(len) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: block_size,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Start Line: 502, End Line: 504
/// Returns the block size of the cipher.
///
/// # Note
///
/// Stream ciphers such as RC4 have a block size of 1.
#[allow(clippy::trivially_copy_pass_by_ref)]
pub fn block_size(&self) -> usize {
    unsafe { EVP_CIPHER_block_size(self.0) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\version.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: number,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\version.rs
Potential Overunsafe：true

Found function with unsafe block in number:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\version.rs
Start Line: 48, End Line: 50
/// OPENSSL_VERSION_NUMBER is a numeric release version identifier:
///
/// `MNNFFPPS: major minor fix patch status`
///
/// The status nibble has one of the values 0 for development, 1 to e for betas 1 to 14, and f for release.
///
/// for example
///
/// `0x000906000 == 0.9.6 dev`
/// `0x000906023 == 0.9.6b beta 3`
/// `0x00090605f == 0.9.6e release`
#[corresponds(OpenSSL_version_num)]
pub fn number() -> i64 {
    unsafe { OpenSSL_version_num() as i64 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: version,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\version.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: c_flags,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\version.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: built_on,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\version.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: platform,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\version.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: dir,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\version.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\extension.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: ssl_idx,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: ex_data,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 95, End Line: 104
/// Returns application data pertaining to an `X509` store context.
#[corresponds(X509_STORE_CTX_get_ex_data)]
pub fn ex_data<T>(&self, index: Index<X509StoreContext, T>) -> Option<&T> {
    unsafe {
        let data = ffi::X509_STORE_CTX_get_ex_data(self.as_ptr(), index.as_raw());
        if data.is_null() { None } else { Some(&*(data as *const T)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: error,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: init,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: init,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 127, End Line: 158
/// Initializes this context with the given certificate, certificates chain and certificate
/// store. After initializing the context, the `with_context` closure is called with the prepared
/// context. As long as the closure is running, the context stays initialized and can be used
/// to e.g. verify a certificate. The context will be cleaned up, after the closure finished.
///
/// * `trust` - The certificate store with the trusted certificates.
/// * `cert` - The certificate that should be verified.
/// * `cert_chain` - The certificates chain.
/// * `with_context` - The closure that is called with the initialized context.
///
/// This corresponds to [`X509_STORE_CTX_init`] before calling `with_context` and to
/// [`X509_STORE_CTX_cleanup`] after calling `with_context`.
///
/// [`X509_STORE_CTX_init`]:  https://www.openssl.org/docs/manmaster/crypto/X509_STORE_CTX_init.html
/// [`X509_STORE_CTX_cleanup`]:  https://www.openssl.org/docs/manmaster/crypto/X509_STORE_CTX_cleanup.html
pub fn init<F, T>(
    &mut self,
    trust: &store::X509StoreRef,
    cert: &X509Ref,
    cert_chain: &StackRef<X509>,
    with_context: F,
) -> Result<T, ErrorStack>
where
    F: FnOnce(&mut X509StoreContextRef) -> Result<T, ErrorStack>,
{
    struct Cleanup<'a>(&'a mut X509StoreContextRef);
    impl<'a> Drop for Cleanup<'a> {
        fn drop(&mut self) {
            unsafe {
                ffi::X509_STORE_CTX_cleanup(self.0.as_ptr());
            }
        }
    }
    unsafe {
        cvt(
            ffi::X509_STORE_CTX_init(
                self.as_ptr(),
                trust.as_ptr(),
                cert.as_ptr(),
                cert_chain.as_ptr(),
            ),
        )?;
        let cleanup = Cleanup(self);
        with_context(cleanup.0)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: verify_cert,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_error,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: current_cert,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: error_depth,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 194, End Line: 196
/// Returns a non-negative integer representing the depth in the certificate
/// chain where the error occurred. If it is zero it occurred in the end
/// entity certificate, one if it is the certificate which signed the end
/// entity certificate and so on.
#[corresponds(X509_STORE_CTX_get_error_depth)]
pub fn error_depth(&self) -> u32 {
    unsafe { ffi::X509_STORE_CTX_get_error_depth(self.as_ptr()) as u32 }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: chain,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 200, End Line: 210
/// Returns a reference to a complete valid `X509` certificate chain.
#[corresponds(X509_STORE_CTX_get0_chain)]
pub fn chain(&self) -> Option<&StackRef<X509>> {
    unsafe {
        let chain = X509_STORE_CTX_get0_chain(self.as_ptr());
        if chain.is_null() { None } else { Some(StackRef::from_ptr(chain)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: drop,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_not_after,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_not_before,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_version,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_serial_number,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_issuer_name,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_subject_name,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_pubkey,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 6 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: x509v3_context,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 314, End Line: 343
/// Returns a context object which is needed to create certain X509 extension values.
///
/// Set `issuer` to `None` if the certificate will be self-signed.
#[corresponds(X509V3_set_ctx)]
pub fn x509v3_context<'a>(
    &'a self,
    issuer: Option<&'a X509Ref>,
    conf: Option<&'a ConfRef>,
) -> X509v3Context<'a> {
    unsafe {
        let mut ctx = mem::zeroed();
        let issuer = match issuer {
            Some(issuer) => issuer.as_ptr(),
            None => self.0.as_ptr(),
        };
        let subject = self.0.as_ptr();
        ffi::X509V3_set_ctx(
            &mut ctx,
            issuer,
            subject,
            ptr::null_mut(),
            ptr::null_mut(),
            0,
        );
        if let Some(conf) = conf {
            ffi::X509V3_set_nconf(&mut ctx, conf.as_ptr());
        }
        X509v3Context(ctx, PhantomData)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: append_extension2,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 354, End Line: 359
/// Adds an X509 extension value to the certificate.
#[corresponds(X509_add_ext)]
pub fn append_extension2(
    &mut self,
    extension: &X509ExtensionRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::X509_add_ext(self.0.as_ptr(), extension.as_ptr(), -1))?;
        Ok(())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: sign,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: subject_name,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: subject_name_hash,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 398, End Line: 403
/// Returns the hash of the certificates subject
#[corresponds(X509_subject_name_hash)]
pub fn subject_name_hash(&self) -> u32 {
    #[allow(clippy::unnecessary_cast)]
    unsafe { ffi::X509_subject_name_hash(self.as_ptr()) as u32 }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: issuer_name,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: issuer_name_hash,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 416, End Line: 421
/// Returns the hash of the certificates issuer
#[corresponds(X509_issuer_name_hash)]
pub fn issuer_name_hash(&self) -> u32 {
    #[allow(clippy::unnecessary_cast)]
    unsafe { ffi::X509_issuer_name_hash(self.as_ptr()) as u32 }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: subject_alt_names,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: crl_distribution_points,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: issuer_alt_names,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: authority_info,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: pathlen,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: subject_key_id,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: authority_key_id,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: authority_issuer,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: authority_serial,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: public_key,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: digest,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 539, End Line: 556
/// Returns a digest of the DER representation of the certificate.
#[corresponds(X509_digest)]
pub fn digest(&self, hash_type: MessageDigest) -> Result<DigestBytes, ErrorStack> {
    unsafe {
        let mut digest = DigestBytes {
            buf: [0; ffi::EVP_MAX_MD_SIZE as usize],
            len: ffi::EVP_MAX_MD_SIZE as usize,
        };
        let mut len = ffi::EVP_MAX_MD_SIZE as c_uint;
        cvt(
            ffi::X509_digest(
                self.as_ptr(),
                hash_type.as_ptr(),
                digest.buf.as_mut_ptr() as *mut _,
                &mut len,
            ),
        )?;
        digest.len = len as usize;
        Ok(digest)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: not_after,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: not_before,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: signature,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: signature_algorithm,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: ocsp_responders,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: issued,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: version,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 625, End Line: 627
/// Returns certificate version. If this certificate has no explicit version set, it defaults to
/// version 1.
///
/// Note that `0` return value stands for version 1, `1` for version 2 and so on.
#[corresponds(X509_get_version)]
#[cfg(ossl110)]
#[allow(clippy::unnecessary_cast)]
pub fn version(&self) -> i32 {
    unsafe { ffi::X509_get_version(self.as_ptr()) as i32 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: verify,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: serial_number,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: alias,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 658, End Line: 668
/// Returns this certificate's "alias". This field is populated by
/// OpenSSL in some situations -- specifically OpenSSL will store a
/// PKCS#12 `friendlyName` in this field. This is not a part of the X.509
/// certificate itself, OpenSSL merely attaches it to this structure in
/// memory.
#[corresponds(X509_alias_get0)]
pub fn alias(&self) -> Option<&[u8]> {
    unsafe {
        let mut len = 0;
        let ptr = ffi::X509_alias_get0(self.as_ptr(), &mut len);
        if ptr.is_null() { None } else { Some(slice::from_raw_parts(ptr, len as usize)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: to_owned,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: cmp,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: stack_from_pem,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 766, End Line: 794
/// Deserializes a list of PEM-formatted certificates.
#[corresponds(PEM_read_bio_X509)]
pub fn stack_from_pem(pem: &[u8]) -> Result<Vec<X509>, ErrorStack> {
    unsafe {
        ffi::init();
        let bio = MemBioSlice::new(pem)?;
        let mut certs = vec![];
        loop {
            let r = ffi::PEM_read_bio_X509(
                bio.as_ptr(),
                ptr::null_mut(),
                None,
                ptr::null_mut(),
            );
            if r.is_null() {
                let e = ErrorStack::get();
                if let Some(err) = e.errors().last() {
                    if err.library_code() == ffi::ERR_LIB_PEM as libc::c_int
                        && err.reason_code() == ffi::PEM_R_NO_START_LINE as libc::c_int
                    {
                        break;
                    }
                }
                return Err(e);
            } else {
                certs.push(X509(r));
            }
        }
        Ok(certs)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new_nid,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 967, End Line: 999
/// Constructs an X509 extension value. See `man x509v3_config` for information on supported
/// extensions and their value formats.
///
/// Some extension types, such as `nid::SUBJECT_ALTERNATIVE_NAME`, require an `X509v3Context` to
/// be provided.
///
/// DO NOT CALL THIS WITH UNTRUSTED `value`: `value` is an OpenSSL
/// mini-language that can read arbitrary files.
///
/// See the extension module for builder types which will construct certain common extensions.
///
/// This function is deprecated, `X509Extension::new_from_der` or the
/// types in `x509::extension` should be used in its place.
#[deprecated(
    note = "Use x509::extension types or new_from_der instead",
    since = "0.10.51"
)]
pub fn new_nid(
    conf: Option<&ConfRef>,
    context: Option<&X509v3Context<'_>>,
    name: Nid,
    value: &str,
) -> Result<X509Extension, ErrorStack> {
    let value = CString::new(value).unwrap();
    let mut ctx;
    unsafe {
        ffi::init();
        let conf = conf.map_or(ptr::null_mut(), ConfRef::as_ptr);
        let context_ptr = match context {
            Some(c) => c.as_ptr(),
            None => {
                ctx = mem::zeroed();
                ffi::X509V3_set_ctx(
                    &mut ctx,
                    ptr::null_mut(),
                    ptr::null_mut(),
                    ptr::null_mut(),
                    ptr::null_mut(),
                    0,
                );
                &mut ctx
            }
        };
        let name = name.as_raw();
        let value = value.as_ptr() as *mut _;
        cvt_p(ffi::X509V3_EXT_nconf_nid(conf, context_ptr, name, value))
            .map(X509Extension)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new_from_der,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: append_entry,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: append_entry_by_text,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: append_entry_by_text_with_type,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: append_entry_by_nid,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: append_entry_by_nid_with_type,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: load_client_ca_file,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: try_cmp,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: next,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 1301, End Line: 1325
fn next(&mut self) -> Option<&'a X509NameEntryRef> {
    unsafe {
        match self.nid {
            Some(nid) => {
                self.loc = ffi::X509_NAME_get_index_by_NID(
                    self.name.as_ptr(),
                    nid.as_raw(),
                    self.loc,
                );
                if self.loc == -1 {
                    return None;
                }
            }
            None => {
                self.loc += 1;
                if self.loc >= ffi::X509_NAME_entry_count(self.name.as_ptr()) {
                    return None;
                }
            }
        }
        let entry = ffi::X509_NAME_get_entry(self.name.as_ptr(), self.loc);
        Some(
            X509NameEntryRef::from_const_ptr_opt(entry).expect("entry must not be null"),
        )
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: data,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: object,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: add_extensions,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: extensions,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: revocation_date,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: true, Name: extension,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: get_revoked,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 1868, End Line: 1877
/// Get the stack of revocation entries
pub fn get_revoked(&self) -> Option<&StackRef<X509Revoked>> {
    unsafe {
        let revoked = X509_CRL_get_REVOKED(self.as_ptr());
        if revoked.is_null() { None } else { Some(StackRef::from_ptr(revoked)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: last_update,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: next_update,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: get_by_serial,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: get_by_cert,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: error_string,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new_email,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new_dns,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new_uri,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new_ip,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new_ip,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 7 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: new_rid,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2094, End Line: 2113
pub(crate) fn new_rid(oid: Asn1Object) -> Result<GeneralName, ErrorStack> {
    unsafe {
        ffi::init();
        let gn = cvt_p(ffi::GENERAL_NAME_new())?;
        (*gn).type_ = ffi::GEN_RID;
        #[cfg(boringssl)]
        {
            (*gn).d.registeredID = oid.as_ptr();
        }
        #[cfg(not(boringssl))]
        {
            (*gn).d = oid.as_ptr().cast();
        }
        mem::forget(oid);
        Ok(GeneralName::from_ptr(gn))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 7 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: new_other_name,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2115, End Line: 2141
pub(crate) fn new_other_name(
    oid: Asn1Object,
    value: &[u8],
) -> Result<GeneralName, ErrorStack> {
    unsafe {
        ffi::init();
        let typ = cvt_p(
            ffi::d2i_ASN1_TYPE(
                ptr::null_mut(),
                &mut value.as_ptr().cast(),
                value.len().try_into().unwrap(),
            ),
        )?;
        let gn = cvt_p(ffi::GENERAL_NAME_new())?;
        (*gn).type_ = ffi::GEN_OTHERNAME;
        if let Err(e) = cvt(
            ffi::GENERAL_NAME_set0_othername(gn, oid.as_ptr().cast(), typ),
        ) {
            ffi::GENERAL_NAME_free(gn);
            return Err(e);
        }
        mem::forget(oid);
        Ok(GeneralName::from_ptr(gn))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 7 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: ia5_string,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2145, End Line: 2166
fn ia5_string(&self, ffi_type: c_int) -> Option<&str> {
    unsafe {
        if (*self.as_ptr()).type_ != ffi_type {
            return None;
        }
        #[cfg(boringssl)]
        let d = (*self.as_ptr()).d.ptr;
        #[cfg(not(boringssl))]
        let d = (*self.as_ptr()).d;
        let ptr = ASN1_STRING_get0_data(d as *mut _);
        let len = ffi::ASN1_STRING_length(d as *mut _);
        #[allow(clippy::unnecessary_cast)]
        let slice = slice::from_raw_parts(ptr as *const u8, len as usize);
        str::from_utf8(slice).ok()
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: directory_name,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2174, End Line: 2187
/// Returns the contents of this `GeneralName` if it is a `directoryName`.
pub fn directory_name(&self) -> Option<&X509NameRef> {
    unsafe {
        if (*self.as_ptr()).type_ != ffi::GEN_DIRNAME {
            return None;
        }
        #[cfg(boringssl)]
        let d = (*self.as_ptr()).d.ptr;
        #[cfg(not(boringssl))]
        let d = (*self.as_ptr()).d;
        Some(X509NameRef::from_const_ptr(d as *const _))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: ipaddress,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2200, End Line: 2216
/// Returns the contents of this `GeneralName` if it is an `iPAddress`.
pub fn ipaddress(&self) -> Option<&[u8]> {
    unsafe {
        if (*self.as_ptr()).type_ != ffi::GEN_IPADD {
            return None;
        }
        #[cfg(boringssl)]
        let d: *const ffi::ASN1_STRING = std::mem::transmute((*self.as_ptr()).d);
        #[cfg(not(boringssl))]
        let d = (*self.as_ptr()).d;
        let ptr = ASN1_STRING_get0_data(d as *mut _);
        let len = ffi::ASN1_STRING_length(d as *mut _);
        #[allow(clippy::unnecessary_cast)]
        Some(slice::from_raw_parts(ptr as *const u8, len as usize))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: distpoint,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: fullname,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2274, End Line: 2281
/// Returns the contents of this DistPointName if it is a fullname.
pub fn fullname(&self) -> Option<&StackRef<GeneralName>> {
    unsafe {
        if (*self.as_ptr()).type_ != 0 {
            return None;
        }
        StackRef::from_const_ptr_opt((*self.as_ptr()).name.fullname)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: method,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: location,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: x509,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: get_by_sname,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_idx,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: purpose,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: add_cert,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_default_paths,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: add_lookup,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: add_lookup,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_flags,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_purpose,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_param,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: hash_dir,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: add_dir,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: file,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: load_cert_file,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: load_crl_file,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: objects,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: all_certificates,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_hostflags,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_flags,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: clear_flags,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: flags,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_host,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_email,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_ip,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_time,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_depth,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_auth_level,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: auth_level,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: set_purpose,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-errors\build.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-errors\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-errors\tests\test.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-macros\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\build\cfgs.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\build\find_normal.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\build\find_vendored.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\build\main.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\build\run_bindgen.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\aes.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\asn1.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\bio.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\bn.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\cms.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\crypto.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\dtls1.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\ec.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\err.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\evp.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\aes.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\asn1.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\bio.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\bn.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\cmac.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\cms.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\conf.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\crypto.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\dh.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\dsa.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\ec.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\err.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\evp.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\hmac.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\kdf.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\object.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\ocsp.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\params.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\pem.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\pkcs12.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\pkcs7.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\poly1305.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\provider.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\rand.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\rsa.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\safestack.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\sha.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\srtp.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\ssl.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\stack.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\tls1.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\x509.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\x509v3.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\x509_vfy.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\lib.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: init,  File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\lib.rs
Potential Overunsafe：false

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\macros.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\obj_mac.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\ocsp.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\pem.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\pkcs7.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\rsa.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\sha.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\srtp.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\ssl.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\ssl3.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\tls1.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\x509.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\x509v3.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\x509_vfy.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\systest\build.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\systest\src\main.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\benches\bench.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: next,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: next_back,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: new,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 406, End Line: 413
/// Construct an empty vector
#[inline]
pub fn new() -> SmallVec<A> {
    unsafe {
        SmallVec {
            capacity: 0,
            data: SmallVecData::from_inline(mem::uninitialized()),
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_vec,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 448, End Line: 470
/// Construct a new `SmallVec` from a `Vec<A::Item>`.
///
/// Elements will be copied to the inline buffer if vec.capacity() <= A::size().
///
/// ```rust
/// use smallvec::SmallVec;
///
/// let vec = vec![1, 2, 3, 4, 5];
/// let small_vec: SmallVec<[_; 3]> = SmallVec::from_vec(vec);
///
/// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
/// ```
#[inline]
pub fn from_vec(mut vec: Vec<A::Item>) -> SmallVec<A> {
    if vec.capacity() <= A::size() {
        unsafe {
            let mut data = SmallVecData::<A>::from_inline(mem::uninitialized());
            let len = vec.len();
            vec.set_len(0);
            ptr::copy_nonoverlapping(vec.as_ptr(), data.inline_mut().ptr_mut(), len);
            SmallVec { capacity: len, data }
        }
    } else {
        let (ptr, cap, len) = (vec.as_mut_ptr(), vec.capacity(), vec.len());
        mem::forget(vec);
        SmallVec {
            capacity: cap,
            data: SmallVecData::from_heap(ptr, len),
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_buf_and_len,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: triple,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 569, End Line: 578
/// Returns a tuple with (data ptr, len, capacity)
/// Useful to get all SmallVec properties with a single check of the current storage variant.
#[inline]
fn triple(&self) -> (*const A::Item, usize, usize) {
    unsafe {
        if self.spilled() {
            let (ptr, len) = self.data.heap();
            (ptr, len, self.capacity)
        } else {
            (self.data.inline().ptr(), self.capacity, A::size())
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: triple_mut,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 582, End Line: 591
/// Returns a tuple with (data ptr, len ptr, capacity)
#[inline]
fn triple_mut(&mut self) -> (*mut A::Item, &mut usize, usize) {
    unsafe {
        if self.spilled() {
            let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();
            (ptr, len_ptr, self.capacity)
        } else {
            (self.data.inline_mut().ptr_mut(), &mut self.capacity, A::size())
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: drain,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 600, End Line: 613
/// Empty the vector and return an iterator over its former contents.
pub fn drain(&mut self) -> Drain<A::Item> {
    unsafe {
        let ptr = self.as_mut_ptr();
        let current_len = self.len();
        self.set_len(0);
        let slice = slice::from_raw_parts_mut(ptr, current_len);
        Drain { iter: slice.iter_mut() }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: pop,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 631, End Line: 641
/// Remove an item from the end of the vector and return it, or None if empty.
#[inline]
pub fn pop(&mut self) -> Option<A::Item> {
    unsafe {
        let (ptr, len_ptr, _) = self.triple_mut();
        if *len_ptr == 0 {
            return None;
        }
        let last_index = *len_ptr - 1;
        *len_ptr = last_index;
        Some(ptr::read(ptr.offset(last_index as isize)))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: grow,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 646, End Line: 670
/// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
///
/// Panics if `new_cap` is less than the vector's length.
pub fn grow(&mut self, new_cap: usize) {
    unsafe {
        let (ptr, &mut len, cap) = self.triple_mut();
        let unspilled = !self.spilled();
        assert!(new_cap >= len);
        if new_cap <= self.inline_size() {
            if unspilled {
                return;
            }
            self.data = SmallVecData::from_inline(mem::uninitialized());
            ptr::copy_nonoverlapping(ptr, self.data.inline_mut().ptr_mut(), len);
        } else if new_cap != cap {
            let mut vec = Vec::with_capacity(new_cap);
            let new_alloc = vec.as_mut_ptr();
            mem::forget(vec);
            ptr::copy_nonoverlapping(ptr, new_alloc, len);
            self.data = SmallVecData::from_heap(new_alloc, len);
            self.capacity = new_cap;
            if unspilled {
                return;
            }
        }
        deallocate(ptr, cap);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: shrink_to_fit,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 710, End Line: 726
/// Shrink the capacity of the vector as much as possible.
///
/// When possible, this will move data from an external heap buffer to the vector's inline
/// storage.
pub fn shrink_to_fit(&mut self) {
    if !self.spilled() {
        return;
    }
    let len = self.len();
    if self.inline_size() >= len {
        unsafe {
            let (ptr, len) = self.data.heap();
            self.data = SmallVecData::from_inline(mem::uninitialized());
            ptr::copy_nonoverlapping(ptr, self.data.inline_mut().ptr_mut(), len);
            deallocate(ptr, self.capacity);
            self.capacity = len;
        }
    } else if self.capacity() > len {
        self.grow(len);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: truncate,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 735, End Line: 744
/// Shorten the vector, keeping the first `len` elements and dropping the rest.
///
/// If `len` is greater than or equal to the vector's current length, this has no
/// effect.
///
/// This does not re-allocate.  If you want the vector's capacity to shrink, call
/// `shrink_to_fit` after truncating.
pub fn truncate(&mut self, len: usize) {
    unsafe {
        let (ptr, len_ptr, _) = self.triple_mut();
        while len < *len_ptr {
            let last_index = *len_ptr - 1;
            *len_ptr = last_index;
            ptr::drop_in_place(ptr.offset(last_index as isize));
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: swap_remove,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 8 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: remove,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 782, End Line: 793
/// Remove and return the element at position `index`, shifting all elements after it to the
/// left.
///
/// Panics if `index` is out of bounds.
pub fn remove(&mut self, index: usize) -> A::Item {
    unsafe {
        let (mut ptr, len_ptr, _) = self.triple_mut();
        let len = *len_ptr;
        assert!(index < len);
        *len_ptr = len - 1;
        ptr = ptr.offset(index as isize);
        let item = ptr::read(ptr);
        ptr::copy(ptr.offset(1), ptr, len - index - 1);
        item
    }
}



-----------------------------------------------------------------
Checking unsafe block with 7 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: insert,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 798, End Line: 810
/// Insert an element at position `index`, shifting all elements after it to the right.
///
/// Panics if `index` is out of bounds.
pub fn insert(&mut self, index: usize, element: A::Item) {
    self.reserve(1);
    unsafe {
        let (mut ptr, len_ptr, _) = self.triple_mut();
        let len = *len_ptr;
        assert!(index <= len);
        *len_ptr = len + 1;
        ptr = ptr.offset(index as isize);
        ptr::copy(ptr, ptr.offset(1), len - index);
        ptr::write(ptr, element);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 9 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: insert_many,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 814, End Line: 856
/// Insert multiple elements at position `index`, shifting all following elements toward the
/// back.
pub fn insert_many<I: IntoIterator<Item = A::Item>>(
    &mut self,
    index: usize,
    iterable: I,
) {
    let iter = iterable.into_iter();
    if index == self.len() {
        return self.extend(iter);
    }
    let (lower_size_bound, _) = iter.size_hint();
    assert!(lower_size_bound <= std::isize::MAX as usize);
    assert!(index + lower_size_bound >= index);
    self.reserve(lower_size_bound);
    unsafe {
        let old_len = self.len();
        assert!(index <= old_len);
        let mut ptr = self.as_mut_ptr().offset(index as isize);
        ptr::copy(ptr, ptr.offset(lower_size_bound as isize), old_len - index);
        self.set_len(index);
        let mut num_added = 0;
        for element in iter {
            let mut cur = ptr.offset(num_added as isize);
            if num_added >= lower_size_bound {
                self.reserve(1);
                ptr = self.as_mut_ptr().offset(index as isize);
                cur = ptr.offset(num_added as isize);
                ptr::copy(cur, cur.offset(1), old_len - index);
            }
            ptr::write(cur, element);
            num_added += 1;
        }
        if num_added < lower_size_bound {
            ptr::copy(
                ptr.offset(lower_size_bound as isize),
                ptr.offset(num_added as isize),
                old_len - index,
            );
        }
        self.set_len(old_len + num_added);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: into_vec,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 860, End Line: 871
/// Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto
/// the heap.
pub fn into_vec(self) -> Vec<A::Item> {
    if self.spilled() {
        unsafe {
            let (ptr, len) = self.data.heap();
            let v = Vec::from_raw_parts(ptr, len, self.capacity);
            mem::forget(self);
            v
        }
    } else {
        self.into_iter().collect()
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: into_inner,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: dedup_by,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 913, End Line: 941
/// Removes consecutive duplicate elements using the given equality relation.
pub fn dedup_by<F>(&mut self, mut same_bucket: F)
where
    F: FnMut(&mut A::Item, &mut A::Item) -> bool,
{
    let len = self.len();
    if len <= 1 {
        return;
    }
    let ptr = self.as_mut_ptr();
    let mut w: usize = 1;
    unsafe {
        for r in 1..len {
            let p_r = ptr.offset(r as isize);
            let p_wm1 = ptr.offset((w - 1) as isize);
            if !same_bucket(&mut *p_r, &mut *p_wm1) {
                if r != w {
                    let p_w = p_wm1.offset(1);
                    mem::swap(&mut *p_r, &mut *p_w);
                }
                w += 1;
            }
        }
    }
    self.truncate(w);
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_slice,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 1036, End Line: 1056
/// Copy the elements from a slice into a new `SmallVec`.
///
/// For slices of `Copy` types, this is more efficient than `SmallVec::from(slice)`.
pub fn from_slice(slice: &[A::Item]) -> Self {
    let len = slice.len();
    if len <= A::size() {
        SmallVec {
            capacity: len,
            data: SmallVecData::from_inline(unsafe {
                let mut data: A = mem::uninitialized();
                ptr::copy_nonoverlapping(slice.as_ptr(), data.ptr_mut(), len);
                data
            }),
        }
    } else {
        let mut b = slice.to_vec();
        let (ptr, cap) = (b.as_mut_ptr(), b.capacity());
        mem::forget(b);
        SmallVec {
            capacity: cap,
            data: SmallVecData::from_heap(ptr, len),
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: insert_from_slice,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_elem,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 1111, End Line: 1127
/// Creates a `SmallVec` with `n` copies of `elem`.
/// ```
/// use smallvec::SmallVec;
///
/// let v = SmallVec::<[char; 128]>::from_elem('d', 2);
/// assert_eq!(v, SmallVec::from_buf(['d', 'd']));
/// ```
pub fn from_elem(elem: A::Item, n: usize) -> Self {
    if n > A::size() {
        vec![elem; n].into()
    } else {
        let mut v = SmallVec::<A>::new();
        unsafe {
            let (ptr, len_ptr, _) = v.triple_mut();
            let mut local_len = SetLenOnDrop::new(len_ptr);
            for i in 0..n as isize {
                ::std::ptr::write(ptr.offset(i), elem.clone());
                local_len.increment_len(1);
            }
        }
        v
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: deref,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 2 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: deref_mut,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: extend,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 1345, End Line: 1366
fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
    let mut iter = iterable.into_iter();
    let (lower_size_bound, _) = iter.size_hint();
    self.reserve(lower_size_bound);
    unsafe {
        let (ptr, len_ptr, cap) = self.triple_mut();
        let mut len = SetLenOnDrop::new(len_ptr);
        while len.get() < cap {
            if let Some(out) = iter.next() {
                ptr::write(ptr.offset(len.get() as isize), out);
                len.increment_len(1);
            } else {
                break;
            }
        }
    }
    for elem in iter {
        self.push(elem);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: into_iter,  File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 1513, End Line: 1524
fn into_iter(mut self) -> Self::IntoIter {
    unsafe {
        let len = self.len();
        self.set_len(0);
        IntoIter {
            data: self,
            current: 0,
            end: len,
        }
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\build.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: next,  File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: next_back,  File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_vec,  File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_buf_and_len,  File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: drain,  File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Start Line: 431, End Line: 440
/// Empty the vector and return an iterator over its former contents.
pub fn drain(&mut self) -> Drain<A::Item> {
    unsafe {
        let slice = slice::from_raw_parts_mut(self.as_mut_ptr(), self.len());
        self.set_len(0);
        Drain { iter: slice.iter_mut() }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: truncate,  File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Start Line: 470, End Line: 477
/// Shorten the vector, keeping the first `len` elements and dropping the rest.
///
/// If `len` is greater than or equal to the vector's current length, this has no
/// effect.
/// `shrink_to_fit` after truncating.
pub fn truncate(&mut self, len: usize) {
    unsafe {
        while len < self.length {
            self.length -= 1;
            ptr::drop_in_place(self.as_mut_ptr().padd(self.length));
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: swap_remove,  File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: remove,  File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Start Line: 517, End Line: 526
/// Remove and return the element at position `index`, shifting all elements after it to the
/// left.
///
/// Panics if `index` is out of bounds.
pub fn remove(&mut self, index: usize) -> A::Item {
    assert!(index < self.len());
    unsafe {
        self.length -= 1;
        let ptr = self.as_mut_ptr().padd(index);
        let item = ptr::read(ptr);
        ptr::copy(ptr.offset(1), ptr, self.length - index);
        item
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: insert,  File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Start Line: 531, End Line: 539
/// Insert an element at position `index`, shifting all elements after it to the right.
///
/// Panics if `index` is out of bounds.
pub fn insert(&mut self, index: usize, element: A::Item) {
    assert!(index < self.len() && self.len() < self.capacity());
    unsafe {
        let ptr = self.as_mut_ptr().padd(index);
        ptr::copy(ptr, ptr.offset(1), self.length - index);
        ptr::write(ptr, element);
        self.length += 1;
    }
}



-----------------------------------------------------------------
Checking unsafe block with 9 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: insert_many,  File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Start Line: 543, End Line: 585
/// Insert multiple elements at position `index`, shifting all following elements toward the
/// back.
pub fn insert_many<I: iter::IntoIterator<Item = A::Item>>(
    &mut self,
    index: usize,
    iterable: I,
) {
    let iter = iterable.into_iter();
    if index == self.len() {
        return self.extend(iter);
    }
    let (lower_size_bound, _) = iter.size_hint();
    assert!(lower_size_bound <= std::isize::MAX as usize);
    assert!(index + lower_size_bound >= index);
    assert!(self.len() + lower_size_bound <= self.capacity());
    unsafe {
        let old_len = self.len();
        assert!(index <= old_len);
        let mut ptr = self.as_mut_ptr().padd(index);
        ptr::copy(ptr, ptr.padd(lower_size_bound), old_len - index);
        self.set_len(index);
        let mut num_added = 0;
        for element in iter {
            let mut cur = ptr.padd(num_added);
            if num_added >= lower_size_bound {
                assert!(self.len() + 1 <= self.capacity());
                ptr = self.as_mut_ptr().padd(index);
                cur = ptr.padd(num_added);
                ptr::copy(cur, cur.padd(1), old_len - index);
            }
            ptr::write(cur, element);
            num_added += 1;
        }
        if num_added < lower_size_bound {
            ptr::copy(ptr.padd(lower_size_bound), ptr.padd(num_added), old_len - index);
        }
        self.set_len(old_len + num_added);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: into_inner,  File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: dedup_by,  File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Start Line: 629, End Line: 657
/// Removes consecutive duplicate elements using the given equality relation.
pub fn dedup_by<F>(&mut self, mut same_bucket: F)
where
    F: FnMut(&mut A::Item, &mut A::Item) -> bool,
{
    let len = self.len();
    if len <= 1 {
        return;
    }
    let ptr = self.as_mut_ptr();
    let mut w: usize = 1;
    unsafe {
        for r in 1..len {
            let p_r = ptr.offset(r as isize);
            let p_wm1 = ptr.offset((w - 1) as isize);
            if !same_bucket(&mut *p_r, &mut *p_wm1) {
                if r != w {
                    let p_w = p_wm1.offset(1);
                    mem::swap(&mut *p_r, &mut *p_w);
                }
                w += 1;
            }
        }
    }
    self.truncate(w);
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: from_slice,  File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 6 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: insert_from_slice,  File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Potential Overunsafe：false

File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Start Line: 688, End Line: 698
/// Copy elements from a slice into the vector at position `index`, shifting any following
/// elements toward the back.
///
/// For slices of `Copy` types, this is more efficient than `insert`.
pub fn insert_from_slice(&mut self, index: usize, slice: &[A::Item]) {
    assert!(index <= self.len() && self.len() + slice.len() <= self.capacity());
    unsafe {
        let len = self.len();
        let slice_ptr = slice.as_ptr();
        let ptr = self.as_mut_ptr().padd(index);
        ptr::copy(ptr, ptr.padd(slice.len()), len - index);
        ptr::copy_nonoverlapping(slice_ptr, ptr, slice.len());
        self.set_len(len + slice.len());
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: from_elem,  File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Start Line: 734, End Line: 746
/// Creates a `StackVec` with `n` copies of `elem`.
/// ```
/// use stackvector::StackVec;
///
/// let v = StackVec::<[char; 128]>::from_elem('d', 2);
/// assert_eq!(v, StackVec::from_buf(['d', 'd']));
/// ```
pub fn from_elem(elem: A::Item, n: usize) -> Self {
    assert!(n <= A::size());
    let mut v = StackVec::<A>::new();
    unsafe {
        let ptr = v.as_mut_ptr();
        let mut local_len = SetLenOnDrop::new(&mut v.length);
        for i in 0..n as isize {
            ptr::write(ptr.offset(i), elem.clone());
            local_len.increment_len(1);
        }
    }
    v
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: deref,  File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 1 statements, Complex: false, Unrelated Logic: false, With_SAFETY_comment: false, Name: deref_mut,  File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Potential Overunsafe：false

-----------------------------------------------------------------
Checking unsafe block with 5 statements, Complex: true, Unrelated Logic: true, With_SAFETY_comment: false, Name: extend,  File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Start Line: 896, End Line: 920
fn extend<I: iter::IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
    let mut iter = iterable.into_iter();
    let (lower_bound, upper_bound) = iter.size_hint();
    let upper_bound = upper_bound.expect("iterable must provide upper bound.");
    assert!(self.len() + upper_bound <= self.capacity());
    unsafe {
        let len = self.len();
        let ptr = self.as_mut_ptr().padd(len);
        let mut count = 0;
        while count < lower_bound {
            if let Some(out) = iter.next() {
                ptr::write(ptr.padd(count), out);
                count += 1;
            } else {
                break;
            }
        }
        self.set_len(len + count);
    }
    for elem in iter {
        self.push(elem);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, Complex: false, Unrelated Logic: true, With_SAFETY_comment: false, Name: into_iter,  File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Potential Overunsafe：true

File: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Start Line: 1057, End Line: 1068
fn into_iter(mut self) -> Self::IntoIter {
    unsafe {
        let len = self.len();
        self.set_len(0);
        IntoIter {
            data: self,
            current: 0,
            end: len,
        }
    }
}




--- Summary ---
Total functions: 10132
Total unsafe blocks: 975
Total unsafe blocks without SAFETY comment: 947
Inner Unsafe function ratio: 9.62%
Inner Unsafe function Without //SAFETY ratio: 9.35%
Inner Unsafe function Without //SAFETY and total Inner Unsafe function ratio: 97.13%
