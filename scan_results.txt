Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\build.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\examples\log.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\examples\ls-tree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\commitgraph\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\commitgraph\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\corpus\db.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\corpus\engine.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\corpus\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\corpus\run.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\corpus\trace.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\discover.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\hours\core.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\hours\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\hours\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\index\checkout.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\index\information.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\index\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\mailmap.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\net.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\organize.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\pack\create.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\pack\explode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\pack\index.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\pack\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\pack\multi_index.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\pack\receive.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\pack\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\query\db.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\query\engine\command.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\query\engine\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\query\engine\update.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\query\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\archive.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\attributes\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\attributes\query.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\attributes\validate_baseline.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\clean.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\clone.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\commitgraph\list.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\commitgraph\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\commitgraph\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\config.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\credential.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\dirty.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\exclude.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\fetch.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\fsck.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\index\entries.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\index\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\mailmap.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\odb.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\revision\explain.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\revision\list.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\revision\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\revision\previous_branches.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\revision\resolve.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\status.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\submodule.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\tree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gitoxide-core\src\repository\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\examples\clone.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\examples\init-repo-and-commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\examples\interrupt-handler-allows-graceful-shutdown.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\examples\reversible-interrupt-handlers.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\examples\stats.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\attribute_stack.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\clone\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\clone\checkout.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\clone\fetch\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\clone\fetch\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\clone\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\cache\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\cache\incubate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\cache\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\cache\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\cache\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\overrides.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\snapshot\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\snapshot\credential_helpers.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\snapshot\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\snapshot\_impls.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\keys.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\author.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\branch.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\checkout.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\clone.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\committer.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\core.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\credential.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\diff.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\extensions.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\fetch.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\gitoxide.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\http.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\index.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\mailmap.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\pack.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\protocol.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\push.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\safe.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\ssh.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\status.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\url.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\sections\user.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\config\tree\traits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\create.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\diff.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\dirwalk\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\dirwalk\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\dirwalk\options.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\discover.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\env.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\ext\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\ext\object_id.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\ext\reference.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\ext\rev_spec.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\ext\tree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\filter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\head\log.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\head\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\head\peel.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\id.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\interrupt.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: deregister, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\interrupt.rs 

Found method with unsafe block in deregister:
File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\interrupt.rs
Start Line: 32, End Line: 59
/// Remove all previously registered handlers, and assure the default behaviour is reinstated, if this is the last available instance.
///
/// Note that only the instantiation of the default behaviour can fail.
pub fn deregister(self) -> std::io::Result<()> {
    let mut hooks = REGISTERED_HOOKS.lock();
    let count = DEREGISTER_COUNT.fetch_sub(1, Ordering::SeqCst);
    if count > 1 || hooks.is_empty() {
        return Ok(());
    }
    if self.do_reset {
        super::reset();
    }
    for (_, hook_id) in hooks.iter() {
        signal_hook::low_level::unregister(*hook_id);
    }
    let hooks = hooks.drain(..);
    let mut default_hooks = DEFAULT_BEHAVIOUR_HOOKS.lock();
    for (sig, _) in hooks {
        #[allow(unsafe_code)]
        unsafe {
            default_hooks
                .push(
                    signal_hook::low_level::register(
                        sig,
                        move || {
                            signal_hook::low_level::emulate_default_handler(sig).ok();
                        },
                    )?,
                );
        }
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: init_handler, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\interrupt.rs 

Found function with unsafe block in init_handler:
File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\interrupt.rs
Start Line: 95, End Line: 144
/// Initialize a signal handler to listen to SIGINT and SIGTERM and trigger our [`trigger()`](super::trigger()) that way.
/// Also trigger `interrupt()` which promises to never use a Mutex, allocate or deallocate, or do anything else that's blocking.
/// Use `grace_count` to determine how often the termination signal can be received before it's terminal, e.g. 1 would only terminate
/// the application the second time the signal is received.
/// Note that only the `grace_count` and `interrupt` of the first call are effective, all others will be ignored.
///
/// Use the returned `Deregister` type to explicitly deregister hooks, or to do so automatically.
///
/// # Note
///
/// It will abort the process on second press and won't inform the user about this behaviour either as we are unable to do so without
/// deadlocking even when trying to write to stderr directly.
///
/// SAFETY: `interrupt()` will be called from a signal handler. See [`signal_hook::low_level::register()`] for details about.
#[allow(unsafe_code, clippy::missing_safety_doc)]
pub unsafe fn init_handler(
    grace_count: usize,
    interrupt: impl Fn() + Send + Sync + Clone + 'static,
) -> io::Result<Deregister> {
    let prev_count = DEREGISTER_COUNT.fetch_add(1, Ordering::SeqCst);
    if prev_count != 0 {
        let _guard = REGISTERED_HOOKS.lock();
        return Ok(Deregister::default());
    }
    let mut guard = REGISTERED_HOOKS.lock();
    if !guard.is_empty() {
        return Ok(Deregister::default());
    }
    let mut hooks = Vec::with_capacity(signal_hook::consts::TERM_SIGNALS.len());
    for sig in signal_hook::consts::TERM_SIGNALS {
        let interrupt = interrupt.clone();
        let action = move || {
            static INTERRUPT_COUNT: AtomicUsize = AtomicUsize::new(0);
            if !super::is_triggered() {
                INTERRUPT_COUNT.store(0, Ordering::SeqCst);
            }
            let msg_idx = INTERRUPT_COUNT.fetch_add(1, Ordering::SeqCst);
            if msg_idx == grace_count {
                gix_tempfile::registry::cleanup_tempfiles_signal_safe();
                signal_hook::low_level::emulate_default_handler(*sig).ok();
            }
            interrupt();
            super::trigger();
        };
        #[allow(unsafe_code)]
        unsafe {
            let hook_id = signal_hook::low_level::register(*sig, action)?;
            hooks.push((*sig, hook_id));
        }
    }
    for hook_id in DEFAULT_BEHAVIOUR_HOOKS.lock().drain(..) {
        signal_hook::low_level::unregister(hook_id);
    }
    gix_tempfile::signal::setup(gix_tempfile::signal::handler::Mode::None);
    *guard = hooks;
    Ok(Deregister::default())
}



Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\mailmap.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\blob.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\errors.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\impls.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\peel.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\tag.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\tree\diff\change.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\tree\diff\for_each.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\tree\diff\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\tree\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\object\tree\traverse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\open\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\open\options.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\open\permissions.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\open\repository.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\path.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\pathspec.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\prelude.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\progress.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\push.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\reference\edits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\reference\errors.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\reference\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\reference\log.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\reference\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\reference\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\build.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connect.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\fetch\config.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\fetch\error.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\fetch\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\fetch\negotiate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\fetch\receive_pack.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\fetch\update_refs\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\fetch\update_refs\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\fetch\update_refs\update.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\connection\ref_map.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\errors.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\fetch.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\name.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\save.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\url\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\url\rewrite.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\remote\url\scheme_permission.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\attributes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\cache.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\config\branch.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\config\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\config\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\config\transport.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\diff.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\dirwalk.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\filter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\graph.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\identity.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\impls.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\index.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\kind.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\location.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\mailmap.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\object.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\pathspec.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\permissions.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\reference.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\revision.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\shallow.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\state.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\submodule.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\thread_safe.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\repository\worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\revision\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\revision\spec\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\revision\spec\parse\delegate\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\revision\spec\parse\delegate\navigate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\revision\spec\parse\delegate\revision.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\revision\spec\parse\error.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\revision\spec\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\revision\spec\parse\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\revision\walk.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\shallow.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\state.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\status\index_worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\status\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\status\platform.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\submodule\errors.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\submodule\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\tag.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\worktree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\src\worktree\proxy.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\clone\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\commit\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\config\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\config\tree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\diff\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\gix-init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\gix.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\head\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\id\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\init\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\interrupt.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\object\blob.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\object\commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\object\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\object\tree\diff.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\object\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\reference\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\reference\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\remote\connect.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\remote\fetch.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\remote\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\remote\ref_map.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\remote\save.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\config\config_snapshot\credential_helpers.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\config\config_snapshot\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\config\identity.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\config\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\config\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\config\transport_options.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\excludes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\filter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\object.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\open.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\pathspec.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\reference.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\shallow.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\state.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\submodule.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\repository\worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\revision\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\revision\spec\from_bytes\ambiguous.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\revision\spec\from_bytes\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\revision\spec\from_bytes\peel.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\revision\spec\from_bytes\reflog.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\revision\spec\from_bytes\regex.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\revision\spec\from_bytes\traverse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\revision\spec\from_bytes\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\revision\spec\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\status\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\submodule\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix\tests\util\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-actor\src\identity.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-actor\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-actor\src\signature\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-actor\src\signature\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-actor\tests\actor.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-actor\tests\identity\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-actor\tests\signature\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-archive\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-archive\src\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-archive\tests\archive.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\fuzz\fuzz_targets\fuzz_search.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\assignment.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\name.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\search\attributes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\search\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\search\outcome.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\search\refmap.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\source.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\src\state.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\tests\assignment\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\tests\attributes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\tests\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\tests\search\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-attributes\tests\state\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-bitmap\src\ewah.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-bitmap\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-blame\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-blame\tests\blame.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-chunk\src\file\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-chunk\src\file\index.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-chunk\src\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-chunk\src\file\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-chunk\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-command\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-command\tests\command.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\fuzz\fuzz_targets\fuzz_file.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\src\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\src\file\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\src\file\commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\src\file\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\src\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\src\file\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\src\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\src\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\tests\access\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-commitgraph\tests\commitgraph.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\benches\large_config_file.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\fuzz\fuzz_targets\fuzz_file.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\fuzz\fuzz_targets\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\access\comfort.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\access\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\access\mutate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\access\raw.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\access\read_only.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\impls.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\includes\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\includes\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\init\comfort.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\init\from_env.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\init\from_paths.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\init\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\init\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\meta.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\mutable\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\mutable\multi_value.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\mutable\section.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\mutable\value.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\section\body.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\section\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\file\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\key.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\lookup.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\comment.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\error.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\event.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\events.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\nom\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\nom\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\section\header.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\section\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\section\unvalidated.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\parse\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\source.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\value\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\src\value\normalize.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\config.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\access\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\access\mutate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\access\raw\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\access\raw\raw_multi_value.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\access\raw\raw_value.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\access\raw\set_existing_raw_value.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\access\raw\set_raw_value.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\access\read_only.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\impls\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\comfort.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\from_env.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\from_paths\includes\conditional\gitdir\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\from_paths\includes\conditional\gitdir\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\from_paths\includes\conditional\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\from_paths\includes\conditional\onbranch.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\from_paths\includes\unconditional.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\from_paths\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\from_str.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\init\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\mutable\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\mutable\multi_value.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\mutable\section.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\mutable\value.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\resolve_includes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\file\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\key\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\mem.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\parse\error.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\parse\from_bytes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\parse\section.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\source\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\value\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config\tests\value\normalize.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\fuzz\fuzz_targets\fuzz_value.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\src\boolean.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\src\color.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\src\integer.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\src\path.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: home_for_user, with_SAFETY_comment: true, file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\src\path.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: home_for_user, with_SAFETY_comment: true, file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\src\path.rs 

Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\src\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\tests\value\boolean.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\tests\value\color.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\tests\value\integer.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\tests\value\main.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-config-value\tests\value\path.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\examples\custom-helper.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\examples\git-credential-lite.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\examples\invoke-git-credential.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\src\helper\cascade.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\src\helper\invoke.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\src\helper\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\src\program\main.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\src\program\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\src\protocol\context\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\src\protocol\context\serde.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\src\protocol\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\tests\credentials.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\tests\helper\cascade.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\tests\helper\context.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\tests\helper\invoke.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\tests\helper\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\tests\program\from_custom_definition.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\tests\program\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\tests\protocol\context.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-credentials\tests\protocol\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\fuzz\fuzz_targets\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\src\time\format.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\src\time\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\src\time\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\src\time\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\tests\date.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\tests\time\baseline.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\tests\time\format.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\tests\time\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-date\tests\time\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\blob\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\blob\pipeline.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\blob\platform.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\rewrites\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\rewrites\tracker.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\tree\changes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\tree\recorder.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\src\tree\visit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\tests\blob\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\tests\blob\pipeline.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\tests\blob\platform.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\tests\diff.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\tests\rewrites\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\tests\rewrites\tracker.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-diff\tests\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\src\entry.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\src\walk\classify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\src\walk\function.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\src\walk\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\src\walk\readdir.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\tests\dir.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\tests\dir_walk_cwd.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\tests\walk\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-dir\tests\walk_utils\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\src\is.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\src\path.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\src\repository.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\src\upwards\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\src\upwards\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\src\upwards\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\tests\discover.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\tests\isolated.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\tests\is_git\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\tests\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\tests\path\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\tests\upwards\ceiling_dirs.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-discover\tests\upwards\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\cache.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\fs.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\hash.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\interrupt.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\parallel\eager_iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\parallel\in_order.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\parallel\in_parallel.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: in_parallel_with_slice, with_SAFETY_comment: true, file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\parallel\in_parallel.rs 

Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\parallel\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\parallel\reduce.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\parallel\serial.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\progress.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\threading.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\zlib\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\zlib\stream\deflate\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\zlib\stream\deflate\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\zlib\stream\inflate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\src\zlib\stream\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\tests\features.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\tests\hash.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\tests\parallel\in_order_iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\tests\parallel\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\tests\parallel_shared.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\tests\parallel_shared_threaded.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\tests\parallel_threaded.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\tests\pipe.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-features\tests\trace\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fetchhead\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\examples\arrow.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\driver\apply.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\driver\delayed.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\driver\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\driver\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\driver\process\client.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\driver\process\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\driver\process\server.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\driver\shutdown.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\eol\convert_to_git.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\eol\convert_to_worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\eol\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\eol\utils.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\ident.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\pipeline\convert.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\pipeline\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\pipeline\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\worktree\encode_to_git.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: encode_to_git, with_SAFETY_comment: true, file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\worktree\encode_to_git.rs 

Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\worktree\encode_to_worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\worktree\encoding.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\src\worktree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\driver\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\eol\convert_to_git.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\eol\convert_to_worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\eol\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\filter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\ident\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\pipeline\convert_to_git.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\pipeline\convert_to_worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\pipeline\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-filter\tests\worktree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\src\capabilities.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\src\dir\create.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\src\dir\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\src\dir\remove.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\src\read_dir.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\src\snapshot.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\src\stack.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\src\symlink.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\tests\capabilities\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\tests\current_dir.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\tests\dir\create.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\tests\dir\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\tests\dir\remove.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\tests\fs.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\tests\read_dir\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fs\tests\stack\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fsck\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fsck\tests\connectivity\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-fsck\tests\fsck.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\src\pattern.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\src\search\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\src\search\pattern.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\src\wildmatch.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\tests\glob.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\tests\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\tests\pattern\matching.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\tests\pattern\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\tests\search\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\tests\search\pattern.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-glob\tests\wildmatch\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\src\kind.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\src\object_id.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\src\oid.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: try_from_bytes, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\src\oid.rs 

Found method with unsafe block in try_from_bytes:
File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\src\oid.rs
Start Line: 78, End Line: 88
/// Try to create a shared object id from a slice of bytes representing a hash `digest`
#[inline]
pub fn try_from_bytes(digest: &[u8]) -> Result<&Self, Error> {
    match digest.len() {
        20 => {
            Ok(#[allow(unsafe_code)] unsafe { &*(digest as *const [u8] as *const oid) })
        }
        len => Err(Error::InvalidByteSliceLength(len)),
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\src\prefix.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\tests\hash.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\tests\kind\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\tests\object_id\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\tests\oid\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hash\tests\prefix\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hashtable\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-hashtable\tests\hashtable.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ignore\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ignore\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ignore\src\search.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ignore\tests\ignore.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ignore\tests\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ignore\tests\search\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\access\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\access\sparse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\decode\entries.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\decode\header.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\decode\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\entry\flags.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\entry\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\entry\mode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\entry\stat.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\entry\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\end_of_index_entry\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\end_of_index_entry\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\end_of_index_entry\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\fs_monitor.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\index_entry_offset_table.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\link.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\resolve_undo.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\sparse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\tree\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\tree\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\tree\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\extension\untracked_cache.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\file\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\file\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\file\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\fs.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\src\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\entry\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\entry\mode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\entry\stat.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\entry\time.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\file\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\file\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\file\read.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\file\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\fs.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\index\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-index\tests\integrate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-lfs\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-lock\src\acquire.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-lock\src\commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-lock\src\file.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-lock\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-lock\tests\all.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-lock\tests\lock\file.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-lock\tests\lock\marker.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-lock\tests\lock\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-macros\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-macros\src\momo.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-macros\tests\macros.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-macros\tests\momo\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-macros\tests\momo\ux\error_if_ineffective.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-macros\tests\momo\ux\error_on_struct.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\src\entry.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\src\snapshot\entry.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\src\snapshot\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\src\snapshot\signature.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\src\snapshot\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\tests\mailmap.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\tests\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-mailmap\tests\snapshot\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-negotiate\src\consecutive.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-negotiate\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-negotiate\src\noop.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-negotiate\src\skipping.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-negotiate\tests\baseline\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-negotiate\tests\negotiate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-note\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\benches\decode_objects.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\fuzz\fuzz_targets\fuzz_commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\fuzz\fuzz_targets\fuzz_tag.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\fuzz\fuzz_targets\fuzz_tree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\blob.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\commit\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\commit\message\body.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\commit\message\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\commit\message\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\commit\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\commit\ref_iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\commit\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\data.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\encode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\kind.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\object\convert.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\object\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\tag\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\tag\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\tag\ref_iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\tag\write\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\tag\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\traits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\tree\ref_iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\src\tree\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\tests\commit\from_bytes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\tests\commit\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\tests\commit\message.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\tests\commit\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\tests\encode\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\tests\object.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\tests\object_ref\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\tests\tag\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-object\tests\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\alternate\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\alternate\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\cache.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\sink.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\handle.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\header.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\load_index.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\load_one.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\metrics.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\prefix.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\structure.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\dynamic\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\loose\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\loose\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\loose\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\loose\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\loose\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\store_impls\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\src\traits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\integrate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\alternate\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\find\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\header\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\regression\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\sink\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\store\compound.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\store\dynamic.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\store\linked.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\store\loose.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-odb\tests\odb\store\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\bundle\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\bundle\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\bundle\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\bundle\write\error.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\bundle\write\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\bundle\write\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\from_offsets.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\traverse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\traverse\resolve.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: into_child_iter, with_SAFETY_comment: true, file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\traverse\resolve.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: into_child_iter, with_SAFETY_comment: true, file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\traverse\resolve.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: deltas, with_SAFETY_comment: true, file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\traverse\resolve.rs 

Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\traverse\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\delta\tree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\lru.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\cache\object.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\delta.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\entry\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\entry\header.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\entry\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\file\decode\entry.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\file\decode\header.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\file\decode\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\file\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\file\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\header.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\input\bytes_to_entries.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\input\entries_to_bytes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\input\entry.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\input\lookup_ref_delta_objects.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\input\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\input\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\bytes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\count\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\count\objects\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\count\objects\reduce.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\count\objects\tree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\count\objects\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\count\objects\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\entry\iter_from_counts.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\entry\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\data\output\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\find_traits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\encode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\traverse\error.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\traverse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\traverse\reduce.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\traverse\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\traverse\with_index.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\traverse\with_lookup.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\write\error.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\index\write\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\lib.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: read_only, with_SAFETY_comment: true, file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\lib.rs 

Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\multi_index\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\multi_index\chunk.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\multi_index\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\multi_index\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\multi_index\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\multi_index\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\src\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\integrate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\bundle.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\data\file.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\data\header.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\data\input.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\data\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\data\output\count_and_entries.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\data\output\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\index.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\multi_index\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\multi_index\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\multi_index\verify.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pack\tests\pack\multi_index\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\encode\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\encode\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\encode\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\line\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\line\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\line\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\read\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\read\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\read\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\read\sidebands\async_io.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_fill_buf, with_SAFETY_comment: true, file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\read\sidebands\async_io.rs 

Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\read\sidebands\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\read\sidebands\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\write\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\write\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\src\write\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\tests\async-packetline.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\tests\blocking-packetline.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\tests\decode\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\tests\encode\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\tests\read\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\tests\read\sideband.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline\tests\write\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\encode\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\encode\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\encode\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\line\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\line\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\line\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\read\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\read\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\read\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\read\sidebands\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\read\sidebands\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\read\sidebands\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\write\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\write\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-packetline-blocking\src\write\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\src\convert.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\src\env\git\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\src\env\git\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\src\env\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\src\realpath.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\src\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\tests\convert\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\tests\convert\normalize.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\tests\path.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\tests\realpath\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-path\tests\util\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\fuzz\fuzz_targets\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\src\defaults.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\src\pattern.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\src\search\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\src\search\matching.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\src\search\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\tests\defaults.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\tests\normalize\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\tests\parse\invalid.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\tests\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\tests\parse\valid.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\tests\pathspec.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-pathspec\tests\search\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-prompt\examples\askpass.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-prompt\examples\credentials.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-prompt\examples\use-askpass.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-prompt\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-prompt\src\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-prompt\src\unix.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-prompt\tests\options\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-prompt\tests\prompt.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\command\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\command\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\arguments\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\arguments\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\arguments\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\delegate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\error.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\handshake.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\response\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\response\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\response\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\fetch_fn.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\handshake\function.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\handshake\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\handshake\refs\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\handshake\refs\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\handshake\refs\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\handshake\refs\shared.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\handshake\refs\tests.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: project_inner, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\handshake\refs\tests.rs 

Found method with unsafe block in project_inner:
File: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\handshake\refs\tests.rs
Start Line: 200, End Line: 205
fn project_inner(self: std::pin::Pin<&mut Self>) -> std::pin::Pin<&mut &'a [u8]> {
    #[allow(unsafe_code)] unsafe { std::pin::Pin::new(&mut self.get_unchecked_mut().0) }
}



Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\ls_refs.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\remote_progress.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\src\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\tests\async-protocol.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\tests\blocking-protocol.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\tests\fetch\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\tests\fetch\response.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\tests\fetch\v1.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\tests\fetch\v2.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-protocol\tests\remote_progress\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-quote\src\ansi_c.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-quote\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-quote\src\single.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-quote\tests\quote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-rebase\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\fuzz\fuzz_targets\fuzz_log.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\fuzz\fuzz_targets\fuzz_names.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\fuzz\fuzz_targets\fuzz_packed_buffer.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\fullname.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\log.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\name.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: new_unchecked, with_SAFETY_comment: true, file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\name.rs 

Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\namespace.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\peel.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\raw.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\log\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\log\line.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\log\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\loose\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\loose\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\loose\reference\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\loose\reference\logiter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\loose\reference\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\loose\reflog\create_or_update\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\loose\reflog.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\overlay_iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\packed.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\raw_ext.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\transaction\commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\transaction\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\file\transaction\prepare.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\general\handle\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\general\handle\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\general\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\general\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\packed\buffer.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\packed\decode\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\packed\decode.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\packed\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\packed\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\packed\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\store\packed\transaction.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\target.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\transaction\ext.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\src\transaction\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\log.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\reference.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\store\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\store\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\store\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\store\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\store\reflog.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\transaction\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\transaction\prepare_and_commit\create_or_update\collisions.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\transaction\prepare_and_commit\create_or_update\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\transaction\prepare_and_commit\delete.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\file\worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\fullname\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\namespace\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\packed\find.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\packed\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\packed\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\packed\open.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\reference\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\refs.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\store\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-ref\tests\transaction\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\fuzz\fuzz_targets\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\instruction.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\match_group\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\match_group\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\match_group\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\match_group\validate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\spec.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\src\write.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\impls\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\matching\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\match_group\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\parse\fetch.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\parse\invalid.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\parse\push.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\refspec.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\spec\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-refspec\tests\write\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\fuzz\fuzz_targets\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\src\describe.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\src\spec\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\src\spec\parse\delegate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\src\spec\parse\function.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: long_describe_prefix, with_SAFETY_comment: true, file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\src\spec\parse\function.rs 

Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\src\spec\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\describe\format.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\describe\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\revision.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\display.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\anchor\at_symbol.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\anchor\colon_symbol.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\anchor\describe.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\anchor\hash.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\anchor\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\anchor\refnames.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\kind.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\navigate\caret_symbol.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\navigate\colon_symbol.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\navigate\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revision\tests\spec\parse\navigate\tilde_symbol.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revwalk\src\graph\commit.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revwalk\src\graph\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revwalk\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revwalk\src\queue.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-revwalk\tests\revwalk.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-sec\src\identity.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-sec\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-sec\src\permission.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-sec\src\trust.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-sec\tests\identity\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-sec\tests\sec.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-sequencer\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\index_as_worktree\function.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\index_as_worktree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\index_as_worktree\recorder.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\index_as_worktree\traits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\index_as_worktree\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\index_as_worktree_with_renames\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\index_as_worktree_with_renames\recorder.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\index_as_worktree_with_renames\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\src\stack.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\tests\stack\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\tests\status\index_as_worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\tests\status\index_as_worktree_with_renames.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\tests\status\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-status\tests\worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-submodule\src\access.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-submodule\src\config.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-submodule\src\is_active_platform.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-submodule\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-submodule\tests\file\baseline.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-submodule\tests\file\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-submodule\tests\submodule.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\examples\delete-tempfiles-on-sigterm-interactive.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\examples\delete-tempfiles-on-sigterm.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\examples\try-deadlock-on-cleanup.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\src\forksafe.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\src\handle.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\src\registry.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\src\signal.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\tests\all.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\tests\registry.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\tests\tempfile\handle.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tempfile\tests\tempfile\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tix\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-trace\src\disabled.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-trace\src\enabled.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-trace\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-trace\tests\trace.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\async_io\bufread_ext.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\async_io\connect.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\async_io\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\async_io\request.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\async_io\traits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\bufread_ext.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\connect.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\file.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\http\curl\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\http\curl\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\http\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\http\redirect.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\http\reqwest\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\http\reqwest\remote.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\http\traits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\request.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\ssh\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\ssh\program_kind.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\ssh\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\blocking_io\traits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\capabilities.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\git\async_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\git\blocking_io.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\git\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\non_io_types.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\client\traits.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\tests\async-transport.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\tests\blocking-transport-http.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\tests\blocking-transport.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\tests\client\blocking_io\http\mock.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\tests\client\blocking_io\http\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\tests\client\blocking_io\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\tests\client\capabilities.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\tests\client\git.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-transport\tests\client\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\src\commit\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\src\commit\simple.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\src\commit\topo\init.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\src\commit\topo\iter.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\src\commit\topo\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\src\tree\breadthfirst.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\src\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\src\tree\recorder.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\tests\commit\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\tests\commit\simple.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\tests\commit\topo.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\tests\traverse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-traverse\tests\tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-tui\src\main.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\fuzz\fuzz_targets\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\src\expand_path.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\src\impls.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\src\parse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\src\scheme.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\access\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\baseline.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\expand_path\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\fuzzed.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\parse\file.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\parse\http.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\parse\invalid.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\parse\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\parse\ssh.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-url\tests\url.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\src\backoff.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\src\btoi.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\src\buffers.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\src\str.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\tests\backoff\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\tests\btoi\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\tests\buffers\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\tests\str\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-utils\tests\utils.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\src\path.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\src\reference.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\src\submodule.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\src\tag.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\tests\path\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\tests\reference\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\tests\submodule\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\tests\tag\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-validate\tests\validate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\src\stack\delegate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\src\stack\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\src\stack\platform.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\src\stack\state\attributes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\src\stack\state\ignore.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\src\stack\state\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\tests\integrate.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\tests\worktree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\tests\worktree\stack\attributes.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\tests\worktree\stack\create_directory.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\tests\worktree\stack\ignore.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree\tests\worktree\stack\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-state\src\checkout\chunk.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-state\src\checkout\entry.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-state\src\checkout\function.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-state\src\checkout\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-state\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-state\tests\state\checkout.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-state\tests\state\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-state\tests\worktree.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-stream\src\entry.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-stream\src\from_tree\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-stream\src\from_tree\traverse.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-stream\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-stream\src\protocol.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\gix-worktree-stream\tests\stream.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\ein.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\gix.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\plumbing\main.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\plumbing\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\plumbing\options\free.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\plumbing\options\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\plumbing\progress.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\porcelain\main.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\porcelain\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\porcelain\options.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\shared.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\src\uni.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\tests\tools\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\gitoxide-a807dd1ffb05efd177700d065095249e6c4b3c68\tests\tools\src\main.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\build.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\examples\mk_certs.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs
-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: true, name: new_encrypt, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs 

Found method with unsafe block in new_encrypt:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs
Start Line: 96, End Line: 112
/// Prepares a key for encryption.
///
/// # Failure
///
/// Returns an error if the key is not 128, 192, or 256 bits.
#[corresponds(AES_set_encrypt_key)]
pub fn new_encrypt(key: &[u8]) -> Result<AesKey, KeyError> {
    unsafe {
        assert!(key.len() <= c_int::MAX as usize / 8);
        let mut aes_key = MaybeUninit::uninit();
        let r = ffi::AES_set_encrypt_key(
            key.as_ptr() as *const _,
            key.len() as AesBitType * 8,
            aes_key.as_mut_ptr(),
        );
        if r == 0 { Ok(AesKey(aes_key.assume_init())) } else { Err(KeyError(())) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: true, name: new_decrypt, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs 

Found method with unsafe block in new_decrypt:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs
Start Line: 120, End Line: 137
/// Prepares a key for decryption.
///
/// # Failure
///
/// Returns an error if the key is not 128, 192, or 256 bits.
#[corresponds(AES_set_decrypt_key)]
pub fn new_decrypt(key: &[u8]) -> Result<AesKey, KeyError> {
    unsafe {
        assert!(key.len() <= c_int::MAX as usize / 8);
        let mut aes_key = MaybeUninit::uninit();
        let r = ffi::AES_set_decrypt_key(
            key.as_ptr() as *const _,
            key.len() as AesBitType * 8,
            aes_key.as_mut_ptr(),
        );
        if r == 0 { Ok(AesKey(aes_key.assume_init())) } else { Err(KeyError(())) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: false, name: aes_ige, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs 

Found function with unsafe block in aes_ige:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs
Start Line: 161, End Line: 180
/// Performs AES IGE encryption or decryption
///
/// AES IGE (Infinite Garble Extension) is a form of AES block cipher utilized in
/// OpenSSL.  Infinite Garble refers to propagating forward errors.  IGE, like other
/// block ciphers implemented for AES requires an initialization vector.  The IGE mode
/// allows a stream of blocks to be encrypted or decrypted without having the entire
/// plaintext available.  For more information, visit [AES IGE Encryption].
///
/// This block cipher uses 16 byte blocks.  The rust implementation will panic
/// if the input or output does not meet this 16-byte boundary.  Attention must
/// be made in this low level implementation to pad the value to the 128-bit boundary.
///
/// [AES IGE Encryption]: http://www.links.org/files/openssl-ige.pdf
///
/// # Panics
///
/// Panics if `in_` is not the same length as `out`, if that length is not a multiple of 16, or if
/// `iv` is not at least 32 bytes.
#[cfg(not(boringssl))]
#[cfg(not(osslconf = "OPENSSL_NO_DEPRECATED_3_0"))]
#[corresponds(AES_ige_encrypt)]
pub fn aes_ige(in_: &[u8], out: &mut [u8], key: &AesKey, iv: &mut [u8], mode: Mode) {
    unsafe {
        assert!(in_.len() == out.len());
        assert!(in_.len() % ffi::AES_BLOCK_SIZE as usize == 0);
        assert!(iv.len() >= ffi::AES_BLOCK_SIZE as usize * 2);
        let mode = match mode {
            Mode::Encrypt => ffi::AES_ENCRYPT,
            Mode::Decrypt => ffi::AES_DECRYPT,
        };
        ffi::AES_ige_encrypt(
            in_.as_ptr() as *const _,
            out.as_mut_ptr() as *mut _,
            in_.len(),
            &key.0,
            iv.as_mut_ptr() as *mut _,
            mode,
        );
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: true, name: wrap_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs 

Found function with unsafe block in wrap_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs
Start Line: 196, End Line: 219
/// Wrap a key, according to [RFC 3394](https://tools.ietf.org/html/rfc3394)
///
/// * `key`: The key-encrypting-key to use. Must be a encrypting key
/// * `iv`: The IV to use. You must use the same IV for both wrapping and unwrapping
/// * `out`: The output buffer to store the ciphertext
/// * `in_`: The input buffer, storing the key to be wrapped
///
/// Returns the number of bytes written into `out`
///
/// # Panics
///
/// Panics if either `out` or `in_` do not have sizes that are a multiple of 8, or if
/// `out` is not 8 bytes longer than `in_`
#[corresponds(AES_wrap_key)]
pub fn wrap_key(
    key: &AesKey,
    iv: Option<[u8; 8]>,
    out: &mut [u8],
    in_: &[u8],
) -> Result<usize, KeyError> {
    unsafe {
        assert!(out.len() >= in_.len() + 8);
        let written = ffi::AES_wrap_key(
            &key.0 as *const _ as *mut _,
            iv.as_ref().map_or(ptr::null(), |iv| iv.as_ptr() as *const _),
            out.as_ptr() as *mut _,
            in_.as_ptr() as *const _,
            in_.len() as AesSizeType,
        );
        if written <= 0 { Err(KeyError(())) } else { Ok(written as usize) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: true, name: unwrap_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs 

Found function with unsafe block in unwrap_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\aes.rs
Start Line: 235, End Line: 259
/// Unwrap a key, according to [RFC 3394](https://tools.ietf.org/html/rfc3394)
///
/// * `key`: The key-encrypting-key to decrypt the wrapped key. Must be a decrypting key
/// * `iv`: The same IV used for wrapping the key
/// * `out`: The buffer to write the unwrapped key to
/// * `in_`: The input ciphertext
///
/// Returns the number of bytes written into `out`
///
/// # Panics
///
/// Panics if either `out` or `in_` do not have sizes that are a multiple of 8, or
/// if `in_` is not 8 bytes longer than `out`
#[corresponds(AES_unwrap_key)]
pub fn unwrap_key(
    key: &AesKey,
    iv: Option<[u8; 8]>,
    out: &mut [u8],
    in_: &[u8],
) -> Result<usize, KeyError> {
    unsafe {
        assert!(out.len() + 8 <= in_.len());
        let written = ffi::AES_unwrap_key(
            &key.0 as *const _ as *mut _,
            iv.as_ref().map_or(ptr::null(), |iv| iv.as_ptr() as *const _),
            out.as_ptr() as *mut _,
            in_.as_ptr() as *const _,
            in_.len() as AesSizeType,
        );
        if written <= 0 { Err(KeyError(())) } else { Ok(written as usize) }
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: from_period, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs 

Found method with unsafe block in from_period:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Start Line: 314, End Line: 321
#[corresponds(X509_gmtime_adj)]
fn from_period(period: c_long) -> Result<Asn1Time, ErrorStack> {
    ffi::init();
    unsafe {
        let handle = cvt_p(ffi::X509_gmtime_adj(ptr::null_mut(), period))?;
        Ok(Asn1Time::from_ptr(handle))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: from_unix, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs 

Found method with unsafe block in from_unix:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Start Line: 330, End Line: 337
/// Creates a new time from the specified `time_t` value
#[corresponds(ASN1_TIME_set)]
pub fn from_unix(time: time_t) -> Result<Asn1Time, ErrorStack> {
    ffi::init();
    unsafe {
        let handle = cvt_p(ffi::ASN1_TIME_set(ptr::null_mut(), time))?;
        Ok(Asn1Time::from_ptr(handle))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: from_str_x509, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs 

Found method with unsafe block in from_str_x509:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Start Line: 358, End Line: 367
/// Creates a new time corresponding to the specified X509 time string.
///
/// Requires BoringSSL or OpenSSL 1.1.1 or newer.
#[corresponds(ASN1_TIME_set_string_X509)]
#[cfg(any(ossl111, boringssl))]
pub fn from_str_x509(s: &str) -> Result<Asn1Time, ErrorStack> {
    unsafe {
        let s = CString::new(s).unwrap();
        let time = Asn1Time::new()?;
        cvt(ffi::ASN1_TIME_set_string_X509(time.as_ptr(), s.as_ptr()))?;
        Ok(time)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: true, name: as_utf8, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs 

Found method with unsafe block in as_utf8:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Start Line: 440, End Line: 450
/// Converts the ASN.1 underlying format to UTF8
///
/// ASN.1 strings may utilize UTF-16, ASCII, BMP, or UTF8.  This is important to
/// consume the string in a meaningful way without knowing the underlying
/// format.
#[corresponds(ASN1_STRING_to_UTF8)]
pub fn as_utf8(&self) -> Result<OpensslString, ErrorStack> {
    unsafe {
        let mut ptr = ptr::null_mut();
        let len = ffi::ASN1_STRING_to_UTF8(&mut ptr, self.as_ptr());
        if len < 0 {
            return Err(ErrorStack::get());
        }
        Ok(OpensslString::from_ptr(ptr as *mut c_char))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: to_bn, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs 

Found method with unsafe block in to_bn:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Start Line: 541, End Line: 546
/// Converts the integer to a `BigNum`.
#[corresponds(ASN1_INTEGER_to_BN)]
pub fn to_bn(&self) -> Result<BigNum, ErrorStack> {
    unsafe {
        cvt_p(ffi::ASN1_INTEGER_to_BN(self.as_ptr(), ptr::null_mut()))
            .map(|p| BigNum::from_ptr(p))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: new_from_bytes, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs 

Found method with unsafe block in new_from_bytes:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Start Line: 626, End Line: 633
/// Creates an Asn1OctetString from bytes
pub fn new_from_bytes(value: &[u8]) -> Result<Self, ErrorStack> {
    ffi::init();
    unsafe {
        let s = cvt_p(ffi::ASN1_OCTET_STRING_new())?;
        ffi::ASN1_OCTET_STRING_set(s, value.as_ptr(), value.len().try_into().unwrap());
        Ok(Self::from_ptr(s))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: nid, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs 

Found method with unsafe block in nid:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Start Line: 711, End Line: 713
/// Returns the NID associated with this OID.
pub fn nid(&self) -> Nid {
    unsafe { Nid::from_raw(ffi::OBJ_obj2nid(self.as_ptr())) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_i64, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs 

Found method with unsafe block in get_i64:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\asn1.rs
Start Line: 765, End Line: 774
/// Get the value, if it fits in the required bounds.
#[corresponds(ASN1_ENUMERATED_get_int64)]
#[cfg(ossl110)]
pub fn get_i64(&self) -> Result<i64, ErrorStack> {
    let mut crl_reason = 0;
    unsafe {
        cvt(ffi::ASN1_ENUMERATED_get_int64(&mut crl_reason, self.as_ptr()))?;
    }
    Ok(crl_reason)
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\base64.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: encode_block, with_SAFETY_comment: true, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\base64.rs 

-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: decode_block, with_SAFETY_comment: true, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\base64.rs 

Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bio.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: get_buf, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bio.rs 

Found method with unsafe block in get_buf:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bio.rs
Start Line: 62, End Line: 68
pub fn get_buf(&self) -> &[u8] {
    unsafe {
        let mut ptr = ptr::null_mut();
        let len = ffi::BIO_get_mem_data(self.0, &mut ptr);
        slice::from_raw_parts(ptr as *const _ as *const _, len as usize)
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: new_secure, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in new_secure:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 115, End Line: 120
/// Returns a new secure `BigNumContext`.
#[corresponds(BN_CTX_secure_new)]
#[cfg(ossl110)]
pub fn new_secure() -> Result<BigNumContext, ErrorStack> {
    unsafe {
        ffi::init();
        cvt_p(ffi::BN_CTX_secure_new()).map(BigNumContext)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: add_word, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in add_word:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 168, End Line: 170
/// Adds a `u32` to `self`.
#[corresponds(BN_add_word)]
pub fn add_word(&mut self, w: u32) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::BN_add_word(self.as_ptr(), w as ffi::BN_ULONG)).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sub_word, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in sub_word:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 174, End Line: 176
/// Subtracts a `u32` from `self`.
#[corresponds(BN_sub_word)]
pub fn sub_word(&mut self, w: u32) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::BN_sub_word(self.as_ptr(), w as ffi::BN_ULONG)).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: mul_word, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in mul_word:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 180, End Line: 182
/// Multiplies a `u32` by `self`.
#[corresponds(BN_mul_word)]
pub fn mul_word(&mut self, w: u32) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::BN_mul_word(self.as_ptr(), w as ffi::BN_ULONG)).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: div_word, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in div_word:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 187, End Line: 196
/// Divides `self` by a `u32`, returning the remainder.
#[corresponds(BN_div_word)]
#[allow(clippy::useless_conversion)]
pub fn div_word(&mut self, w: u32) -> Result<u64, ErrorStack> {
    unsafe {
        let r = ffi::BN_div_word(self.as_ptr(), w.into());
        if r == ffi::BN_ULONG::MAX { Err(ErrorStack::get()) } else { Ok(r.into()) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: mod_word, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in mod_word:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 201, End Line: 210
/// Returns the result of `self` modulo `w`.
#[corresponds(BN_mod_word)]
#[allow(clippy::useless_conversion)]
pub fn mod_word(&self, w: u32) -> Result<u64, ErrorStack> {
    unsafe {
        let r = ffi::BN_mod_word(self.as_ptr(), w.into());
        if r == ffi::BN_ULONG::MAX { Err(ErrorStack::get()) } else { Ok(r.into()) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: rand_range, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in rand_range:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 215, End Line: 217
/// Places a cryptographically-secure pseudo-random nonnegative
/// number less than `self` in `rnd`.
#[corresponds(BN_rand_range)]
pub fn rand_range(&self, rnd: &mut BigNumRef) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::BN_rand_range(rnd.as_ptr(), self.as_ptr())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: pseudo_rand_range, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in pseudo_rand_range:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 222, End Line: 224
/// The cryptographically weak counterpart to `rand_in_range`.
#[cfg(not(osslconf = "OPENSSL_NO_DEPRECATED_3_0"))]
#[corresponds(BN_pseudo_rand_range)]
pub fn pseudo_rand_range(&self, rnd: &mut BigNumRef) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::BN_pseudo_rand_range(rnd.as_ptr(), self.as_ptr())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_bit, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in set_bit:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 231, End Line: 233
/// Sets bit `n`. Equivalent to `self |= (1 << n)`.
///
/// When setting a bit outside of `self`, it is expanded.
#[corresponds(BN_set_bit)]
#[allow(clippy::useless_conversion)]
pub fn set_bit(&mut self, n: i32) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::BN_set_bit(self.as_ptr(), n.into())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: clear_bit, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in clear_bit:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 240, End Line: 242
/// Clears bit `n`, setting it to 0. Equivalent to `self &= ~(1 << n)`.
///
/// When clearing a bit outside of `self`, an error is returned.
#[corresponds(BN_clear_bit)]
#[allow(clippy::useless_conversion)]
pub fn clear_bit(&mut self, n: i32) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::BN_clear_bit(self.as_ptr(), n.into())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: is_bit_set, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in is_bit_set:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 247, End Line: 249
/// Returns `true` if the `n`th bit of `self` is set to 1, `false` otherwise.
#[corresponds(BN_is_bit_set)]
#[allow(clippy::useless_conversion)]
pub fn is_bit_set(&self, n: i32) -> bool {
    unsafe { ffi::BN_is_bit_set(self.as_ptr(), n.into()) == 1 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: mask_bits, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in mask_bits:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 256, End Line: 258
/// Truncates `self` to the lowest `n` bits.
///
/// An error occurs if `self` is already shorter than `n` bits.
#[corresponds(BN_mask_bits)]
#[allow(clippy::useless_conversion)]
pub fn mask_bits(&mut self, n: i32) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::BN_mask_bits(self.as_ptr(), n.into())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: lshift1, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in lshift1:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 262, End Line: 264
/// Places `a << 1` in `self`.  Equivalent to `self * 2`.
#[corresponds(BN_lshift1)]
pub fn lshift1(&mut self, a: &BigNumRef) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::BN_lshift1(self.as_ptr(), a.as_ptr())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: rshift1, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in rshift1:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 268, End Line: 270
/// Places `a >> 1` in `self`. Equivalent to `self / 2`.
#[corresponds(BN_rshift1)]
pub fn rshift1(&mut self, a: &BigNumRef) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::BN_rshift1(self.as_ptr(), a.as_ptr())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: checked_add, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in checked_add:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 276, End Line: 278
/// Places `a + b` in `self`.  [`core::ops::Add`] is also implemented for `BigNumRef`.
///
/// [`core::ops::Add`]: struct.BigNumRef.html#method.add
#[corresponds(BN_add)]
pub fn checked_add(&mut self, a: &BigNumRef, b: &BigNumRef) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::BN_add(self.as_ptr(), a.as_ptr(), b.as_ptr())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: checked_sub, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in checked_sub:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 284, End Line: 286
/// Places `a - b` in `self`. [`core::ops::Sub`] is also implemented for `BigNumRef`.
///
/// [`core::ops::Sub`]: struct.BigNumRef.html#method.sub
#[corresponds(BN_sub)]
pub fn checked_sub(&mut self, a: &BigNumRef, b: &BigNumRef) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::BN_sub(self.as_ptr(), a.as_ptr(), b.as_ptr())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: lshift, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in lshift:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 291, End Line: 293
/// Places `a << n` in `self`.  Equivalent to `a * 2 ^ n`.
#[corresponds(BN_lshift)]
#[allow(clippy::useless_conversion)]
pub fn lshift(&mut self, a: &BigNumRef, n: i32) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::BN_lshift(self.as_ptr(), a.as_ptr(), n.into())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: rshift, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in rshift:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 298, End Line: 300
/// Places `a >> n` in `self`. Equivalent to `a / 2 ^ n`.
#[corresponds(BN_rshift)]
#[allow(clippy::useless_conversion)]
pub fn rshift(&mut self, a: &BigNumRef, n: i32) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::BN_rshift(self.as_ptr(), a.as_ptr(), n.into())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_negative, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in set_negative:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 311, End Line: 313
/// Sets the sign of `self`.  Pass true to set `self` to a negative.  False sets
/// `self` positive.
#[corresponds(BN_set_negative)]
pub fn set_negative(&mut self, negative: bool) {
    unsafe { ffi::BN_set_negative(self.as_ptr(), negative as c_int) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: ucmp, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in ucmp:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 328, End Line: 330
/// Compare the absolute values of `self` and `oth`.
///
/// # Examples
///
/// ```
/// # use openssl::bn::BigNum;
/// # use std::cmp::Ordering;
/// let s = -BigNum::from_u32(8).unwrap();
/// let o = BigNum::from_u32(8).unwrap();
///
/// assert_eq!(s.ucmp(&o), Ordering::Equal);
/// ```
#[corresponds(BN_ucmp)]
pub fn ucmp(&self, oth: &BigNumRef) -> Ordering {
    unsafe { ffi::BN_ucmp(self.as_ptr(), oth.as_ptr()).cmp(&0) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: is_odd, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in is_odd:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 348, End Line: 350
/// Returns `true` is `self` is odd.
#[corresponds(BN_is_odd)]
#[cfg(any(ossl110, boringssl, libressl350))]
pub fn is_odd(&self) -> bool {
    unsafe { ffi::BN_is_odd(self.as_ptr()) == 1 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: rand, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in rand:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 390, End Line: 400
/// Generates a cryptographically strong pseudo-random `BigNum`, placing it in `self`.
///
/// # Parameters
///
/// * `bits`: Length of the number in bits.
/// * `msb`: The desired properties of the most significant bit. See [`constants`].
/// * `odd`: If `true`, the generated number will be odd.
///
/// # Examples
///
/// ```
/// use openssl::bn::{BigNum, MsbOption};
/// use openssl::error::ErrorStack;
///
/// fn generate_random() -> Result< BigNum, ErrorStack > {
///    let mut big = BigNum::new()?;
///
///    // Generates a 128-bit odd random number
///    big.rand(128, MsbOption::MAYBE_ZERO, true);
///    Ok((big))
/// }
/// ```
///
/// [`constants`]: index.html#constants
#[corresponds(BN_rand)]
#[allow(clippy::useless_conversion)]
pub fn rand(&mut self, bits: i32, msb: MsbOption, odd: bool) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::BN_rand(self.as_ptr(), bits.into(), msb.0, odd as c_int)).map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: pseudo_rand, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in pseudo_rand:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 406, End Line: 416
/// The cryptographically weak counterpart to `rand`.  Not suitable for key generation.
#[cfg(not(osslconf = "OPENSSL_NO_DEPRECATED_3_0"))]
#[corresponds(BN_pseudo_rand)]
#[allow(clippy::useless_conversion)]
pub fn pseudo_rand(
    &mut self,
    bits: i32,
    msb: MsbOption,
    odd: bool,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::BN_pseudo_rand(self.as_ptr(), bits.into(), msb.0, odd as c_int))
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: generate_prime, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in generate_prime:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 442, End Line: 460
/// Generates a prime number, placing it in `self`.
///
/// # Parameters
///
/// * `bits`: The length of the prime in bits (lower bound).
/// * `safe`: If true, returns a "safe" prime `p` so that `(p-1)/2` is also prime.
/// * `add`/`rem`: If `add` is set to `Some(add)`, `p % add == rem` will hold, where `p` is the
///   generated prime and `rem` is `1` if not specified (`None`).
///
/// # Examples
///
/// ```
/// use openssl::bn::BigNum;
/// use openssl::error::ErrorStack;
///
/// fn generate_weak_prime() -> Result< BigNum, ErrorStack > {
///    let mut big = BigNum::new()?;
///
///    // Generates a 128-bit simple prime number
///    big.generate_prime(128, false, None, None);
///    Ok((big))
/// }
/// ```
#[corresponds(BN_generate_prime_ex)]
pub fn generate_prime(
    &mut self,
    bits: i32,
    safe: bool,
    add: Option<&BigNumRef>,
    rem: Option<&BigNumRef>,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::BN_generate_prime_ex(
                    self.as_ptr(),
                    bits as c_int,
                    safe as c_int,
                    add.map(|n| n.as_ptr()).unwrap_or(ptr::null_mut()),
                    rem.map(|n| n.as_ptr()).unwrap_or(ptr::null_mut()),
                    ptr::null_mut(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: checked_mul, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in checked_mul:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 467, End Line: 482
/// Places the result of `a * b` in `self`.
/// [`core::ops::Mul`] is also implemented for `BigNumRef`.
///
/// [`core::ops::Mul`]: struct.BigNumRef.html#method.mul
#[corresponds(BN_mul)]
pub fn checked_mul(
    &mut self,
    a: &BigNumRef,
    b: &BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::BN_mul(self.as_ptr(), a.as_ptr(), b.as_ptr(), ctx.as_ptr())).map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: checked_div, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in checked_div:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 489, End Line: 505
/// Places the result of `a / b` in `self`. The remainder is discarded.
/// [`core::ops::Div`] is also implemented for `BigNumRef`.
///
/// [`core::ops::Div`]: struct.BigNumRef.html#method.div
#[corresponds(BN_div)]
pub fn checked_div(
    &mut self,
    a: &BigNumRef,
    b: &BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::BN_div(
                    self.as_ptr(),
                    ptr::null_mut(),
                    a.as_ptr(),
                    b.as_ptr(),
                    ctx.as_ptr(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: checked_rem, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in checked_rem:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 509, End Line: 525
/// Places the result of `a % b` in `self`.
#[corresponds(BN_div)]
pub fn checked_rem(
    &mut self,
    a: &BigNumRef,
    b: &BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::BN_div(
                    ptr::null_mut(),
                    self.as_ptr(),
                    a.as_ptr(),
                    b.as_ptr(),
                    ctx.as_ptr(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: div_rem, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in div_rem:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 529, End Line: 546
/// Places the result of `a / b` in `self` and `a % b` in `rem`.
#[corresponds(BN_div)]
pub fn div_rem(
    &mut self,
    rem: &mut BigNumRef,
    a: &BigNumRef,
    b: &BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::BN_div(
                    self.as_ptr(),
                    rem.as_ptr(),
                    a.as_ptr(),
                    b.as_ptr(),
                    ctx.as_ptr(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sqr, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in sqr:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 550, End Line: 552
/// Places the result of `a²` in `self`.
#[corresponds(BN_sqr)]
pub fn sqr(
    &mut self,
    a: &BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::BN_sqr(self.as_ptr(), a.as_ptr(), ctx.as_ptr())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: nnmod, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in nnmod:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 557, End Line: 572
/// Places the result of `a mod m` in `self`.  As opposed to `div_rem`
/// the result is non-negative.
#[corresponds(BN_nnmod)]
pub fn nnmod(
    &mut self,
    a: &BigNumRef,
    m: &BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::BN_nnmod(self.as_ptr(), a.as_ptr(), m.as_ptr(), ctx.as_ptr()))
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: mod_add, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in mod_add:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 576, End Line: 593
/// Places the result of `(a + b) mod m` in `self`.
#[corresponds(BN_mod_add)]
pub fn mod_add(
    &mut self,
    a: &BigNumRef,
    b: &BigNumRef,
    m: &BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::BN_mod_add(
                    self.as_ptr(),
                    a.as_ptr(),
                    b.as_ptr(),
                    m.as_ptr(),
                    ctx.as_ptr(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: mod_sub, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in mod_sub:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 597, End Line: 614
/// Places the result of `(a - b) mod m` in `self`.
#[corresponds(BN_mod_sub)]
pub fn mod_sub(
    &mut self,
    a: &BigNumRef,
    b: &BigNumRef,
    m: &BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::BN_mod_sub(
                    self.as_ptr(),
                    a.as_ptr(),
                    b.as_ptr(),
                    m.as_ptr(),
                    ctx.as_ptr(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: mod_mul, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in mod_mul:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 618, End Line: 635
/// Places the result of `(a * b) mod m` in `self`.
#[corresponds(BN_mod_mul)]
pub fn mod_mul(
    &mut self,
    a: &BigNumRef,
    b: &BigNumRef,
    m: &BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::BN_mod_mul(
                    self.as_ptr(),
                    a.as_ptr(),
                    b.as_ptr(),
                    m.as_ptr(),
                    ctx.as_ptr(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: mod_sqr, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in mod_sqr:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 639, End Line: 654
/// Places the result of `a² mod m` in `self`.
#[corresponds(BN_mod_sqr)]
pub fn mod_sqr(
    &mut self,
    a: &BigNumRef,
    m: &BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::BN_mod_sqr(self.as_ptr(), a.as_ptr(), m.as_ptr(), ctx.as_ptr()))
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: mod_sqrt, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in mod_sqrt:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 658, End Line: 673
/// Places into `self` the modular square root of `a` such that `self^2 = a (mod p)`
#[corresponds(BN_mod_sqrt)]
pub fn mod_sqrt(
    &mut self,
    a: &BigNumRef,
    p: &BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt_p(ffi::BN_mod_sqrt(self.as_ptr(), a.as_ptr(), p.as_ptr(), ctx.as_ptr()))
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: exp, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in exp:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 677, End Line: 692
/// Places the result of `a^p` in `self`.
#[corresponds(BN_exp)]
pub fn exp(
    &mut self,
    a: &BigNumRef,
    p: &BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::BN_exp(self.as_ptr(), a.as_ptr(), p.as_ptr(), ctx.as_ptr())).map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: mod_exp, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in mod_exp:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 696, End Line: 713
/// Places the result of `a^p mod m` in `self`.
#[corresponds(BN_mod_exp)]
pub fn mod_exp(
    &mut self,
    a: &BigNumRef,
    p: &BigNumRef,
    m: &BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::BN_mod_exp(
                    self.as_ptr(),
                    a.as_ptr(),
                    p.as_ptr(),
                    m.as_ptr(),
                    ctx.as_ptr(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: mod_inverse, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in mod_inverse:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 717, End Line: 732
/// Places the inverse of `a` modulo `n` in `self`.
#[corresponds(BN_mod_inverse)]
pub fn mod_inverse(
    &mut self,
    a: &BigNumRef,
    n: &BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt_p(ffi::BN_mod_inverse(self.as_ptr(), a.as_ptr(), n.as_ptr(), ctx.as_ptr()))
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: gcd, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in gcd:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 736, End Line: 751
/// Places the greatest common denominator of `a` and `b` in `self`.
#[corresponds(BN_gcd)]
pub fn gcd(
    &mut self,
    a: &BigNumRef,
    b: &BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::BN_gcd(self.as_ptr(), a.as_ptr(), b.as_ptr(), ctx.as_ptr())).map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: is_prime, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in is_prime:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 763, End Line: 773
/// Checks whether `self` is prime.
///
/// Performs a Miller-Rabin probabilistic primality test with `checks` iterations.
///
/// # Return Value
///
/// Returns `true` if `self` is prime with an error probability of less than `0.25 ^ checks`.
#[cfg(not(osslconf = "OPENSSL_NO_DEPRECATED_3_0"))]
#[corresponds(BN_is_prime_ex)]
#[allow(clippy::useless_conversion)]
pub fn is_prime(
    &self,
    checks: i32,
    ctx: &mut BigNumContextRef,
) -> Result<bool, ErrorStack> {
    unsafe {
        cvt_n(
                ffi::BN_is_prime_ex(
                    self.as_ptr(),
                    checks.into(),
                    ctx.as_ptr(),
                    ptr::null_mut(),
                ),
            )
            .map(|r| r != 0)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: is_prime_fasttest, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in is_prime_fasttest:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 787, End Line: 803
/// Checks whether `self` is prime with optional trial division.
///
/// If `do_trial_division` is `true`, first performs trial division by a number of small primes.
/// Then, like `is_prime`, performs a Miller-Rabin probabilistic primality test with `checks`
/// iterations.
///
/// # Return Value
///
/// Returns `true` if `self` is prime with an error probability of less than `0.25 ^ checks`.
#[cfg(not(osslconf = "OPENSSL_NO_DEPRECATED_3_0"))]
#[corresponds(BN_is_prime_fasttest_ex)]
#[allow(clippy::useless_conversion)]
pub fn is_prime_fasttest(
    &self,
    checks: i32,
    ctx: &mut BigNumContextRef,
    do_trial_division: bool,
) -> Result<bool, ErrorStack> {
    unsafe {
        cvt_n(
                ffi::BN_is_prime_fasttest_ex(
                    self.as_ptr(),
                    checks.into(),
                    ctx.as_ptr(),
                    do_trial_division as c_int,
                    ptr::null_mut(),
                ),
            )
            .map(|r| r != 0)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: to_vec, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in to_vec:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 818, End Line: 826
/// Returns a big-endian byte vector representation of the absolute value of `self`.
///
/// `self` can be recreated by using `from_slice`.
///
/// ```
/// # use openssl::bn::BigNum;
/// let s = -BigNum::from_u32(4543).unwrap();
/// let r = BigNum::from_u32(4543).unwrap();
///
/// let s_vec = s.to_vec();
/// assert_eq!(BigNum::from_slice(&s_vec).unwrap(), r);
/// ```
#[corresponds(BN_bn2bin)]
pub fn to_vec(&self) -> Vec<u8> {
    let size = self.num_bytes() as usize;
    let mut v = Vec::with_capacity(size);
    unsafe {
        ffi::BN_bn2bin(self.as_ptr(), v.as_mut_ptr());
        v.set_len(size);
    }
    v
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: to_vec_padded, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in to_vec_padded:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 851, End Line: 858
/// Returns a big-endian byte vector representation of the absolute value of `self` padded
/// to `pad_to` bytes.
///
/// If `pad_to` is less than `self.num_bytes()` then an error is returned.
///
/// `self` can be recreated by using `from_slice`.
///
/// ```
/// # use openssl::bn::BigNum;
/// let bn = BigNum::from_u32(0x4543).unwrap();
///
/// let bn_vec = bn.to_vec_padded(4).unwrap();
/// assert_eq!(&bn_vec, &[0, 0, 0x45, 0x43]);
///
/// let r = bn.to_vec_padded(1);
/// assert!(r.is_err());
///
/// let bn = -BigNum::from_u32(0x4543).unwrap();
/// let bn_vec = bn.to_vec_padded(4).unwrap();
/// assert_eq!(&bn_vec, &[0, 0, 0x45, 0x43]);
/// ```
#[corresponds(BN_bn2binpad)]
#[cfg(any(ossl110, libressl340, boringssl))]
pub fn to_vec_padded(&self, pad_to: i32) -> Result<Vec<u8>, ErrorStack> {
    let mut v = Vec::with_capacity(pad_to as usize);
    unsafe {
        cvt(ffi::BN_bn2binpad(self.as_ptr(), v.as_mut_ptr(), pad_to))?;
        v.set_len(pad_to as usize);
    }
    Ok(v)
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: to_dec_str, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in to_dec_str:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 869, End Line: 874
/// Returns a decimal string representation of `self`.
///
/// ```
/// # use openssl::bn::BigNum;
/// let s = -BigNum::from_u32(12345).unwrap();
///
/// assert_eq!(&**s.to_dec_str().unwrap(), "-12345");
/// ```
#[corresponds(BN_bn2dec)]
pub fn to_dec_str(&self) -> Result<OpensslString, ErrorStack> {
    unsafe {
        let buf = cvt_p(ffi::BN_bn2dec(self.as_ptr()))?;
        Ok(OpensslString::from_ptr(buf))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: to_hex_str, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in to_hex_str:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 885, End Line: 890
/// Returns a hexadecimal string representation of `self`.
///
/// ```
/// # use openssl::bn::BigNum;
/// let s = -BigNum::from_u32(0x99ff).unwrap();
///
/// assert_eq!(s.to_hex_str().unwrap().to_uppercase(), "-99FF");
/// ```
#[corresponds(BN_bn2hex)]
pub fn to_hex_str(&self) -> Result<OpensslString, ErrorStack> {
    unsafe {
        let buf = cvt_p(ffi::BN_bn2hex(self.as_ptr()))?;
        Ok(OpensslString::from_ptr(buf))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: to_asn1_integer, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in to_asn1_integer:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 894, End Line: 899
/// Returns an `Asn1Integer` containing the value of `self`.
#[corresponds(BN_to_ASN1_INTEGER)]
pub fn to_asn1_integer(&self) -> Result<Asn1Integer, ErrorStack> {
    unsafe {
        cvt_p(ffi::BN_to_ASN1_INTEGER(self.as_ptr(), ptr::null_mut()))
            .map(|p| Asn1Integer::from_ptr(p))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_const_time, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in set_const_time:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 904, End Line: 906
/// Force constant time computation on this value.
#[corresponds(BN_set_flags)]
#[cfg(ossl110)]
pub fn set_const_time(&mut self) {
    unsafe { ffi::BN_set_flags(self.as_ptr(), ffi::BN_FLG_CONSTTIME) }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: is_const_time, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in is_const_time:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 911, End Line: 916
/// Returns true if `self` is in const time mode.
#[corresponds(BN_get_flags)]
#[cfg(ossl110)]
pub fn is_const_time(&self) -> bool {
    unsafe {
        let ret = ffi::BN_get_flags(self.as_ptr(), ffi::BN_FLG_CONSTTIME);
        ret == ffi::BN_FLG_CONSTTIME
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: is_secure, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in is_secure:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 921, End Line: 926
/// Returns true if `self` was created with [`BigNum::new_secure`].
#[corresponds(BN_get_flags)]
#[cfg(ossl110)]
pub fn is_secure(&self) -> bool {
    unsafe {
        let ret = ffi::BN_get_flags(self.as_ptr(), ffi::BN_FLG_SECURE);
        ret == ffi::BN_FLG_SECURE
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: from_u32, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in from_u32:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 953, End Line: 957
/// Creates a new `BigNum` with the given value.
#[corresponds(BN_set_word)]
pub fn from_u32(n: u32) -> Result<BigNum, ErrorStack> {
    BigNum::new()
        .and_then(|v| unsafe {
            cvt(ffi::BN_set_word(v.as_ptr(), n as ffi::BN_ULONG)).map(|_| v)
        })
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: false, name: from_dec_str, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in from_dec_str:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 961, End Line: 969
/// Creates a `BigNum` from a decimal string.
#[corresponds(BN_dec2bn)]
pub fn from_dec_str(s: &str) -> Result<BigNum, ErrorStack> {
    unsafe {
        ffi::init();
        let c_str = CString::new(s.as_bytes()).unwrap();
        let mut bn = ptr::null_mut();
        cvt(ffi::BN_dec2bn(&mut bn, c_str.as_ptr() as *const _))?;
        Ok(BigNum::from_ptr(bn))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: false, name: from_hex_str, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in from_hex_str:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 973, End Line: 981
/// Creates a `BigNum` from a hexadecimal string.
#[corresponds(BN_hex2bn)]
pub fn from_hex_str(s: &str) -> Result<BigNum, ErrorStack> {
    unsafe {
        ffi::init();
        let c_str = CString::new(s.as_bytes()).unwrap();
        let mut bn = ptr::null_mut();
        cvt(ffi::BN_hex2bn(&mut bn, c_str.as_ptr() as *const _))?;
        Ok(BigNum::from_ptr(bn))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: get_rfc2409_prime_768, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in get_rfc2409_prime_768:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 990, End Line: 995
/// Returns a constant used in IKE as defined in [`RFC 2409`].  This prime number is in
/// the order of magnitude of `2 ^ 768`.  This number is used during calculated key
/// exchanges such as Diffie-Hellman.  This number is labeled Oakley group id 1.
///
/// [`RFC 2409`]: https://tools.ietf.org/html/rfc2409#page-21
#[corresponds(BN_get_rfc2409_prime_768)]
#[cfg(not(boringssl))]
pub fn get_rfc2409_prime_768() -> Result<BigNum, ErrorStack> {
    unsafe {
        ffi::init();
        cvt_p(BN_get_rfc2409_prime_768(ptr::null_mut())).map(BigNum)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: get_rfc2409_prime_1024, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in get_rfc2409_prime_1024:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 1004, End Line: 1009
/// Returns a constant used in IKE as defined in [`RFC 2409`].  This prime number is in
/// the order of magnitude of `2 ^ 1024`.  This number is used during calculated key
/// exchanges such as Diffie-Hellman.  This number is labeled Oakly group 2.
///
/// [`RFC 2409`]: https://tools.ietf.org/html/rfc2409#page-21
#[corresponds(BN_get_rfc2409_prime_1024)]
#[cfg(not(boringssl))]
pub fn get_rfc2409_prime_1024() -> Result<BigNum, ErrorStack> {
    unsafe {
        ffi::init();
        cvt_p(BN_get_rfc2409_prime_1024(ptr::null_mut())).map(BigNum)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: get_rfc3526_prime_1536, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in get_rfc3526_prime_1536:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 1018, End Line: 1023
/// Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order
/// of magnitude of `2 ^ 1536`.  This number is used during calculated key
/// exchanges such as Diffie-Hellman.  This number is labeled MODP group 5.
///
/// [`RFC 3526`]: https://tools.ietf.org/html/rfc3526#page-3
#[corresponds(BN_get_rfc3526_prime_1536)]
#[cfg(not(boringssl))]
pub fn get_rfc3526_prime_1536() -> Result<BigNum, ErrorStack> {
    unsafe {
        ffi::init();
        cvt_p(BN_get_rfc3526_prime_1536(ptr::null_mut())).map(BigNum)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: get_rfc3526_prime_2048, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in get_rfc3526_prime_2048:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 1032, End Line: 1037
/// Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order
/// of magnitude of `2 ^ 2048`.  This number is used during calculated key
/// exchanges such as Diffie-Hellman.  This number is labeled MODP group 14.
///
/// [`RFC 3526`]: https://tools.ietf.org/html/rfc3526#page-3
#[corresponds(BN_get_rfc3526_prime_2048)]
#[cfg(not(boringssl))]
pub fn get_rfc3526_prime_2048() -> Result<BigNum, ErrorStack> {
    unsafe {
        ffi::init();
        cvt_p(BN_get_rfc3526_prime_2048(ptr::null_mut())).map(BigNum)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: get_rfc3526_prime_3072, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in get_rfc3526_prime_3072:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 1046, End Line: 1051
/// Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order
/// of magnitude of `2 ^ 3072`.  This number is used during calculated key
/// exchanges such as Diffie-Hellman.  This number is labeled MODP group 15.
///
/// [`RFC 3526`]: https://tools.ietf.org/html/rfc3526#page-4
#[corresponds(BN_get_rfc3526_prime_3072)]
#[cfg(not(boringssl))]
pub fn get_rfc3526_prime_3072() -> Result<BigNum, ErrorStack> {
    unsafe {
        ffi::init();
        cvt_p(BN_get_rfc3526_prime_3072(ptr::null_mut())).map(BigNum)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: get_rfc3526_prime_4096, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in get_rfc3526_prime_4096:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 1060, End Line: 1065
/// Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order
/// of magnitude of `2 ^ 4096`.  This number is used during calculated key
/// exchanges such as Diffie-Hellman.  This number is labeled MODP group 16.
///
/// [`RFC 3526`]: https://tools.ietf.org/html/rfc3526#page-4
#[corresponds(BN_get_rfc3526_prime_4096)]
#[cfg(not(boringssl))]
pub fn get_rfc3526_prime_4096() -> Result<BigNum, ErrorStack> {
    unsafe {
        ffi::init();
        cvt_p(BN_get_rfc3526_prime_4096(ptr::null_mut())).map(BigNum)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: get_rfc3526_prime_6144, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in get_rfc3526_prime_6144:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 1074, End Line: 1079
/// Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order
/// of magnitude of `2 ^ 6144`.  This number is used during calculated key
/// exchanges such as Diffie-Hellman.  This number is labeled MODP group 17.
///
/// [`RFC 3526`]: https://tools.ietf.org/html/rfc3526#page-6
#[corresponds(BN_get_rfc3526_prime_6114)]
#[cfg(not(boringssl))]
pub fn get_rfc3526_prime_6144() -> Result<BigNum, ErrorStack> {
    unsafe {
        ffi::init();
        cvt_p(BN_get_rfc3526_prime_6144(ptr::null_mut())).map(BigNum)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: get_rfc3526_prime_8192, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in get_rfc3526_prime_8192:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 1088, End Line: 1093
/// Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order
/// of magnitude of `2 ^ 8192`.  This number is used during calculated key
/// exchanges such as Diffie-Hellman.  This number is labeled MODP group 18.
///
/// [`RFC 3526`]: https://tools.ietf.org/html/rfc3526#page-6
#[corresponds(BN_get_rfc3526_prime_8192)]
#[cfg(not(boringssl))]
pub fn get_rfc3526_prime_8192() -> Result<BigNum, ErrorStack> {
    unsafe {
        ffi::init();
        cvt_p(BN_get_rfc3526_prime_8192(ptr::null_mut())).map(BigNum)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: from_slice, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in from_slice:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 1108, End Line: 1120
/// Creates a new `BigNum` from an unsigned, big-endian encoded number of arbitrary length.
///
/// OpenSSL documentation at [`BN_bin2bn`]
///
/// [`BN_bin2bn`]: https://www.openssl.org/docs/manmaster/crypto/BN_bin2bn.html
///
/// ```
/// # use openssl::bn::BigNum;
/// let bignum = BigNum::from_slice(&[0x12, 0x00, 0x34]).unwrap();
///
/// assert_eq!(bignum, BigNum::from_u32(0x120034).unwrap());
/// ```
#[corresponds(BN_bin2bn)]
pub fn from_slice(n: &[u8]) -> Result<BigNum, ErrorStack> {
    unsafe {
        ffi::init();
        assert!(n.len() <= LenType::MAX as usize);
        cvt_p(ffi::BN_bin2bn(n.as_ptr(), n.len() as LenType, ptr::null_mut()))
            .map(|p| BigNum::from_ptr(p))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: copy_from_slice, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs 

Found method with unsafe block in copy_from_slice:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\bn.rs
Start Line: 1137, End Line: 1144
/// Copies data from a slice overwriting what was in the BigNum.
///
/// This function can be used to copy data from a slice to a
/// [secure BigNum][`BigNum::new_secure`].
///
/// # Examples
///
/// ```
/// # use openssl::bn::BigNum;
/// let mut bignum = BigNum::new().unwrap();
/// bignum.copy_from_slice(&[0x12, 0x00, 0x34]).unwrap();
///
/// assert_eq!(bignum, BigNum::from_u32(0x120034).unwrap());
/// ```
#[corresponds(BN_bin2bn)]
pub fn copy_from_slice(&mut self, n: &[u8]) -> Result<(), ErrorStack> {
    unsafe {
        assert!(n.len() <= LenType::MAX as usize);
        cvt_p(ffi::BN_bin2bn(n.as_ptr(), n.len() as LenType, self.0))?;
        Ok(())
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: from_nid, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in from_nid:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 121, End Line: 130
/// Looks up the cipher for a certain nid.
#[corresponds(EVP_get_cipherbynid)]
pub fn from_nid(nid: Nid) -> Option<&'static CipherRef> {
    unsafe {
        let ptr = ffi::EVP_get_cipherbyname(ffi::OBJ_nid2sn(nid.as_raw()));
        if ptr.is_null() { None } else { Some(CipherRef::from_ptr(ptr as *mut _)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_128_ecb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_128_ecb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 156, End Line: 158
pub fn aes_128_ecb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_128_ecb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_128_cbc, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_128_cbc:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 160, End Line: 162
pub fn aes_128_cbc() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_128_cbc() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_128_xts, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_128_xts:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 165, End Line: 167
#[cfg(not(boringssl))]
pub fn aes_128_xts() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_128_xts() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_256_xts, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_256_xts:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 170, End Line: 172
#[cfg(not(boringssl))]
pub fn aes_256_xts() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_256_xts() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_128_ctr, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_128_ctr:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 174, End Line: 176
pub fn aes_128_ctr() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_128_ctr() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_128_cfb1, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_128_cfb1:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 179, End Line: 181
#[cfg(not(boringssl))]
pub fn aes_128_cfb1() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_128_cfb1() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_128_cfb128, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_128_cfb128:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 184, End Line: 186
#[cfg(not(boringssl))]
pub fn aes_128_cfb128() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_128_cfb128() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_128_cfb8, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_128_cfb8:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 189, End Line: 191
#[cfg(not(boringssl))]
pub fn aes_128_cfb8() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_128_cfb8() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_128_gcm, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_128_gcm:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 193, End Line: 195
pub fn aes_128_gcm() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_128_gcm() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_128_ccm, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_128_ccm:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 198, End Line: 200
#[cfg(not(boringssl))]
pub fn aes_128_ccm() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_128_ccm() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_128_ofb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_128_ofb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 202, End Line: 204
pub fn aes_128_ofb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_128_ofb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_128_ocb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_128_ocb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 208, End Line: 210
/// Requires OpenSSL 1.1.0 or newer.
#[cfg(all(ossl110, not(osslconf = "OPENSSL_NO_OCB")))]
pub fn aes_128_ocb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_128_ocb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_128_wrap, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_128_wrap:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 214, End Line: 216
/// Requires OpenSSL 1.0.2 or newer.
#[cfg(ossl102)]
pub fn aes_128_wrap() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_128_wrap() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_128_wrap_pad, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_128_wrap_pad:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 220, End Line: 222
/// Requires OpenSSL 1.1.0 or newer.
#[cfg(ossl110)]
pub fn aes_128_wrap_pad() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_128_wrap_pad() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_192_ecb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_192_ecb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 224, End Line: 226
pub fn aes_192_ecb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_192_ecb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_192_cbc, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_192_cbc:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 228, End Line: 230
pub fn aes_192_cbc() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_192_cbc() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_192_ctr, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_192_ctr:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 232, End Line: 234
pub fn aes_192_ctr() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_192_ctr() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_192_cfb1, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_192_cfb1:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 237, End Line: 239
#[cfg(not(boringssl))]
pub fn aes_192_cfb1() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_192_cfb1() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_192_cfb128, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_192_cfb128:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 241, End Line: 243
pub fn aes_192_cfb128() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_192_cfb128() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_192_cfb8, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_192_cfb8:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 246, End Line: 248
#[cfg(not(boringssl))]
pub fn aes_192_cfb8() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_192_cfb8() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_192_gcm, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_192_gcm:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 250, End Line: 252
pub fn aes_192_gcm() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_192_gcm() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_192_ccm, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_192_ccm:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 255, End Line: 257
#[cfg(not(boringssl))]
pub fn aes_192_ccm() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_192_ccm() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_192_ofb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_192_ofb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 259, End Line: 261
pub fn aes_192_ofb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_192_ofb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_192_ocb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_192_ocb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 265, End Line: 267
/// Requires OpenSSL 1.1.0 or newer.
#[cfg(all(ossl110, not(osslconf = "OPENSSL_NO_OCB")))]
pub fn aes_192_ocb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_192_ocb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_192_wrap, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_192_wrap:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 271, End Line: 273
/// Requires OpenSSL 1.0.2 or newer.
#[cfg(ossl102)]
pub fn aes_192_wrap() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_192_wrap() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_192_wrap_pad, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_192_wrap_pad:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 277, End Line: 279
/// Requires OpenSSL 1.1.0 or newer.
#[cfg(ossl110)]
pub fn aes_192_wrap_pad() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_192_wrap_pad() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_256_ecb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_256_ecb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 281, End Line: 283
pub fn aes_256_ecb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_256_ecb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_256_cbc, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_256_cbc:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 285, End Line: 287
pub fn aes_256_cbc() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_256_cbc() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_256_ctr, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_256_ctr:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 289, End Line: 291
pub fn aes_256_ctr() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_256_ctr() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_256_cfb1, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_256_cfb1:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 294, End Line: 296
#[cfg(not(boringssl))]
pub fn aes_256_cfb1() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_256_cfb1() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_256_cfb128, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_256_cfb128:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 298, End Line: 300
pub fn aes_256_cfb128() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_256_cfb128() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_256_cfb8, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_256_cfb8:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 303, End Line: 305
#[cfg(not(boringssl))]
pub fn aes_256_cfb8() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_256_cfb8() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_256_gcm, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_256_gcm:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 307, End Line: 309
pub fn aes_256_gcm() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_256_gcm() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_256_ccm, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_256_ccm:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 312, End Line: 314
#[cfg(not(boringssl))]
pub fn aes_256_ccm() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_256_ccm() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_256_ofb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_256_ofb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 316, End Line: 318
pub fn aes_256_ofb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_256_ofb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_256_ocb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_256_ocb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 322, End Line: 324
/// Requires OpenSSL 1.1.0 or newer.
#[cfg(all(ossl110, not(osslconf = "OPENSSL_NO_OCB")))]
pub fn aes_256_ocb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_256_ocb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_256_wrap, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_256_wrap:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 328, End Line: 330
/// Requires OpenSSL 1.0.2 or newer.
#[cfg(ossl102)]
pub fn aes_256_wrap() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_256_wrap() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: aes_256_wrap_pad, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in aes_256_wrap_pad:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 334, End Line: 336
/// Requires OpenSSL 1.1.0 or newer.
#[cfg(ossl110)]
pub fn aes_256_wrap_pad() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_aes_256_wrap_pad() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: bf_cbc, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in bf_cbc:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 339, End Line: 341
#[cfg(not(osslconf = "OPENSSL_NO_BF"))]
pub fn bf_cbc() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_bf_cbc() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: bf_ecb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in bf_ecb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 344, End Line: 346
#[cfg(not(osslconf = "OPENSSL_NO_BF"))]
pub fn bf_ecb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_bf_ecb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: bf_cfb64, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in bf_cfb64:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 349, End Line: 351
#[cfg(not(osslconf = "OPENSSL_NO_BF"))]
pub fn bf_cfb64() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_bf_cfb64() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: bf_ofb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in bf_ofb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 354, End Line: 356
#[cfg(not(osslconf = "OPENSSL_NO_BF"))]
pub fn bf_ofb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_bf_ofb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: des_cbc, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in des_cbc:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 358, End Line: 360
pub fn des_cbc() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_des_cbc() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: des_ecb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in des_ecb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 362, End Line: 364
pub fn des_ecb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_des_ecb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: des_ede3, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in des_ede3:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 366, End Line: 368
pub fn des_ede3() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_des_ede3() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: des_ede3_ecb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in des_ede3_ecb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 370, End Line: 372
pub fn des_ede3_ecb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_des_ede3_ecb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: des_ede3_cbc, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in des_ede3_cbc:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 374, End Line: 376
pub fn des_ede3_cbc() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_des_ede3_cbc() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: des_ede3_cfb8, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in des_ede3_cfb8:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 379, End Line: 381
#[cfg(not(boringssl))]
pub fn des_ede3_cfb8() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_des_ede3_cfb8() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: des_ede3_cfb64, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in des_ede3_cfb64:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 384, End Line: 386
#[cfg(not(boringssl))]
pub fn des_ede3_cfb64() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_des_ede3_cfb64() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: des_ede3_ofb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in des_ede3_ofb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 389, End Line: 391
#[cfg(not(boringssl))]
pub fn des_ede3_ofb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_des_ede3_ofb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: rc4, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in rc4:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 394, End Line: 396
#[cfg(not(osslconf = "OPENSSL_NO_RC4"))]
pub fn rc4() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_rc4() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia128_cfb128, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in camellia128_cfb128:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 399, End Line: 401
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia128_cfb128() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_camellia_128_cfb128() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia128_ecb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in camellia128_ecb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 404, End Line: 406
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia128_ecb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_camellia_128_ecb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia128_cbc, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in camellia128_cbc:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 409, End Line: 411
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia128_cbc() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_camellia_128_cbc() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia128_ofb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in camellia128_ofb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 414, End Line: 416
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia128_ofb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_camellia_128_ofb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia192_cfb128, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in camellia192_cfb128:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 419, End Line: 421
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia192_cfb128() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_camellia_192_cfb128() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia192_ecb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in camellia192_ecb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 424, End Line: 426
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia192_ecb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_camellia_192_ecb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia192_cbc, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in camellia192_cbc:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 429, End Line: 431
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia192_cbc() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_camellia_192_cbc() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia192_ofb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in camellia192_ofb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 434, End Line: 436
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia192_ofb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_camellia_192_ofb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia256_cfb128, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in camellia256_cfb128:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 439, End Line: 441
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia256_cfb128() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_camellia_256_cfb128() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia256_ecb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in camellia256_ecb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 444, End Line: 446
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia256_ecb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_camellia_256_ecb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia256_cbc, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in camellia256_cbc:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 449, End Line: 451
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia256_cbc() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_camellia_256_cbc() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia256_ofb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in camellia256_ofb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 454, End Line: 456
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia256_ofb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_camellia_256_ofb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: cast5_cfb64, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in cast5_cfb64:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 459, End Line: 461
#[cfg(not(osslconf = "OPENSSL_NO_CAST"))]
pub fn cast5_cfb64() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_cast5_cfb64() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: cast5_ecb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in cast5_ecb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 464, End Line: 466
#[cfg(not(osslconf = "OPENSSL_NO_CAST"))]
pub fn cast5_ecb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_cast5_ecb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: cast5_cbc, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in cast5_cbc:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 469, End Line: 471
#[cfg(not(osslconf = "OPENSSL_NO_CAST"))]
pub fn cast5_cbc() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_cast5_cbc() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: cast5_ofb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in cast5_ofb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 474, End Line: 476
#[cfg(not(osslconf = "OPENSSL_NO_CAST"))]
pub fn cast5_ofb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_cast5_ofb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: idea_cfb64, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in idea_cfb64:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 479, End Line: 481
#[cfg(not(osslconf = "OPENSSL_NO_IDEA"))]
pub fn idea_cfb64() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_idea_cfb64() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: idea_ecb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in idea_ecb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 484, End Line: 486
#[cfg(not(osslconf = "OPENSSL_NO_IDEA"))]
pub fn idea_ecb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_idea_ecb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: idea_cbc, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in idea_cbc:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 489, End Line: 491
#[cfg(not(osslconf = "OPENSSL_NO_IDEA"))]
pub fn idea_cbc() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_idea_cbc() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: idea_ofb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in idea_ofb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 494, End Line: 496
#[cfg(not(osslconf = "OPENSSL_NO_IDEA"))]
pub fn idea_ofb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_idea_ofb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: chacha20, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in chacha20:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 499, End Line: 501
#[cfg(all(any(ossl110, libressl310), not(osslconf = "OPENSSL_NO_CHACHA")))]
pub fn chacha20() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_chacha20() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: chacha20_poly1305, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in chacha20_poly1305:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 504, End Line: 506
#[cfg(all(any(ossl110, libressl360), not(osslconf = "OPENSSL_NO_CHACHA")))]
pub fn chacha20_poly1305() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_chacha20_poly1305() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: seed_cbc, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in seed_cbc:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 509, End Line: 511
#[cfg(not(osslconf = "OPENSSL_NO_SEED"))]
pub fn seed_cbc() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_seed_cbc() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: seed_cfb128, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in seed_cfb128:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 514, End Line: 516
#[cfg(not(osslconf = "OPENSSL_NO_SEED"))]
pub fn seed_cfb128() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_seed_cfb128() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: seed_ecb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in seed_ecb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 519, End Line: 521
#[cfg(not(osslconf = "OPENSSL_NO_SEED"))]
pub fn seed_ecb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_seed_ecb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: seed_ofb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in seed_ofb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 524, End Line: 526
#[cfg(not(osslconf = "OPENSSL_NO_SEED"))]
pub fn seed_ofb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_seed_ofb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sm4_ecb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in sm4_ecb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 529, End Line: 531
#[cfg(all(any(ossl111, libressl291), not(osslconf = "OPENSSL_NO_SM4")))]
pub fn sm4_ecb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_sm4_ecb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sm4_cbc, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in sm4_cbc:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 534, End Line: 536
#[cfg(all(any(ossl111, libressl291), not(osslconf = "OPENSSL_NO_SM4")))]
pub fn sm4_cbc() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_sm4_cbc() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sm4_ctr, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in sm4_ctr:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 539, End Line: 541
#[cfg(all(any(ossl111, libressl291), not(osslconf = "OPENSSL_NO_SM4")))]
pub fn sm4_ctr() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_sm4_ctr() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sm4_cfb128, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in sm4_cfb128:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 544, End Line: 546
#[cfg(all(any(ossl111, libressl291), not(osslconf = "OPENSSL_NO_SM4")))]
pub fn sm4_cfb128() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_sm4_cfb128() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sm4_ofb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in sm4_ofb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 549, End Line: 551
#[cfg(all(any(ossl111, libressl291), not(osslconf = "OPENSSL_NO_SM4")))]
pub fn sm4_ofb() -> &'static CipherRef {
    unsafe { CipherRef::from_ptr(ffi::EVP_sm4_ofb() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: key_length, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in key_length:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 574, End Line: 576
/// Returns the length of keys used with this cipher.
#[corresponds(EVP_CIPHER_key_length)]
pub fn key_length(&self) -> usize {
    unsafe { EVP_CIPHER_key_length(self.as_ptr()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: iv_length, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in iv_length:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 584, End Line: 586
/// Returns the length of the IV used with this cipher.
///
/// # Note
///
/// Ciphers that do not use an IV have an IV length of 0.
#[corresponds(EVP_CIPHER_iv_length)]
pub fn iv_length(&self) -> usize {
    unsafe { EVP_CIPHER_iv_length(self.as_ptr()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: block_size, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs 

Found method with unsafe block in block_size:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher.rs
Start Line: 594, End Line: 596
/// Returns the block size of the cipher.
///
/// # Note
///
/// Stream ciphers have a block size of 1.
#[corresponds(EVP_CIPHER_block_size)]
pub fn block_size(&self) -> usize {
    unsafe { EVP_CIPHER_block_size(self.as_ptr()) as usize }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: copy, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs 

Found method with unsafe block in copy:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 109, End Line: 114
#[corresponds(EVP_CIPHER_CTX_copy)]
pub fn copy(&mut self, src: &CipherCtxRef) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_CIPHER_CTX_copy(self.as_ptr(), src.as_ptr()))?;
        Ok(())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: cipher_init, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs 

Found method with unsafe block in cipher_init:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 156, End Line: 190
fn cipher_init(
    &mut self,
    type_: Option<&CipherRef>,
    key: Option<&[u8]>,
    iv: Option<&[u8]>,
    f: unsafe extern "C" fn(
        *mut ffi::EVP_CIPHER_CTX,
        *const ffi::EVP_CIPHER,
        *mut ffi::ENGINE,
        *const c_uchar,
        *const c_uchar,
    ) -> c_int,
) -> Result<(), ErrorStack> {
    if let Some(key) = key {
        let key_len = type_.map_or_else(|| self.key_length(), |c| c.key_length());
        assert!(key_len <= key.len());
    }
    if let Some(iv) = iv {
        let iv_len = type_.map_or_else(|| self.iv_length(), |c| c.iv_length());
        assert!(iv_len <= iv.len());
    }
    unsafe {
        cvt(
            f(
                self.as_ptr(),
                type_.map_or(ptr::null(), |p| p.as_ptr()),
                ptr::null_mut(),
                key.map_or(ptr::null(), |k| k.as_ptr()),
                iv.map_or(ptr::null(), |iv| iv.as_ptr()),
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: seal_init, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs 

Found method with unsafe block in seal_init:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 206, End Line: 250
/// Initializes the context to perform envelope encryption.
///
/// Normally this is called once to set both the cipher and public keys. However, this process may be split up by
/// first providing the cipher with no public keys and then setting the public keys with no cipher.
///
/// `encrypted_keys` will contain the generated symmetric key encrypted with each corresponding asymmetric private
/// key. The generated IV will be written to `iv`.
///
/// # Panics
///
/// Panics if `pub_keys` is not the same size as `encrypted_keys`, the IV buffer is smaller than the cipher's IV
/// size, or if an IV is provided before the cipher.
#[corresponds(EVP_SealInit)]
#[cfg(not(boringssl))]
pub fn seal_init<T>(
    &mut self,
    type_: Option<&CipherRef>,
    pub_keys: &[PKey<T>],
    encrypted_keys: &mut [Vec<u8>],
    iv: Option<&mut [u8]>,
) -> Result<(), ErrorStack>
where
    T: HasPublic,
{
    assert_eq!(pub_keys.len(), encrypted_keys.len());
    if !pub_keys.is_empty() {
        let iv_len = type_.map_or_else(|| self.iv_length(), |c| c.iv_length());
        assert!(iv.as_ref().map_or(0, | b | b.len()) >= iv_len);
    }
    for (pub_key, buf) in pub_keys.iter().zip(&mut *encrypted_keys) {
        buf.resize(pub_key.size(), 0);
    }
    let mut keys = encrypted_keys.iter_mut().map(|b| b.as_mut_ptr()).collect::<Vec<_>>();
    let mut key_lengths = vec![0; pub_keys.len()];
    let pub_keys_len = i32::try_from(pub_keys.len()).unwrap();
    unsafe {
        cvt(
            ffi::EVP_SealInit(
                self.as_ptr(),
                type_.map_or(ptr::null(), |p| p.as_ptr()),
                keys.as_mut_ptr(),
                key_lengths.as_mut_ptr(),
                iv.map_or(ptr::null_mut(), |b| b.as_mut_ptr()),
                pub_keys.as_ptr() as *mut _,
                pub_keys_len,
            ),
        )?;
    }
    for (buf, len) in encrypted_keys.iter_mut().zip(key_lengths) {
        buf.truncate(len as usize);
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: open_init, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs 

Found method with unsafe block in open_init:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 263, End Line: 291
/// Initializes the context to perform envelope decryption.
///
/// Normally this is called once with all of the arguments present. However, this process may be split up by first
/// providing the cipher alone and then after providing the rest of the arguments in a second call.
///
/// # Panics
///
/// Panics if the IV buffer is smaller than the cipher's required IV size or if the IV is provided before the
/// cipher.
#[corresponds(EVP_OpenInit)]
#[cfg(not(boringssl))]
pub fn open_init<T>(
    &mut self,
    type_: Option<&CipherRef>,
    encrypted_key: &[u8],
    iv: Option<&[u8]>,
    priv_key: Option<&PKeyRef<T>>,
) -> Result<(), ErrorStack>
where
    T: HasPrivate,
{
    if priv_key.is_some() {
        let iv_len = type_.map_or_else(|| self.iv_length(), |c| c.iv_length());
        assert!(iv.map_or(0, | b | b.len()) >= iv_len);
    }
    let len = c_int::try_from(encrypted_key.len()).unwrap();
    unsafe {
        cvt(
            ffi::EVP_OpenInit(
                self.as_ptr(),
                type_.map_or(ptr::null(), |p| p.as_ptr()),
                encrypted_key.as_ptr(),
                len,
                iv.map_or(ptr::null(), |b| b.as_ptr()),
                priv_key.map_or(ptr::null_mut(), ForeignTypeRef::as_ptr),
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: assert_cipher, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs 

Found method with unsafe block in assert_cipher:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 293, End Line: 297
fn assert_cipher(&self) {
    unsafe {
        assert!(! EVP_CIPHER_CTX_get0_cipher(self.as_ptr()).is_null());
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: rand_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs 

Found method with unsafe block in rand_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 337, End Line: 348
/// Generates a random key based on the configured cipher.
///
/// # Panics
///
/// Panics if the context has not been initialized with a cipher or if the buffer is smaller than the cipher's key
/// length.
///
/// This corresponds to [`EVP_CIPHER_CTX_rand_key`].
///
/// [`EVP_CIPHER_CTX_rand_key`]: https://www.openssl.org/docs/manmaster/man3/EVP_CIPHER_CTX_rand_key.html
#[corresponds(EVP_CIPHER_CTX_rand_key)]
#[cfg(not(boringssl))]
pub fn rand_key(&self, buf: &mut [u8]) -> Result<(), ErrorStack> {
    assert!(buf.len() >= self.key_length());
    unsafe {
        cvt(ffi::EVP_CIPHER_CTX_rand_key(self.as_ptr(), buf.as_mut_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_key_length, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs 

Found method with unsafe block in set_key_length:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 358, End Line: 369
/// Sets the length of the key expected by the context.
///
/// Only some ciphers support configurable key lengths.
///
/// # Panics
///
/// Panics if the context has not been initialized with a cipher.
#[corresponds(EVP_CIPHER_CTX_set_key_length)]
pub fn set_key_length(&mut self, len: usize) -> Result<(), ErrorStack> {
    self.assert_cipher();
    unsafe {
        cvt(ffi::EVP_CIPHER_CTX_set_key_length(self.as_ptr(), len.try_into().unwrap()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: num, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs 

Found method with unsafe block in num:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 395, End Line: 399
/// Returns the `num` parameter of the cipher.
///
/// Built-in ciphers typically use this to track how much of the
/// current underlying block has been "used" already.
///
/// # Panics
///
/// Panics if the context has not been initialized with a cipher.
#[corresponds(EVP_CIPHER_CTX_num)]
#[cfg(ossl110)]
pub fn num(&self) -> usize {
    self.assert_cipher();
    unsafe { ffi::EVP_CIPHER_CTX_num(self.as_ptr()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_iv_length, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs 

Found method with unsafe block in set_iv_length:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 409, End Line: 424
/// Sets the length of the IV expected by this context.
///
/// Only some ciphers support configurable IV lengths.
///
/// # Panics
///
/// Panics if the context has not been initialized with a cipher.
#[corresponds(EVP_CIPHER_CTX_ctrl)]
pub fn set_iv_length(&mut self, len: usize) -> Result<(), ErrorStack> {
    self.assert_cipher();
    let len = c_int::try_from(len).unwrap();
    unsafe {
        cvt(
            ffi::EVP_CIPHER_CTX_ctrl(
                self.as_ptr(),
                ffi::EVP_CTRL_GCM_SET_IVLEN,
                len,
                ptr::null_mut(),
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: tag_length, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs 

Found method with unsafe block in tag_length:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 437, End Line: 441
/// Returns the length of the authentication tag expected by this context.
///
/// Returns 0 if the cipher is not authenticated.
///
/// # Panics
///
/// Panics if the context has not been initialized with a cipher.
///
/// Requires OpenSSL 3.0.0 or newer.
#[corresponds(EVP_CIPHER_CTX_get_tag_length)]
#[cfg(ossl300)]
pub fn tag_length(&self) -> usize {
    self.assert_cipher();
    unsafe { ffi::EVP_CIPHER_CTX_get_tag_length(self.as_ptr()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_tag_length, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs 

Found method with unsafe block in set_tag_length:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 469, End Line: 482
/// Sets the length of the generated authentication tag.
///
/// This must be called when encrypting with a cipher in CCM mode to use a tag size other than the default.
#[corresponds(EVP_CIPHER_CTX_ctrl)]
pub fn set_tag_length(&mut self, len: usize) -> Result<(), ErrorStack> {
    let len = c_int::try_from(len).unwrap();
    unsafe {
        cvt(
            ffi::EVP_CIPHER_CTX_ctrl(
                self.as_ptr(),
                ffi::EVP_CTRL_GCM_SET_TAG,
                len,
                ptr::null_mut(),
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_tag, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs 

Found method with unsafe block in set_tag:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 486, End Line: 499
/// Sets the authentication tag for verification during decryption.
#[corresponds(EVP_CIPHER_CTX_ctrl)]
pub fn set_tag(&mut self, tag: &[u8]) -> Result<(), ErrorStack> {
    let len = c_int::try_from(tag.len()).unwrap();
    unsafe {
        cvt(
            ffi::EVP_CIPHER_CTX_ctrl(
                self.as_ptr(),
                ffi::EVP_CTRL_GCM_SET_TAG,
                len,
                tag.as_ptr() as *mut _,
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_padding, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs 

Found method with unsafe block in set_padding:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 505, End Line: 509
/// Enables or disables padding.
///
/// If padding is disabled, the plaintext must be an exact multiple of the cipher's block size.
#[corresponds(EVP_CIPHER_CTX_set_padding)]
pub fn set_padding(&mut self, padding: bool) {
    unsafe {
        ffi::EVP_CIPHER_CTX_set_padding(self.as_ptr(), padding as c_int);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_data_len, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs 

Found method with unsafe block in set_data_len:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 515, End Line: 529
/// Sets the total length of plaintext data.
///
/// This is required for ciphers operating in CCM mode.
#[corresponds(EVP_CipherUpdate)]
pub fn set_data_len(&mut self, len: usize) -> Result<(), ErrorStack> {
    let len = c_int::try_from(len).unwrap();
    unsafe {
        cvt(
            ffi::EVP_CipherUpdate(
                self.as_ptr(),
                ptr::null_mut(),
                &mut 0,
                ptr::null(),
                len,
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_flags, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs 

Found method with unsafe block in set_flags:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 536, End Line: 540
/// Set ctx flags.
///
/// This function is currently used to enable AES key wrap feature supported by OpenSSL 1.0.2 or newer.
#[corresponds(EVP_CIPHER_CTX_set_flags)]
#[cfg(ossl102)]
pub fn set_flags(&mut self, flags: CipherCtxFlags) {
    unsafe {
        ffi::EVP_CIPHER_CTX_set_flags(self.as_ptr(), flags.bits());
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: cipher_update, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs 

Found method with unsafe block in cipher_update:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 553, End Line: 572
/// Writes data into the context.
///
/// Providing no output buffer will cause the input to be considered additional authenticated data (AAD).
///
/// Returns the number of bytes written to `output`.
///
/// # Panics
///
/// Panics if `output` doesn't contain enough space for data to be
/// written.
#[corresponds(EVP_CipherUpdate)]
pub fn cipher_update(
    &mut self,
    input: &[u8],
    output: Option<&mut [u8]>,
) -> Result<usize, ErrorStack> {
    if let Some(output) = &output {
        let mut block_size = self.block_size();
        if block_size == 1 {
            block_size = 0;
        }
        let min_output_size = input.len() + block_size;
        assert!(
            output.len() >= min_output_size,
            "Output buffer size should be at least {} bytes.", min_output_size
        );
    }
    unsafe { self.cipher_update_unchecked(input, output) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: cipher_update_inplace, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs 

Found method with unsafe block in cipher_update_inplace:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 640, End Line: 668
/// Like [`Self::cipher_update`] except that it writes output into the
/// `data` buffer. The `inlen` parameter specifies the number of bytes in
/// `data` that are considered the input. For streaming ciphers, the size of
/// `data` must be at least the input size. Otherwise, it must be at least
/// an additional block size larger.
///
/// Note: Use [`Self::cipher_update`] with no output argument to write AAD.
///
/// # Panics
///
/// This function panics if the input size cannot be represented as `int` or
/// exceeds the buffer size, or if the output buffer does not contain enough
/// additional space.
#[corresponds(EVP_CipherUpdate)]
pub fn cipher_update_inplace(
    &mut self,
    data: &mut [u8],
    inlen: usize,
) -> Result<usize, ErrorStack> {
    assert!(inlen <= data.len(), "Input size may not exceed buffer size");
    let block_size = self.block_size();
    if block_size != 1 {
        assert!(
            data.len() >= inlen + block_size,
            "Output buffer size must be at least {} bytes.", inlen + block_size
        );
    }
    let inlen = c_int::try_from(inlen).unwrap();
    let mut outlen = 0;
    unsafe {
        cvt(
            ffi::EVP_CipherUpdate(
                self.as_ptr(),
                data.as_mut_ptr(),
                &mut outlen,
                data.as_ptr(),
                inlen,
            ),
        )
    }?;
    Ok(outlen as usize)
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: cipher_final, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs 

Found method with unsafe block in cipher_final:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cipher_ctx.rs
Start Line: 680, End Line: 687
/// Finalizes the encryption or decryption process.
///
/// Any remaining data will be written to the output buffer.
///
/// Returns the number of bytes written to `output`.
///
/// # Panics
///
/// Panics if `output` is smaller than the cipher's block size.
#[corresponds(EVP_CipherFinal)]
pub fn cipher_final(&mut self, output: &mut [u8]) -> Result<usize, ErrorStack> {
    let block_size = self.block_size();
    if block_size > 1 {
        assert!(output.len() >= block_size);
    }
    unsafe { self.cipher_final_unchecked(output) }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs
-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: false, name: decrypt, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs 

Found method with unsafe block in decrypt:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs
Start Line: 76, End Line: 96
/// Given the sender's private key, `pkey` and the recipient's certificate, `cert`,
/// decrypt the data in `self`.
#[corresponds(CMS_decrypt)]
pub fn decrypt<T>(&self, pkey: &PKeyRef<T>, cert: &X509) -> Result<Vec<u8>, ErrorStack>
where
    T: HasPrivate,
{
    unsafe {
        let pkey = pkey.as_ptr();
        let cert = cert.as_ptr();
        let out = MemBio::new()?;
        cvt(
            ffi::CMS_decrypt(self.as_ptr(), pkey, cert, ptr::null_mut(), out.as_ptr(), 0),
        )?;
        Ok(out.get_buf().to_owned())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: decrypt_without_cert_check, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs 

Found method with unsafe block in decrypt_without_cert_check:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs
Start Line: 104, End Line: 123
/// Given the sender's private key, `pkey`,
/// decrypt the data in `self` without validating the recipient certificate.
///
/// *Warning*: Not checking the recipient certificate may leave you vulnerable to Bleichenbacher's attack on PKCS#1 v1.5 RSA padding.
#[corresponds(CMS_decrypt)]
pub fn decrypt_without_cert_check<T>(
    &self,
    pkey: &PKeyRef<T>,
) -> Result<Vec<u8>, ErrorStack>
where
    T: HasPrivate,
{
    unsafe {
        let pkey = pkey.as_ptr();
        let out = MemBio::new()?;
        cvt(
            ffi::CMS_decrypt(
                self.as_ptr(),
                pkey,
                ptr::null_mut(),
                ptr::null_mut(),
                out.as_ptr(),
                0,
            ),
        )?;
        Ok(out.get_buf().to_owned())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: smime_read_cms, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs 

Found method with unsafe block in smime_read_cms:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs
Start Line: 143, End Line: 151
/// Parses a smime formatted `vec` of bytes into a `CmsContentInfo`.
#[corresponds(SMIME_read_CMS)]
pub fn smime_read_cms(smime: &[u8]) -> Result<CmsContentInfo, ErrorStack> {
    unsafe {
        let bio = MemBioSlice::new(smime)?;
        let cms = cvt_p(ffi::SMIME_read_CMS(bio.as_ptr(), ptr::null_mut()))?;
        Ok(CmsContentInfo::from_ptr(cms))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 7 statements, complex: false, name: sign, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs 

Found method with unsafe block in sign:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs
Start Line: 174, End Line: 204
/// Given a signing cert `signcert`, private key `pkey`, a certificate stack `certs`,
/// data `data` and flags `flags`, create a CmsContentInfo struct.
///
/// All arguments are optional.
#[corresponds(CMS_sign)]
pub fn sign<T>(
    signcert: Option<&X509Ref>,
    pkey: Option<&PKeyRef<T>>,
    certs: Option<&StackRef<X509>>,
    data: Option<&[u8]>,
    flags: CMSOptions,
) -> Result<CmsContentInfo, ErrorStack>
where
    T: HasPrivate,
{
    unsafe {
        let signcert = signcert.map_or(ptr::null_mut(), |p| p.as_ptr());
        let pkey = pkey.map_or(ptr::null_mut(), |p| p.as_ptr());
        let data_bio = match data {
            Some(data) => Some(MemBioSlice::new(data)?),
            None => None,
        };
        let data_bio_ptr = data_bio.as_ref().map_or(ptr::null_mut(), |p| p.as_ptr());
        let certs = certs.map_or(ptr::null_mut(), |p| p.as_ptr());
        let cms = cvt_p(
            ffi::CMS_sign(signcert, pkey, certs, data_bio_ptr, flags.bits()),
        )?;
        Ok(CmsContentInfo::from_ptr(cms))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: encrypt, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs 

Found method with unsafe block in encrypt:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\cms.rs
Start Line: 213, End Line: 231
/// Given a certificate stack `certs`, data `data`, cipher `cipher` and flags `flags`,
/// create a CmsContentInfo struct.
///
/// OpenSSL documentation at [`CMS_encrypt`]
///
/// [`CMS_encrypt`]: https://www.openssl.org/docs/manmaster/man3/CMS_encrypt.html
#[corresponds(CMS_encrypt)]
pub fn encrypt(
    certs: &StackRef<X509>,
    data: &[u8],
    cipher: Cipher,
    flags: CMSOptions,
) -> Result<CmsContentInfo, ErrorStack> {
    unsafe {
        let data_bio = MemBioSlice::new(data)?;
        let cms = cvt_p(
            ffi::CMS_encrypt(
                certs.as_ptr(),
                data_bio.as_ptr(),
                cipher.as_ptr(),
                flags.bits(),
            ),
        )?;
        Ok(CmsContentInfo::from_ptr(cms))
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\conf.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\derive.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_peer, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\derive.rs 

Found method with unsafe block in set_peer:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\derive.rs
Start Line: 87, End Line: 92
/// Sets the peer key used for secret derivation.
#[corresponds(EVP_PKEY_derive_set_peer)]
pub fn set_peer<T>(&mut self, key: &'a PKeyRef<T>) -> Result<(), ErrorStack>
where
    T: HasPublic,
{
    unsafe { cvt(ffi::EVP_PKEY_derive_set_peer(self.0, key.as_ptr())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_peer_ex, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\derive.rs 

Found method with unsafe block in set_peer_ex:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\derive.rs
Start Line: 99, End Line: 115
/// Sets the peer key used for secret derivation along with optionally validating the peer public key.
///
/// Requires OpenSSL 3.0.0 or newer.
#[corresponds(EVP_PKEY_derive_set_peer_ex)]
#[cfg(ossl300)]
pub fn set_peer_ex<T>(
    &mut self,
    key: &'a PKeyRef<T>,
    validate_peer: bool,
) -> Result<(), ErrorStack>
where
    T: HasPublic,
{
    unsafe {
        cvt(ffi::EVP_PKEY_derive_set_peer_ex(self.0, key.as_ptr(), validate_peer as i32))
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: derive, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\derive.rs 

Found method with unsafe block in derive:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\derive.rs
Start Line: 139, End Line: 149
/// Derives a shared secret between the two keys, writing it into the buffer.
///
/// Returns the number of bytes written.
///
/// This corresponds to [`EVP_PKEY_derive`].
///
/// [`EVP_PKEY_derive`]: https://www.openssl.org/docs/manmaster/crypto/EVP_PKEY_derive_init.html
pub fn derive(&mut self, buf: &mut [u8]) -> Result<usize, ErrorStack> {
    let mut len = buf.len();
    unsafe {
        cvt(ffi::EVP_PKEY_derive(self.0, buf.as_mut_ptr() as *mut _, &mut len))
            .map(|_| len)
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: check_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs 

Found method with unsafe block in check_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 45, End Line: 51
/// Validates DH parameters for correctness
#[corresponds(DH_check_key)]
pub fn check_key(&self) -> Result<bool, ErrorStack> {
    unsafe {
        let mut codes = 0;
        cvt(ffi::DH_check(self.as_ptr(), &mut codes))?;
        Ok(codes == 0)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: from_pqg, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs 

Found method with unsafe block in from_pqg:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 61, End Line: 77
/// Creates a DH instance based upon the given primes and generator params.
#[corresponds(DH_set0_pqg)]
pub fn from_pqg(
    prime_p: BigNum,
    prime_q: Option<BigNum>,
    generator: BigNum,
) -> Result<Dh<Params>, ErrorStack> {
    unsafe {
        let dh = Dh::from_ptr(cvt_p(ffi::DH_new())?);
        cvt(
            DH_set0_pqg(
                dh.0,
                prime_p.as_ptr(),
                prime_q.as_ref().map_or(ptr::null_mut(), |q| q.as_ptr()),
                generator.as_ptr(),
            ),
        )?;
        mem::forget((prime_p, prime_q, generator));
        Ok(dh)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: set_public_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs 

Found method with unsafe block in set_public_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 80, End Line: 87
/// Sets the public key on the DH object.
pub fn set_public_key(self, pub_key: BigNum) -> Result<Dh<Public>, ErrorStack> {
    unsafe {
        let dh_ptr = self.0;
        cvt(DH_set0_key(dh_ptr, pub_key.as_ptr(), ptr::null_mut()))?;
        mem::forget((self, pub_key));
        Ok(Dh::from_ptr(dh_ptr))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, complex: false, name: set_private_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs 

Found method with unsafe block in set_private_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 90, End Line: 100
/// Sets the private key on the DH object and recomputes the public key.
pub fn set_private_key(self, priv_key: BigNum) -> Result<Dh<Private>, ErrorStack> {
    unsafe {
        let dh_ptr = self.0;
        cvt(DH_set0_key(dh_ptr, ptr::null_mut(), priv_key.as_ptr()))?;
        mem::forget(priv_key);
        cvt(ffi::DH_generate_key(dh_ptr))?;
        mem::forget(self);
        Ok(Dh::from_ptr(dh_ptr))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: set_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs 

Found method with unsafe block in set_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 103, End Line: 110
/// Sets the public and private keys on the DH object.
pub fn set_key(
    self,
    pub_key: BigNum,
    priv_key: BigNum,
) -> Result<Dh<Private>, ErrorStack> {
    unsafe {
        let dh_ptr = self.0;
        cvt(DH_set0_key(dh_ptr, pub_key.as_ptr(), priv_key.as_ptr()))?;
        mem::forget((self, pub_key, priv_key));
        Ok(Dh::from_ptr(dh_ptr))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: generate_params, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs 

Found method with unsafe block in generate_params:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 114, End Line: 125
/// Generates DH params based on the given `prime_len` and a fixed `generator` value.
#[corresponds(DH_generate_parameters_ex)]
pub fn generate_params(
    prime_len: u32,
    generator: u32,
) -> Result<Dh<Params>, ErrorStack> {
    unsafe {
        let dh = Dh::from_ptr(cvt_p(ffi::DH_new())?);
        cvt(
            ffi::DH_generate_parameters_ex(
                dh.0,
                prime_len as i32,
                generator as i32,
                ptr::null_mut(),
            ),
        )?;
        Ok(dh)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: generate_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs 

Found method with unsafe block in generate_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 129, End Line: 136
/// Generates a public and a private key based on the DH params.
#[corresponds(DH_generate_key)]
pub fn generate_key(self) -> Result<Dh<Private>, ErrorStack> {
    unsafe {
        let dh_ptr = self.0;
        cvt(ffi::DH_generate_key(dh_ptr))?;
        mem::forget(self);
        Ok(Dh::from_ptr(dh_ptr))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: get_1024_160, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs 

Found method with unsafe block in get_1024_160:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 159, End Line: 164
/// Requires OpenSSL 1.0.2 or newer.
#[corresponds(DH_get_1024_160)]
#[cfg(any(ossl102, ossl110))]
pub fn get_1024_160() -> Result<Dh<Params>, ErrorStack> {
    unsafe {
        ffi::init();
        cvt_p(ffi::DH_get_1024_160()).map(|p| Dh::from_ptr(p))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: get_2048_224, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs 

Found method with unsafe block in get_2048_224:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 169, End Line: 174
/// Requires OpenSSL 1.0.2 or newer.
#[corresponds(DH_get_2048_224)]
#[cfg(any(ossl102, ossl110))]
pub fn get_2048_224() -> Result<Dh<Params>, ErrorStack> {
    unsafe {
        ffi::init();
        cvt_p(ffi::DH_get_2048_224()).map(|p| Dh::from_ptr(p))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: get_2048_256, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs 

Found method with unsafe block in get_2048_256:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 179, End Line: 184
/// Requires OpenSSL 1.0.2 or newer.
#[corresponds(DH_get_2048_256)]
#[cfg(any(ossl102, ossl110))]
pub fn get_2048_256() -> Result<Dh<Params>, ErrorStack> {
    unsafe {
        ffi::init();
        cvt_p(ffi::DH_get_2048_256()).map(|p| Dh::from_ptr(p))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: prime_p, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs 

Found method with unsafe block in prime_p:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 193, End Line: 199
/// Returns the prime `p` from the DH instance.
#[corresponds(DH_get0_pqg)]
pub fn prime_p(&self) -> &BigNumRef {
    let mut p = ptr::null();
    unsafe {
        DH_get0_pqg(self.as_ptr(), &mut p, ptr::null_mut(), ptr::null_mut());
        BigNumRef::from_ptr(p as *mut _)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: prime_q, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs 

Found method with unsafe block in prime_q:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 203, End Line: 213
/// Returns the prime `q` from the DH instance.
#[corresponds(DH_get0_pqg)]
pub fn prime_q(&self) -> Option<&BigNumRef> {
    let mut q = ptr::null();
    unsafe {
        DH_get0_pqg(self.as_ptr(), ptr::null_mut(), &mut q, ptr::null_mut());
        if q.is_null() { None } else { Some(BigNumRef::from_ptr(q as *mut _)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: generator, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs 

Found method with unsafe block in generator:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 217, End Line: 223
/// Returns the generator from the DH instance.
#[corresponds(DH_get0_pqg)]
pub fn generator(&self) -> &BigNumRef {
    let mut g = ptr::null();
    unsafe {
        DH_get0_pqg(self.as_ptr(), ptr::null_mut(), ptr::null_mut(), &mut g);
        BigNumRef::from_ptr(g as *mut _)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: public_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs 

Found method with unsafe block in public_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 232, End Line: 238
/// Returns the public key from the DH instance.
#[corresponds(DH_get0_key)]
pub fn public_key(&self) -> &BigNumRef {
    let mut pub_key = ptr::null();
    unsafe {
        DH_get0_key(self.as_ptr(), &mut pub_key, ptr::null_mut());
        BigNumRef::from_ptr(pub_key as *mut _)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: compute_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs 

Found method with unsafe block in compute_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 247, End Line: 258
/// Computes a shared secret from the own private key and the given `public_key`.
#[corresponds(DH_compute_key)]
pub fn compute_key(&self, public_key: &BigNumRef) -> Result<Vec<u8>, ErrorStack> {
    unsafe {
        let key_len = ffi::DH_size(self.as_ptr());
        let mut key = vec![0u8; key_len as usize];
        cvt(ffi::DH_compute_key(key.as_mut_ptr(), public_key.as_ptr(), self.as_ptr()))?;
        Ok(key)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: private_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs 

Found method with unsafe block in private_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dh.rs
Start Line: 262, End Line: 268
/// Returns the private key from the DH instance.
#[corresponds(DH_get0_key)]
pub fn private_key(&self) -> &BigNumRef {
    let mut priv_key = ptr::null();
    unsafe {
        DH_get0_key(self.as_ptr(), ptr::null_mut(), &mut priv_key);
        BigNumRef::from_ptr(priv_key as *mut _)
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: pub_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs 

Found method with unsafe block in pub_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Start Line: 104, End Line: 110
/// Returns a reference to the public key component of `self`.
#[corresponds(DSA_get0_key)]
pub fn pub_key(&self) -> &BigNumRef {
    unsafe {
        let mut pub_key = ptr::null();
        DSA_get0_key(self.as_ptr(), &mut pub_key, ptr::null_mut());
        BigNumRef::from_const_ptr(pub_key)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: priv_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs 

Found method with unsafe block in priv_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Start Line: 140, End Line: 146
/// Returns a reference to the private key component of `self`.
#[corresponds(DSA_get0_key)]
pub fn priv_key(&self) -> &BigNumRef {
    unsafe {
        let mut priv_key = ptr::null();
        DSA_get0_key(self.as_ptr(), ptr::null_mut(), &mut priv_key);
        BigNumRef::from_const_ptr(priv_key)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: q, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs 

Found method with unsafe block in q:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Start Line: 171, End Line: 177
/// Returns the DSA sub-prime parameter of `self`.
#[corresponds(DSA_get0_pqg)]
pub fn q(&self) -> &BigNumRef {
    unsafe {
        let mut q = ptr::null();
        DSA_get0_pqg(self.as_ptr(), ptr::null_mut(), &mut q, ptr::null_mut());
        BigNumRef::from_const_ptr(q)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: g, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs 

Found method with unsafe block in g:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Start Line: 181, End Line: 187
/// Returns the DSA base parameter of `self`.
#[corresponds(DSA_get0_pqg)]
pub fn g(&self) -> &BigNumRef {
    unsafe {
        let mut g = ptr::null();
        DSA_get0_pqg(self.as_ptr(), ptr::null_mut(), ptr::null_mut(), &mut g);
        BigNumRef::from_const_ptr(g)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, complex: false, name: from_private_components, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs 

Found method with unsafe block in from_private_components:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Start Line: 251, End Line: 267
/// Create a DSA key pair with the given parameters
///
/// `p`, `q` and `g` are the common parameters.
/// `priv_key` is the private component of the key pair.
/// `pub_key` is the public component of the key. Can be computed via `g^(priv_key) mod p`
pub fn from_private_components(
    p: BigNum,
    q: BigNum,
    g: BigNum,
    priv_key: BigNum,
    pub_key: BigNum,
) -> Result<Dsa<Private>, ErrorStack> {
    ffi::init();
    unsafe {
        let dsa = Dsa::from_ptr(cvt_p(ffi::DSA_new())?);
        cvt(DSA_set0_pqg(dsa.0, p.as_ptr(), q.as_ptr(), g.as_ptr()))?;
        mem::forget((p, q, g));
        cvt(DSA_set0_key(dsa.0, pub_key.as_ptr(), priv_key.as_ptr()))?;
        mem::forget((pub_key, priv_key));
        Ok(dsa)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, complex: false, name: from_public_components, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs 

Found method with unsafe block in from_public_components:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Start Line: 293, End Line: 308
/// Create a new DSA key with only public components.
///
/// `p`, `q` and `g` are the common parameters.
/// `pub_key` is the public component of the key.
pub fn from_public_components(
    p: BigNum,
    q: BigNum,
    g: BigNum,
    pub_key: BigNum,
) -> Result<Dsa<Public>, ErrorStack> {
    ffi::init();
    unsafe {
        let dsa = Dsa::from_ptr(cvt_p(ffi::DSA_new())?);
        cvt(DSA_set0_pqg(dsa.0, p.as_ptr(), q.as_ptr(), g.as_ptr()))?;
        mem::forget((p, q, g));
        cvt(DSA_set0_key(dsa.0, pub_key.as_ptr(), ptr::null_mut()))?;
        mem::forget(pub_key);
        Ok(dsa)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: s, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs 

Found method with unsafe block in s:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\dsa.rs
Start Line: 487, End Line: 493
/// Returns internal component `s` of an `DsaSig`.
#[corresponds(DSA_SIG_get0)]
pub fn s(&self) -> &BigNumRef {
    unsafe {
        let mut s = ptr::null();
        DSA_SIG_get0(self.as_ptr(), ptr::null_mut(), &mut s);
        BigNumRef::from_const_ptr(s)
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: from_curve_name, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in from_curve_name:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 141, End Line: 146
/// Returns the group of a standard named curve.
///
/// # Examples
///
/// ```
/// # fn main() -> Result<(), Box<dyn std::error::Error>> {
/// use openssl::nid::Nid;
/// use openssl::ec::{EcGroup, EcKey};
///
/// let nid = Nid::X9_62_PRIME256V1; // NIST P-256 curve
/// let group = EcGroup::from_curve_name(nid)?;
/// let key = EcKey::generate(&group)?;
/// # Ok(()) }
/// ```
#[corresponds(EC_GROUP_new_by_curve_name)]
pub fn from_curve_name(nid: Nid) -> Result<EcGroup, ErrorStack> {
    unsafe {
        init();
        cvt_p(ffi::EC_GROUP_new_by_curve_name(nid.as_raw())).map(EcGroup)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: from_components, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in from_components:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 150, End Line: 165
/// Returns the group for given parameters
#[corresponds(EC_GROUP_new_curve_GFp)]
pub fn from_components(
    p: BigNum,
    a: BigNum,
    b: BigNum,
    ctx: &mut BigNumContextRef,
) -> Result<EcGroup, ErrorStack> {
    unsafe {
        cvt_p(
                ffi::EC_GROUP_new_curve_GFp(
                    p.as_ptr(),
                    a.as_ptr(),
                    b.as_ptr(),
                    ctx.as_ptr(),
                ),
            )
            .map(EcGroup)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: components_gfp, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in components_gfp:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 172, End Line: 189
/// Places the components of a curve over a prime field in the provided `BigNum`s.
/// The components make up the formula `y^2 mod p = x^3 + ax + b mod p`.
#[corresponds(EC_GROUP_get_curve_GFp)]
pub fn components_gfp(
    &self,
    p: &mut BigNumRef,
    a: &mut BigNumRef,
    b: &mut BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::EC_GROUP_get_curve_GFp(
                    self.as_ptr(),
                    p.as_ptr(),
                    a.as_ptr(),
                    b.as_ptr(),
                    ctx.as_ptr(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: components_gf2m, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in components_gf2m:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 199, End Line: 216
/// Places the components of a curve over a binary field in the provided `BigNum`s.
/// The components make up the formula `y^2 + xy = x^3 + ax^2 + b`.
///
/// In this form `p` relates to the irreducible polynomial.  Each bit represents
/// a term in the polynomial.  It will be set to 3 `1`s or 5 `1`s depending on
/// using a trinomial or pentanomial.
#[corresponds(EC_GROUP_get_curve_GF2m)]
#[cfg(not(osslconf = "OPENSSL_NO_EC2M"))]
pub fn components_gf2m(
    &self,
    p: &mut BigNumRef,
    a: &mut BigNumRef,
    b: &mut BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::EC_GROUP_get_curve_GF2m(
                    self.as_ptr(),
                    p.as_ptr(),
                    a.as_ptr(),
                    b.as_ptr(),
                    ctx.as_ptr(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: cofactor, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in cofactor:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 220, End Line: 233
/// Places the cofactor of the group in the provided `BigNum`.
#[corresponds(EC_GROUP_get_cofactor)]
pub fn cofactor(
    &self,
    cofactor: &mut BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EC_GROUP_get_cofactor(self.as_ptr(), cofactor.as_ptr(), ctx.as_ptr()))
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: degree, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in degree:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 237, End Line: 239
/// Returns the degree of the curve.
#[corresponds(EC_GROUP_get_degree)]
pub fn degree(&self) -> u32 {
    unsafe { ffi::EC_GROUP_get_degree(self.as_ptr()) as u32 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: order_bits, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in order_bits:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 244, End Line: 246
/// Returns the number of bits in the group order.
#[corresponds(EC_GROUP_order_bits)]
#[cfg(ossl110)]
pub fn order_bits(&self) -> u32 {
    unsafe { ffi::EC_GROUP_order_bits(self.as_ptr()) as u32 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_generator, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in set_generator:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 259, End Line: 274
/// Sets the generator point for the given curve
#[corresponds(EC_GROUP_set_generator)]
pub fn set_generator(
    &mut self,
    generator: EcPoint,
    order: BigNum,
    cofactor: BigNum,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::EC_GROUP_set_generator(
                    self.as_ptr(),
                    generator.as_ptr(),
                    order.as_ptr(),
                    cofactor.as_ptr(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: order, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in order:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 278, End Line: 291
/// Places the order of the curve in the provided `BigNum`.
#[corresponds(EC_GROUP_get_order)]
pub fn order(
    &self,
    order: &mut BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EC_GROUP_get_order(self.as_ptr(), order.as_ptr(), ctx.as_ptr()))
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_asn1_flag, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in set_asn1_flag:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 299, End Line: 303
/// Sets the flag determining if the group corresponds to a named curve or must be explicitly
/// parameterized.
///
/// This defaults to `EXPLICIT_CURVE` in OpenSSL 1.0.1 and 1.0.2, but `NAMED_CURVE` in OpenSSL
/// 1.1.0.
#[corresponds(EC_GROUP_set_asn1_flag)]
pub fn set_asn1_flag(&mut self, flag: Asn1Flag) {
    unsafe {
        ffi::EC_GROUP_set_asn1_flag(self.as_ptr(), flag.0);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: asn1_flag, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in asn1_flag:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 307, End Line: 309
/// Gets the flag determining if the group corresponds to a named curve.
#[corresponds(EC_GROUP_get_asn1_flag)]
pub fn asn1_flag(&self) -> Asn1Flag {
    unsafe { Asn1Flag(ffi::EC_GROUP_get_asn1_flag(self.as_ptr())) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: curve_name, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in curve_name:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 313, End Line: 320
/// Returns the name of the curve, if a name is associated.
#[corresponds(EC_GROUP_get_curve_name)]
pub fn curve_name(&self) -> Option<Nid> {
    let nid = unsafe { ffi::EC_GROUP_get_curve_name(self.as_ptr()) };
    if nid > 0 { Some(Nid::from_raw(nid)) } else { None }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: mul_generator, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in mul_generator:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 380, End Line: 398
/// Computes `generator * n`, storing the result in `self`.
#[corresponds(EC_POINT_mul)]
pub fn mul_generator(
    &mut self,
    group: &EcGroupRef,
    n: &BigNumRef,
    ctx: &BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::EC_POINT_mul(
                    group.as_ptr(),
                    self.as_ptr(),
                    n.as_ptr(),
                    ptr::null(),
                    ptr::null(),
                    ctx.as_ptr(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: mul_full, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in mul_full:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 402, End Line: 421
/// Computes `generator * n + q * m`, storing the result in `self`.
#[corresponds(EC_POINT_mul)]
pub fn mul_full(
    &mut self,
    group: &EcGroupRef,
    n: &BigNumRef,
    q: &EcPointRef,
    m: &BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::EC_POINT_mul(
                    group.as_ptr(),
                    self.as_ptr(),
                    n.as_ptr(),
                    q.as_ptr(),
                    m.as_ptr(),
                    ctx.as_ptr(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: invert, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in invert:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 426, End Line: 435
/// Inverts `self`.
#[corresponds(EC_POINT_invert)]
pub fn invert(
    &mut self,
    group: &EcGroupRef,
    ctx: &BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EC_POINT_invert(group.as_ptr(), self.as_ptr(), ctx.as_ptr()))
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: true, name: to_bytes, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in to_bytes:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 439, End Line: 472
/// Serializes the point to a binary representation.
#[corresponds(EC_POINT_point2oct)]
pub fn to_bytes(
    &self,
    group: &EcGroupRef,
    form: PointConversionForm,
    ctx: &mut BigNumContextRef,
) -> Result<Vec<u8>, ErrorStack> {
    unsafe {
        let len = ffi::EC_POINT_point2oct(
            group.as_ptr(),
            self.as_ptr(),
            form.0,
            ptr::null_mut(),
            0,
            ctx.as_ptr(),
        );
        if len == 0 {
            return Err(ErrorStack::get());
        }
        let mut buf = vec![0; len];
        let len = ffi::EC_POINT_point2oct(
            group.as_ptr(),
            self.as_ptr(),
            form.0,
            buf.as_mut_ptr(),
            len,
            ctx.as_ptr(),
        );
        if len == 0 { Err(ErrorStack::get()) } else { Ok(buf) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: affine_coordinates, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in affine_coordinates:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 523, End Line: 540
/// Places affine coordinates of a curve over a prime field in the provided
/// `x` and `y` `BigNum`s.
#[corresponds(EC_POINT_get_affine_coordinates)]
#[cfg(any(ossl111, boringssl, libressl350))]
pub fn affine_coordinates(
    &self,
    group: &EcGroupRef,
    x: &mut BigNumRef,
    y: &mut BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::EC_POINT_get_affine_coordinates(
                    group.as_ptr(),
                    self.as_ptr(),
                    x.as_ptr(),
                    y.as_ptr(),
                    ctx.as_ptr(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: affine_coordinates_gfp, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in affine_coordinates_gfp:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 545, End Line: 562
/// Places affine coordinates of a curve over a prime field in the provided
/// `x` and `y` `BigNum`s
#[corresponds(EC_POINT_get_affine_coordinates_GFp)]
pub fn affine_coordinates_gfp(
    &self,
    group: &EcGroupRef,
    x: &mut BigNumRef,
    y: &mut BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::EC_POINT_get_affine_coordinates_GFp(
                    group.as_ptr(),
                    self.as_ptr(),
                    x.as_ptr(),
                    y.as_ptr(),
                    ctx.as_ptr(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_affine_coordinates_gfp, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in set_affine_coordinates_gfp:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 567, End Line: 584
/// Sets affine coordinates of a curve over a prime field using the provided
/// `x` and `y` `BigNum`s
#[corresponds(EC_POINT_set_affine_coordinates_GFp)]
pub fn set_affine_coordinates_gfp(
    &mut self,
    group: &EcGroupRef,
    x: &BigNumRef,
    y: &BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::EC_POINT_set_affine_coordinates_GFp(
                    group.as_ptr(),
                    self.as_ptr(),
                    x.as_ptr(),
                    y.as_ptr(),
                    ctx.as_ptr(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: affine_coordinates_gf2m, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in affine_coordinates_gf2m:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 590, End Line: 607
/// Places affine coordinates of a curve over a binary field in the provided
/// `x` and `y` `BigNum`s
#[corresponds(EC_POINT_get_affine_coordinates_GF2m)]
#[cfg(not(osslconf = "OPENSSL_NO_EC2M"))]
pub fn affine_coordinates_gf2m(
    &self,
    group: &EcGroupRef,
    x: &mut BigNumRef,
    y: &mut BigNumRef,
    ctx: &mut BigNumContextRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::EC_POINT_get_affine_coordinates_GF2m(
                    group.as_ptr(),
                    self.as_ptr(),
                    x.as_ptr(),
                    y.as_ptr(),
                    ctx.as_ptr(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: is_infinity, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in is_infinity:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 611, End Line: 616
/// Checks if point is infinity
#[corresponds(EC_POINT_is_at_infinity)]
pub fn is_infinity(&self, group: &EcGroupRef) -> bool {
    unsafe {
        let res = ffi::EC_POINT_is_at_infinity(group.as_ptr(), self.as_ptr());
        res == 1
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: is_on_curve, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in is_on_curve:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 620, End Line: 633
/// Checks if point is on a given curve
#[corresponds(EC_POINT_is_on_curve)]
pub fn is_on_curve(
    &self,
    group: &EcGroupRef,
    ctx: &mut BigNumContextRef,
) -> Result<bool, ErrorStack> {
    unsafe {
        let res = cvt_n(
            ffi::EC_POINT_is_on_curve(group.as_ptr(), self.as_ptr(), ctx.as_ptr()),
        )?;
        Ok(res == 1)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: group, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in group:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 766, End Line: 771
/// Returns the key's group.
#[corresponds(EC_KEY_get0_group)]
pub fn group(&self) -> &EcGroupRef {
    unsafe {
        let ptr = ffi::EC_KEY_get0_group(self.as_ptr());
        EcGroupRef::from_const_ptr(ptr)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: from_group, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in from_group:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 807, End Line: 815
/// Constructs an `EcKey` corresponding to a curve.
#[corresponds(EC_KEY_set_group)]
pub fn from_group(group: &EcGroupRef) -> Result<EcKey<Params>, ErrorStack> {
    unsafe {
        cvt_p(ffi::EC_KEY_new())
            .map(|p| EcKey::from_ptr(p))
            .and_then(|key| {
                cvt(ffi::EC_KEY_set_group(key.as_ptr(), group.as_ptr())).map(|_| key)
            })
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: from_public_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in from_public_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 847, End Line: 865
/// Constructs an `EcKey` from the specified group with the associated [`EcPoint`]: `public_key`.
///
/// This will only have the associated `public_key`.
///
/// # Example
///
/// ```
/// # fn main() -> Result<(), Box<dyn std::error::Error>> {
/// use openssl::bn::BigNumContext;
/// use openssl::ec::*;
/// use openssl::nid::Nid;
/// use openssl::pkey::PKey;
///
/// let group = EcGroup::from_curve_name(Nid::SECP384R1)?;
/// let mut ctx = BigNumContext::new()?;
///
/// // get bytes from somewhere
/// let public_key = // ...
/// # EcKey::generate(&group)?.public_key().to_bytes(&group,
/// # PointConversionForm::COMPRESSED, &mut ctx)?;
///
/// // create an EcKey from the binary form of a EcPoint
/// let point = EcPoint::from_bytes(&group, &public_key, &mut ctx)?;
/// let key = EcKey::from_public_key(&group, &point)?;
/// key.check_key()?;
/// # Ok(()) }
/// ```
#[corresponds(EC_KEY_set_public_key)]
pub fn from_public_key(
    group: &EcGroupRef,
    public_key: &EcPointRef,
) -> Result<EcKey<Public>, ErrorStack> {
    unsafe {
        cvt_p(ffi::EC_KEY_new())
            .map(|p| EcKey::from_ptr(p))
            .and_then(|key| {
                cvt(ffi::EC_KEY_set_group(key.as_ptr(), group.as_ptr())).map(|_| key)
            })
            .and_then(|key| {
                cvt(ffi::EC_KEY_set_public_key(key.as_ptr(), public_key.as_ptr()))
                    .map(|_| key)
            })
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: from_public_key_affine_coordinates, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs 

Found method with unsafe block in from_public_key_affine_coordinates:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ec.rs
Start Line: 869, End Line: 889
/// Constructs a public key from its affine coordinates.
#[corresponds(EC_KEY_set_public_key_affine_coordinates)]
pub fn from_public_key_affine_coordinates(
    group: &EcGroupRef,
    x: &BigNumRef,
    y: &BigNumRef,
) -> Result<EcKey<Public>, ErrorStack> {
    unsafe {
        cvt_p(ffi::EC_KEY_new())
            .map(|p| EcKey::from_ptr(p))
            .and_then(|key| {
                cvt(ffi::EC_KEY_set_group(key.as_ptr(), group.as_ptr())).map(|_| key)
            })
            .and_then(|key| {
                cvt(
                        ffi::EC_KEY_set_public_key_affine_coordinates(
                            key.as_ptr(),
                            x.as_ptr(),
                            y.as_ptr(),
                        ),
                    )
                    .map(|_| key)
            })
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ecdsa.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: rsa_padding, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs 

Found method with unsafe block in rsa_padding:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Start Line: 102, End Line: 108
/// Returns the RSA padding mode in use.
///
/// This is only useful for RSA keys.
///
/// This corresponds to `EVP_PKEY_CTX_get_rsa_padding`.
pub fn rsa_padding(&self) -> Result<Padding, ErrorStack> {
    unsafe {
        let mut pad = 0;
        cvt(ffi::EVP_PKEY_CTX_get_rsa_padding(self.pctx, &mut pad))
            .map(|_| Padding::from_raw(pad))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_rsa_padding, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs 

Found method with unsafe block in set_rsa_padding:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Start Line: 117, End Line: 125
/// Sets the RSA padding mode.
///
/// This is only useful for RSA keys.
///
/// This corresponds to [`EVP_PKEY_CTX_set_rsa_padding`].
///
/// [`EVP_PKEY_CTX_set_rsa_padding`]: https://www.openssl.org/docs/manmaster/crypto/EVP_PKEY_CTX_set_rsa_padding.html
pub fn set_rsa_padding(&mut self, padding: Padding) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_set_rsa_padding(self.pctx, padding.as_raw())).map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_rsa_mgf1_md, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs 

Found method with unsafe block in set_rsa_mgf1_md:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Start Line: 134, End Line: 142
/// Sets the RSA MGF1 algorithm.
///
/// This is only useful for RSA keys.
///
/// This corresponds to [`EVP_PKEY_CTX_set_rsa_mgf1_md`].
///
/// [`EVP_PKEY_CTX_set_rsa_mgf1_md`]: https://www.openssl.org/docs/manmaster/man7/RSA-PSS.html
pub fn set_rsa_mgf1_md(&mut self, md: MessageDigest) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_set_rsa_mgf1_md(self.pctx, md.as_ptr() as *mut _))
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_rsa_oaep_md, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs 

Found method with unsafe block in set_rsa_oaep_md:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Start Line: 152, End Line: 160
/// Sets the RSA OAEP algorithm.
///
/// This is only useful for RSA keys.
///
/// This corresponds to [`EVP_PKEY_CTX_set_rsa_oaep_md`].
///
/// [`EVP_PKEY_CTX_set_rsa_oaep_md`]: https://www.openssl.org/docs/manmaster/man3/EVP_PKEY_CTX_set_rsa_oaep_md.html
#[cfg(any(ossl102, libressl310))]
pub fn set_rsa_oaep_md(&mut self, md: MessageDigest) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_set_rsa_oaep_md(self.pctx, md.as_ptr() as *mut _))
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: set_rsa_oaep_label, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs 

Found method with unsafe block in set_rsa_oaep_label:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Start Line: 170, End Line: 186
/// Sets the RSA OAEP label.
///
/// This is only useful for RSA keys.
///
/// This corresponds to [`EVP_PKEY_CTX_set0_rsa_oaep_label`].
///
/// [`EVP_PKEY_CTX_set0_rsa_oaep_label`]: https://www.openssl.org/docs/manmaster/man3/EVP_PKEY_CTX_set0_rsa_oaep_label.html
#[cfg(any(ossl102, libressl310))]
pub fn set_rsa_oaep_label(&mut self, label: &[u8]) -> Result<(), ErrorStack> {
    unsafe {
        let p = cvt_p(ffi::OPENSSL_malloc(label.len() as _))?;
        ptr::copy_nonoverlapping(label.as_ptr(), p as *mut u8, label.len());
        cvt(ffi::EVP_PKEY_CTX_set0_rsa_oaep_label(self.pctx, p, label.len() as c_int))
            .map(|_| ())
            .map_err(|e| {
                ffi::OPENSSL_free(p);
                e
            })
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: encrypt_len, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs 

Found method with unsafe block in encrypt_len:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Start Line: 241, End Line: 254
/// Gets the size of the buffer needed to encrypt the input data.
///
/// This corresponds to [`EVP_PKEY_encrypt`] called with a null pointer as output argument.
///
/// [`EVP_PKEY_encrypt`]: https://www.openssl.org/docs/manmaster/man3/EVP_PKEY_encrypt.html
pub fn encrypt_len(&self, from: &[u8]) -> Result<usize, ErrorStack> {
    let mut written = 0;
    unsafe {
        cvt(
            ffi::EVP_PKEY_encrypt(
                self.pctx,
                ptr::null_mut(),
                &mut written,
                from.as_ptr(),
                from.len(),
            ),
        )?;
    }
    Ok(written)
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: decrypt_len, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs 

Found method with unsafe block in decrypt_len:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\encrypt.rs
Start Line: 460, End Line: 473
/// Gets the size of the buffer needed to decrypt the input data.
///
/// This corresponds to [`EVP_PKEY_decrypt`] called with a null pointer as output argument.
///
/// [`EVP_PKEY_decrypt`]: https://www.openssl.org/docs/manmaster/man3/EVP_PKEY_decrypt.html
pub fn decrypt_len(&self, from: &[u8]) -> Result<usize, ErrorStack> {
    let mut written = 0;
    unsafe {
        cvt(
            ffi::EVP_PKEY_decrypt(
                self.pctx,
                ptr::null_mut(),
                &mut written,
                from.as_ptr(),
                from.len(),
            ),
        )?;
    }
    Ok(written)
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\envelope.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\error.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: put_error, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\error.rs 

Found method with unsafe block in put_error:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\error.rs
Start Line: 193, End Line: 203
#[cfg(ossl300)]
fn put_error(&self) {
    unsafe {
        ffi::ERR_new();
        ffi::ERR_set_debug(
            self.file.as_ptr(),
            self.line,
            self.func.as_ref().map_or(ptr::null(), |s| s.as_ptr()),
        );
        ffi::ERR_set_error(self.library_code(), self.reason_code(), ptr::null());
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: true, name: library, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\error.rs 

Found method with unsafe block in library:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\error.rs
Start Line: 228, End Line: 237
/// Returns the name of the library reporting the error, if available.
pub fn library(&self) -> Option<&'static str> {
    unsafe {
        let cstr = ffi::ERR_lib_error_string(self.code);
        if cstr.is_null() {
            return None;
        }
        let bytes = CStr::from_ptr(cstr as *const _).to_bytes();
        Some(str::from_utf8(bytes).unwrap())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: library_code, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\error.rs 

Found method with unsafe block in library_code:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\error.rs
Start Line: 244, End Line: 246
/// Returns the raw OpenSSL error constant for the library reporting the
/// error.
#[allow(unused_unsafe)]
pub fn library_code(&self) -> libc::c_int {
    unsafe { ffi::ERR_GET_LIB(self.code) }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: true, name: reason, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\error.rs 

Found method with unsafe block in reason:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\error.rs
Start Line: 254, End Line: 263
/// Returns the reason for the error.
pub fn reason(&self) -> Option<&'static str> {
    unsafe {
        let cstr = ffi::ERR_reason_error_string(self.code);
        if cstr.is_null() {
            return None;
        }
        let bytes = CStr::from_ptr(cstr as *const _).to_bytes();
        Some(str::from_utf8(bytes).unwrap())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: reason_code, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\error.rs 

Found method with unsafe block in reason_code:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\error.rs
Start Line: 269, End Line: 271
/// Returns the raw OpenSSL error constant for the reason for the error.
#[allow(unused_unsafe)]
pub fn reason_code(&self) -> libc::c_int {
    unsafe { ffi::ERR_GET_REASON(self.code) }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ex_data.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\fips.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: enable, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\fips.rs 

Found function with unsafe block in enable:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\fips.rs
Start Line: 12, End Line: 15
/// Moves the library into or out of the FIPS 140-2 mode of operation.
#[corresponds(FIPS_mode_set)]
pub fn enable(enabled: bool) -> Result<(), ErrorStack> {
    ffi::init();
    unsafe { cvt(ffi::FIPS_mode_set(enabled as _)).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: enabled, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\fips.rs 

Found function with unsafe block in enabled:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\fips.rs
Start Line: 19, End Line: 21
/// Determines if the library is running in the FIPS 140-2 mode of operation.
#[corresponds(FIPS_mode)]
pub fn enabled() -> bool {
    unsafe { ffi::FIPS_mode() != 0 }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: from_name, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs 

Found method with unsafe block in from_name:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 88, End Line: 99
/// Returns the `MessageDigest` corresponding to an algorithm name.
///
/// This corresponds to [`EVP_get_digestbyname`].
///
/// [`EVP_get_digestbyname`]: https://www.openssl.org/docs/manmaster/crypto/EVP_DigestInit.html
pub fn from_name(name: &str) -> Option<MessageDigest> {
    ffi::init();
    let name = CString::new(name).ok()?;
    unsafe {
        let ptr = ffi::EVP_get_digestbyname(name.as_ptr());
        if ptr.is_null() { None } else { Some(MessageDigest(ptr)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: md5, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs 

Found method with unsafe block in md5:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 106, End Line: 108
pub fn md5() -> MessageDigest {
    unsafe { MessageDigest(ffi::EVP_md5()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sha1, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs 

Found method with unsafe block in sha1:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 110, End Line: 112
pub fn sha1() -> MessageDigest {
    unsafe { MessageDigest(ffi::EVP_sha1()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sha224, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs 

Found method with unsafe block in sha224:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 114, End Line: 116
pub fn sha224() -> MessageDigest {
    unsafe { MessageDigest(ffi::EVP_sha224()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sha256, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs 

Found method with unsafe block in sha256:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 118, End Line: 120
pub fn sha256() -> MessageDigest {
    unsafe { MessageDigest(ffi::EVP_sha256()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sha384, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs 

Found method with unsafe block in sha384:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 122, End Line: 124
pub fn sha384() -> MessageDigest {
    unsafe { MessageDigest(ffi::EVP_sha384()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sha512, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs 

Found method with unsafe block in sha512:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 126, End Line: 128
pub fn sha512() -> MessageDigest {
    unsafe { MessageDigest(ffi::EVP_sha512()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sha3_224, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs 

Found method with unsafe block in sha3_224:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 131, End Line: 133
#[cfg(any(ossl111, libressl380))]
pub fn sha3_224() -> MessageDigest {
    unsafe { MessageDigest(ffi::EVP_sha3_224()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sha3_256, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs 

Found method with unsafe block in sha3_256:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 136, End Line: 138
#[cfg(any(ossl111, libressl380))]
pub fn sha3_256() -> MessageDigest {
    unsafe { MessageDigest(ffi::EVP_sha3_256()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sha3_384, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs 

Found method with unsafe block in sha3_384:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 141, End Line: 143
#[cfg(any(ossl111, libressl380))]
pub fn sha3_384() -> MessageDigest {
    unsafe { MessageDigest(ffi::EVP_sha3_384()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sha3_512, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs 

Found method with unsafe block in sha3_512:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 146, End Line: 148
#[cfg(any(ossl111, libressl380))]
pub fn sha3_512() -> MessageDigest {
    unsafe { MessageDigest(ffi::EVP_sha3_512()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: shake_128, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs 

Found method with unsafe block in shake_128:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 151, End Line: 153
#[cfg(ossl111)]
pub fn shake_128() -> MessageDigest {
    unsafe { MessageDigest(ffi::EVP_shake128()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: shake_256, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs 

Found method with unsafe block in shake_256:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 156, End Line: 158
#[cfg(ossl111)]
pub fn shake_256() -> MessageDigest {
    unsafe { MessageDigest(ffi::EVP_shake256()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: ripemd160, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs 

Found method with unsafe block in ripemd160:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 161, End Line: 163
#[cfg(not(osslconf = "OPENSSL_NO_RMD160"))]
pub fn ripemd160() -> MessageDigest {
    unsafe { MessageDigest(ffi::EVP_ripemd160()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sm3, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs 

Found method with unsafe block in sm3:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 166, End Line: 168
#[cfg(all(any(ossl111, libressl291), not(osslconf = "OPENSSL_NO_SM3")))]
pub fn sm3() -> MessageDigest {
    unsafe { MessageDigest(ffi::EVP_sm3()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: type_, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs 

Found method with unsafe block in type_:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 189, End Line: 191
/// The name of the digest.
#[allow(clippy::trivially_copy_pass_by_ref)]
pub fn type_(&self) -> Nid {
    Nid::from_raw(unsafe { ffi::EVP_MD_type(self.0) })
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: finish_xof, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs 

Found method with unsafe block in finish_xof:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\hash.rs
Start Line: 319, End Line: 332
/// Writes the hash of the data into the supplied buf and resets the XOF hasher.
/// The hash will be as long as the buf.
#[cfg(ossl111)]
pub fn finish_xof(&mut self, buf: &mut [u8]) -> Result<(), ErrorStack> {
    if self.state == Finalized {
        self.init()?;
    }
    unsafe {
        cvt(ffi::EVP_DigestFinalXOF(self.ctx, buf.as_mut_ptr(), buf.len()))?;
        self.state = Finalized;
        Ok(())
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\lib_ctx.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\macros.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: shake128, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs 

Found method with unsafe block in shake128:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Start Line: 179, End Line: 181
#[cfg(ossl111)]
#[inline]
pub fn shake128() -> &'static MdRef {
    unsafe { MdRef::from_ptr(ffi::EVP_shake128() as *mut _) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: shake256, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs 

Found method with unsafe block in shake256:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md.rs
Start Line: 185, End Line: 187
#[cfg(ossl111)]
#[inline]
pub fn shake256() -> &'static MdRef {
    unsafe { MdRef::from_ptr(ffi::EVP_shake256() as *mut _) }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: digest_init, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs 

Found method with unsafe block in digest_init:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 130, End Line: 140
/// Initializes the context to compute the digest of data.
#[corresponds(EVP_DigestInit_ex)]
#[inline]
pub fn digest_init(&mut self, digest: &MdRef) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_DigestInit_ex(self.as_ptr(), digest.as_ptr(), ptr::null_mut()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: digest_sign_init, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs 

Found method with unsafe block in digest_sign_init:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 147, End Line: 166
/// Initializes the context to compute the signature of data.
///
/// A reference to the context's inner `PkeyCtx` is returned, allowing signature settings to be configured.
#[corresponds(EVP_DigestSignInit)]
#[inline]
pub fn digest_sign_init<'a, T>(
    &'a mut self,
    digest: Option<&MdRef>,
    pkey: &PKeyRef<T>,
) -> Result<&'a mut PkeyCtxRef<T>, ErrorStack>
where
    T: HasPrivate,
{
    unsafe {
        let mut p = ptr::null_mut();
        cvt(
            ffi::EVP_DigestSignInit(
                self.as_ptr(),
                &mut p,
                digest.map_or(ptr::null(), |p| p.as_ptr()),
                ptr::null_mut(),
                pkey.as_ptr(),
            ),
        )?;
        Ok(PkeyCtxRef::from_ptr_mut(p))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: digest_verify_init, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs 

Found method with unsafe block in digest_verify_init:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 173, End Line: 192
/// Initializes the context to verify the signature of data.
///
/// A reference to the context's inner `PkeyCtx` is returned, allowing signature settings to be configured.
#[corresponds(EVP_DigestVerifyInit)]
#[inline]
pub fn digest_verify_init<'a, T>(
    &'a mut self,
    digest: Option<&MdRef>,
    pkey: &PKeyRef<T>,
) -> Result<&'a mut PkeyCtxRef<T>, ErrorStack>
where
    T: HasPublic,
{
    unsafe {
        let mut p = ptr::null_mut();
        cvt(
            ffi::EVP_DigestVerifyInit(
                self.as_ptr(),
                &mut p,
                digest.map_or(ptr::null(), |p| p.as_ptr()),
                ptr::null_mut(),
                pkey.as_ptr(),
            ),
        )?;
        Ok(PkeyCtxRef::from_ptr_mut(p))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: digest_update, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs 

Found method with unsafe block in digest_update:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 197, End Line: 207
/// Updates the context with more data.
#[corresponds(EVP_DigestUpdate)]
#[inline]
pub fn digest_update(&mut self, data: &[u8]) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
            ffi::EVP_DigestUpdate(self.as_ptr(), data.as_ptr() as *const _, data.len()),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: digest_sign_update, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs 

Found method with unsafe block in digest_sign_update:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 212, End Line: 222
/// Updates the context with more data.
#[corresponds(EVP_DigestSignUpdate)]
#[inline]
pub fn digest_sign_update(&mut self, data: &[u8]) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
            ffi::EVP_DigestSignUpdate(
                self.as_ptr(),
                data.as_ptr() as *const _,
                data.len(),
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: digest_verify_update, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs 

Found method with unsafe block in digest_verify_update:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 227, End Line: 237
/// Updates the context with more data.
#[corresponds(EVP_DigestVerifyUpdate)]
#[inline]
pub fn digest_verify_update(&mut self, data: &[u8]) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
            ffi::EVP_DigestVerifyUpdate(
                self.as_ptr(),
                data.as_ptr() as *const _,
                data.len(),
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: digest_final, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs 

Found method with unsafe block in digest_final:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 242, End Line: 254
/// Copies the computed digest into the buffer, returning the number of bytes written.
#[corresponds(EVP_DigestFinal)]
#[inline]
pub fn digest_final(&mut self, out: &mut [u8]) -> Result<usize, ErrorStack> {
    let mut len = u32::try_from(out.len()).unwrap_or(u32::MAX);
    unsafe {
        cvt(ffi::EVP_DigestFinal(self.as_ptr(), out.as_mut_ptr(), &mut len))?;
    }
    Ok(len as usize)
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: digest_final_xof, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs 

Found method with unsafe block in digest_final_xof:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 262, End Line: 272
/// Copies the computed digest into the buffer.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(EVP_DigestFinalXOF)]
#[inline]
#[cfg(ossl111)]
pub fn digest_final_xof(&mut self, out: &mut [u8]) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_DigestFinalXOF(self.as_ptr(), out.as_mut_ptr(), out.len()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: digest_sign_final, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs 

Found method with unsafe block in digest_sign_final:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 280, End Line: 292
/// Signs the computed digest.
///
/// If `out` is set to `None`, an upper bound on the number of bytes required for the output buffer will be
/// returned.
#[corresponds(EVP_DigestSignFinal)]
#[inline]
pub fn digest_sign_final(
    &mut self,
    out: Option<&mut [u8]>,
) -> Result<usize, ErrorStack> {
    let mut len = out.as_ref().map_or(0, |b| b.len());
    unsafe {
        cvt(
            ffi::EVP_DigestSignFinal(
                self.as_ptr(),
                out.map_or(ptr::null_mut(), |b| b.as_mut_ptr()),
                &mut len,
            ),
        )?;
    }
    Ok(len)
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: digest_verify_final, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs 

Found method with unsafe block in digest_verify_final:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 310, End Line: 319
/// Verifies the provided signature.
///
/// Returns `Ok(true)` if the signature is valid, `Ok(false)` if the signature is invalid, and `Err` if an error
/// occurred.
#[corresponds(EVP_DigestVerifyFinal)]
#[inline]
pub fn digest_verify_final(&mut self, signature: &[u8]) -> Result<bool, ErrorStack> {
    unsafe {
        let r = cvt_n(
            ffi::EVP_DigestVerifyFinal(
                self.as_ptr(),
                signature.as_ptr() as *mut _,
                signature.len(),
            ),
        )?;
        Ok(r == 1)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: digest_sign, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs 

Found method with unsafe block in digest_sign:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 330, End Line: 344
/// Computes the signature of the data in `from`.
///
/// If `to` is set to `None`, an upper bound on the number of bytes required for the output buffer will be
/// returned.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(EVP_DigestSign)]
#[cfg(ossl111)]
#[inline]
pub fn digest_sign(
    &mut self,
    from: &[u8],
    to: Option<&mut [u8]>,
) -> Result<usize, ErrorStack> {
    let mut len = to.as_ref().map_or(0, |b| b.len());
    unsafe {
        cvt(
            ffi::EVP_DigestSign(
                self.as_ptr(),
                to.map_or(ptr::null_mut(), |b| b.as_mut_ptr()),
                &mut len,
                from.as_ptr(),
                from.len(),
            ),
        )?;
    }
    Ok(len)
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: digest_verify, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs 

Found method with unsafe block in digest_verify:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\md_ctx.rs
Start Line: 370, End Line: 381
/// Verifies the signature of the data in `data`.
///
/// Returns `Ok(true)` if the signature is valid, `Ok(false)` if the signature is invalid, and `Err` if an error
/// occurred.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(EVP_DigestVerify)]
#[cfg(ossl111)]
#[inline]
pub fn digest_verify(
    &mut self,
    data: &[u8],
    signature: &[u8],
) -> Result<bool, ErrorStack> {
    unsafe {
        let r = cvt(
            ffi::EVP_DigestVerify(
                self.as_ptr(),
                signature.as_ptr(),
                signature.len(),
                data.as_ptr(),
                data.len(),
            ),
        )?;
        Ok(r == 1)
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\memcmp.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\nid.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: true, name: signature_algorithms, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\nid.rs 

Found method with unsafe block in signature_algorithms:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\nid.rs
Start Line: 86, End Line: 99
/// Returns the `Nid`s of the digest and public key algorithms associated with a signature ID.
///
/// This corresponds to `OBJ_find_sigid_algs`.
#[corresponds(OBJ_find_sigid_algs)]
#[allow(clippy::trivially_copy_pass_by_ref)]
pub fn signature_algorithms(&self) -> Option<SignatureAlgorithms> {
    unsafe {
        let mut digest = 0;
        let mut pkey = 0;
        if ffi::OBJ_find_sigid_algs(self.0, &mut digest, &mut pkey) == 1 {
            Some(SignatureAlgorithms {
                digest: Nid(digest),
                pkey: Nid(pkey),
            })
        } else {
            None
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: long_name, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\nid.rs 

Found method with unsafe block in long_name:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\nid.rs
Start Line: 104, End Line: 109
/// Returns the string representation of a `Nid` (long).
#[corresponds(OBJ_nid2ln)]
#[allow(clippy::trivially_copy_pass_by_ref)]
pub fn long_name(&self) -> Result<&'static str, ErrorStack> {
    unsafe {
        cvt_p(ffi::OBJ_nid2ln(self.0) as *mut c_char)
            .map(|nameptr| str::from_utf8(CStr::from_ptr(nameptr).to_bytes()).unwrap())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: short_name, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\nid.rs 

Found method with unsafe block in short_name:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\nid.rs
Start Line: 114, End Line: 119
/// Returns the string representation of a `Nid` (short).
#[corresponds(OBJ_nid2sn)]
#[allow(clippy::trivially_copy_pass_by_ref)]
pub fn short_name(&self) -> Result<&'static str, ErrorStack> {
    unsafe {
        cvt_p(ffi::OBJ_nid2sn(self.0) as *mut c_char)
            .map(|nameptr| str::from_utf8(CStr::from_ptr(nameptr).to_bytes()).unwrap())
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: check_validity, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs 

Found method with unsafe block in check_validity:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs
Start Line: 134, End Line: 144
/// Checks validity of the `this_update` and `next_update` fields.
///
/// The `nsec` parameter specifies an amount of slack time that will be used when comparing
/// those times with the current time to account for delays and clock skew.
///
/// The `maxsec` parameter limits the maximum age of the `this_update` parameter to prohibit
/// very old responses.
#[corresponds(OCSP_check_validity)]
pub fn check_validity(&self, nsec: u32, maxsec: Option<u32>) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::OCSP_check_validity(
                    self.this_update.as_ptr(),
                    self.next_update.as_ptr(),
                    nsec as c_long,
                    maxsec.map(|n| n as c_long).unwrap_or(-1),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 7 statements, complex: true, name: find_status, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs 

Found method with unsafe block in find_status:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs
Start Line: 180, End Line: 211
/// Looks up the status for the specified certificate ID.
#[corresponds(OCSP_resp_find_status)]
pub fn find_status<'a>(&'a self, id: &OcspCertIdRef) -> Option<OcspStatus<'a>> {
    unsafe {
        let mut status = ffi::V_OCSP_CERTSTATUS_UNKNOWN;
        let mut reason = ffi::OCSP_REVOKED_STATUS_NOSTATUS;
        let mut revocation_time = ptr::null_mut();
        let mut this_update = ptr::null_mut();
        let mut next_update = ptr::null_mut();
        let r = ffi::OCSP_resp_find_status(
            self.as_ptr(),
            id.as_ptr(),
            &mut status,
            &mut reason,
            &mut revocation_time,
            &mut this_update,
            &mut next_update,
        );
        if r == 1 {
            let revocation_time = Asn1GeneralizedTimeRef::from_const_ptr_opt(
                revocation_time,
            );
            Some(OcspStatus {
                status: OcspCertStatus(status),
                reason: OcspRevokedStatus(status),
                revocation_time,
                this_update: Asn1GeneralizedTimeRef::from_ptr(this_update),
                next_update: Asn1GeneralizedTimeRef::from_ptr(next_update),
            })
        } else {
            None
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: from_cert, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs 

Found method with unsafe block in from_cert:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs
Start Line: 225, End Line: 238
/// Constructs a certificate ID for certificate `subject`.
#[corresponds(OCSP_cert_to_id)]
pub fn from_cert(
    digest: MessageDigest,
    subject: &X509Ref,
    issuer: &X509Ref,
) -> Result<OcspCertId, ErrorStack> {
    unsafe {
        cvt_p(ffi::OCSP_cert_to_id(digest.as_ptr(), subject.as_ptr(), issuer.as_ptr()))
            .map(OcspCertId)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: add_id, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs 

Found method with unsafe block in add_id:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ocsp.rs
Start Line: 337, End Line: 343
#[corresponds(OCSP_request_add0_id)]
pub fn add_id(&mut self, id: OcspCertId) -> Result<&mut OcspOneReqRef, ErrorStack> {
    unsafe {
        let ptr = cvt_p(ffi::OCSP_request_add0_id(self.as_ptr(), id.as_ptr()))?;
        mem::forget(id);
        Ok(OcspOneReqRef::from_ptr_mut(ptr))
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs12.rs
-----------------------------------------------------------------
Checking unsafe block with 9 statements, complex: false, name: parse2, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs12.rs 

Found method with unsafe block in parse2:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs12.rs
Start Line: 50, End Line: 72
/// Extracts the contents of the `Pkcs12`.
#[corresponds(PKCS12_parse)]
pub fn parse2(&self, pass: &str) -> Result<ParsedPkcs12_2, ErrorStack> {
    unsafe {
        let pass = CString::new(pass.as_bytes()).unwrap();
        let mut pkey = ptr::null_mut();
        let mut cert = ptr::null_mut();
        let mut ca = ptr::null_mut();
        cvt(
            ffi::PKCS12_parse(
                self.as_ptr(),
                pass.as_ptr(),
                &mut pkey,
                &mut cert,
                &mut ca,
            ),
        )?;
        let pkey = PKey::from_ptr_opt(pkey);
        let cert = X509::from_ptr_opt(cert);
        let ca = Stack::from_ptr_opt(ca);
        Ok(ParsedPkcs12_2 { pkey, cert, ca })
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: pkey, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs12.rs 

Found method with unsafe block in pkey:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs12.rs
Start Line: 147, End Line: 154
/// The private key.
pub fn pkey<T>(&mut self, pkey: &PKeyRef<T>) -> &mut Self
where
    T: HasPrivate,
{
    let new_pkey = unsafe { PKeyRef::from_ptr(pkey.as_ptr()) };
    self.pkey = Some(new_pkey.to_owned());
    self
}



-----------------------------------------------------------------
Checking unsafe block with 12 statements, complex: false, name: build2, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs12.rs 

Found method with unsafe block in build2:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs12.rs
Start Line: 226, End Line: 282
/// Builds the PKCS#12 object.
#[corresponds(PKCS12_create)]
pub fn build2(&self, password: &str) -> Result<Pkcs12, ErrorStack> {
    unsafe {
        let pass = CString::new(password).unwrap();
        let pass = pass.as_ptr();
        let friendly_name = self.name.as_ref().map_or(ptr::null(), |p| p.as_ptr());
        let pkey = self.pkey.as_ref().map_or(ptr::null(), |p| p.as_ptr());
        let cert = self.cert.as_ref().map_or(ptr::null(), |p| p.as_ptr());
        let ca = self.ca.as_ref().map(|ca| ca.as_ptr()).unwrap_or(ptr::null_mut());
        let nid_key = self.nid_key.as_raw();
        let nid_cert = self.nid_cert.as_raw();
        let keytype = 0;
        let pkcs12 = cvt_p(
                ffi::PKCS12_create(
                    pass as *mut _,
                    friendly_name as *mut _,
                    pkey as *mut _,
                    cert as *mut _,
                    ca,
                    nid_key,
                    nid_cert,
                    self.iter,
                    self.mac_iter,
                    keytype,
                ),
            )
            .map(Pkcs12)?;
        #[cfg(not(boringssl))]
        {
            let md_type = self
                .mac_md
                .map(|md_type| md_type.as_ptr())
                .unwrap_or(ptr::null());
            cvt(
                ffi::PKCS12_set_mac(
                    pkcs12.as_ptr(),
                    pass,
                    -1,
                    ptr::null_mut(),
                    0,
                    self.mac_iter,
                    md_type,
                ),
            )?;
        }
        Ok(pkcs12)
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs5.rs
-----------------------------------------------------------------
Checking unsafe block with 11 statements, complex: false, name: bytes_to_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs5.rs 

Found function with unsafe block in bytes_to_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs5.rs
Start Line: 33, End Line: 87
/// Derives a key and an IV from various parameters.
///
/// If specified, `salt` must be 8 bytes in length.
///
/// If the total key and IV length is less than 16 bytes and MD5 is used then
/// the algorithm is compatible with the key derivation algorithm from PKCS#5
/// v1.5 or PBKDF1 from PKCS#5 v2.0.
///
/// New applications should not use this and instead use
/// `pbkdf2_hmac` or another more modern key derivation algorithm.
#[corresponds(EVP_BytesToKey)]
#[allow(clippy::useless_conversion)]
#[cfg(not(boringssl))]
pub fn bytes_to_key(
    cipher: Cipher,
    digest: MessageDigest,
    data: &[u8],
    salt: Option<&[u8]>,
    count: i32,
) -> Result<KeyIvPair, ErrorStack> {
    unsafe {
        assert!(data.len() <= c_int::MAX as usize);
        let salt_ptr = match salt {
            Some(salt) => {
                assert_eq!(salt.len(), ffi::PKCS5_SALT_LEN as usize);
                salt.as_ptr()
            }
            None => ptr::null(),
        };
        ffi::init();
        let mut iv = cipher.iv_len().map(|l| vec![0; l]);
        let cipher = cipher.as_ptr();
        let digest = digest.as_ptr();
        let len = cvt(
            ffi::EVP_BytesToKey(
                cipher,
                digest,
                salt_ptr,
                ptr::null(),
                data.len() as c_int,
                count.into(),
                ptr::null_mut(),
                ptr::null_mut(),
            ),
        )?;
        let mut key = vec![0; len as usize];
        let iv_ptr = iv.as_mut().map(|v| v.as_mut_ptr()).unwrap_or(ptr::null_mut());
        cvt(
            ffi::EVP_BytesToKey(
                cipher,
                digest,
                salt_ptr,
                data.as_ptr(),
                data.len() as c_int,
                count as c_int,
                key.as_mut_ptr(),
                iv_ptr,
            ),
        )?;
        Ok(KeyIvPair { key, iv })
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: pbkdf2_hmac, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs5.rs 

Found function with unsafe block in pbkdf2_hmac:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs5.rs
Start Line: 91, End Line: 112
/// Derives a key from a password and salt using the PBKDF2-HMAC algorithm with a digest function.
#[corresponds(PKCS5_PBKDF2_HMAC)]
pub fn pbkdf2_hmac(
    pass: &[u8],
    salt: &[u8],
    iter: usize,
    hash: MessageDigest,
    key: &mut [u8],
) -> Result<(), ErrorStack> {
    unsafe {
        ffi::init();
        cvt(
                ffi::PKCS5_PBKDF2_HMAC(
                    pass.as_ptr() as *const _,
                    pass.len().try_into().unwrap(),
                    salt.as_ptr(),
                    salt.len().try_into().unwrap(),
                    iter.try_into().unwrap(),
                    hash.as_ptr(),
                    key.len().try_into().unwrap(),
                    key.as_mut_ptr(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: scrypt, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs5.rs 

Found function with unsafe block in scrypt:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs5.rs
Start Line: 120, End Line: 145
/// Derives a key from a password and salt using the scrypt algorithm.
///
/// Requires OpenSSL 1.1.0 or newer.
#[corresponds(EVP_PBE_scrypt)]
#[cfg(all(any(ossl110, boringssl), not(osslconf = "OPENSSL_NO_SCRYPT")))]
#[allow(clippy::useless_conversion)]
pub fn scrypt(
    pass: &[u8],
    salt: &[u8],
    n: u64,
    r: u64,
    p: u64,
    maxmem: u64,
    key: &mut [u8],
) -> Result<(), ErrorStack> {
    unsafe {
        ffi::init();
        cvt(
                ffi::EVP_PBE_scrypt(
                    pass.as_ptr() as *const _,
                    pass.len(),
                    salt.as_ptr() as *const _,
                    salt.len(),
                    n,
                    r,
                    p,
                    maxmem.try_into().unwrap(),
                    key.as_mut_ptr() as *mut _,
                    key.len(),
                ),
            )
            .map(|_| ())
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: from_smime, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs 

Found method with unsafe block in from_smime:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs
Start Line: 107, End Line: 123
/// Parses a message in S/MIME format.
///
/// Returns the loaded signature, along with the cleartext message (if
/// available).
#[corresponds(SMIME_read_PKCS7)]
pub fn from_smime(input: &[u8]) -> Result<(Pkcs7, Option<Vec<u8>>), ErrorStack> {
    ffi::init();
    let input_bio = MemBioSlice::new(input)?;
    let mut bcont_bio = ptr::null_mut();
    unsafe {
        let pkcs7 = cvt_p(ffi::SMIME_read_PKCS7(input_bio.as_ptr(), &mut bcont_bio))
            .map(Pkcs7)?;
        let out = if !bcont_bio.is_null() {
            let bcont_bio = MemBio::from_ptr(bcont_bio);
            Some(bcont_bio.get_buf().to_vec())
        } else {
            None
        };
        Ok((pkcs7, out))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: to_smime, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs 

Found method with unsafe block in to_smime:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs
Start Line: 184, End Line: 196
/// Converts PKCS#7 structure to S/MIME format
#[corresponds(SMIME_write_PKCS7)]
pub fn to_smime(&self, input: &[u8], flags: Pkcs7Flags) -> Result<Vec<u8>, ErrorStack> {
    let input_bio = MemBioSlice::new(input)?;
    let output = MemBio::new()?;
    unsafe {
        cvt(
                ffi::SMIME_write_PKCS7(
                    output.as_ptr(),
                    self.as_ptr(),
                    input_bio.as_ptr(),
                    flags.bits(),
                ),
            )
            .map(|_| output.get_buf().to_owned())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: true, name: signers, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs 

Found method with unsafe block in signers:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs
Start Line: 289, End Line: 311
/// Retrieve the signer's certificates from the PKCS#7 structure without verifying them.
#[corresponds(PKCS7_get0_signers)]
pub fn signers(
    &self,
    certs: &StackRef<X509>,
    flags: Pkcs7Flags,
) -> Result<Stack<X509>, ErrorStack> {
    unsafe {
        let ptr = cvt_p(
            ffi::PKCS7_get0_signers(self.as_ptr(), certs.as_ptr(), flags.bits()),
        )?;
        let stack = Stack::<X509>::from_ptr(ptr);
        for cert in &stack {
            mem::forget(cert.to_owned());
        }
        Ok(stack)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: certificates, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs 

Found method with unsafe block in certificates:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkcs7.rs
Start Line: 335, End Line: 342
/// Get the stack of certificates from the PKCS7_SIGNED object
pub fn certificates(&self) -> Option<&StackRef<X509>> {
    unsafe {
        self.as_ptr()
            .as_ref()
            .and_then(|x| x.cert.as_mut())
            .and_then(|x| StackRef::<X509>::from_const_ptr_opt(x))
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: rsa, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in rsa:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 164, End Line: 169
/// Returns a copy of the internal RSA key.
#[corresponds(EVP_PKEY_get1_RSA)]
pub fn rsa(&self) -> Result<Rsa<T>, ErrorStack> {
    unsafe {
        let rsa = cvt_p(ffi::EVP_PKEY_get1_RSA(self.as_ptr()))?;
        Ok(Rsa::from_ptr(rsa))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: dsa, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in dsa:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 173, End Line: 178
/// Returns a copy of the internal DSA key.
#[corresponds(EVP_PKEY_get1_DSA)]
pub fn dsa(&self) -> Result<Dsa<T>, ErrorStack> {
    unsafe {
        let dsa = cvt_p(ffi::EVP_PKEY_get1_DSA(self.as_ptr()))?;
        Ok(Dsa::from_ptr(dsa))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: dh, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in dh:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 182, End Line: 187
/// Returns a copy of the internal DH key.
#[corresponds(EVP_PKEY_get1_DH)]
pub fn dh(&self) -> Result<Dh<T>, ErrorStack> {
    unsafe {
        let dh = cvt_p(ffi::EVP_PKEY_get1_DH(self.as_ptr()))?;
        Ok(Dh::from_ptr(dh))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: ec_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in ec_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 191, End Line: 196
/// Returns a copy of the internal elliptic curve key.
#[corresponds(EVP_PKEY_get1_EC_KEY)]
pub fn ec_key(&self) -> Result<EcKey<T>, ErrorStack> {
    unsafe {
        let ec_key = cvt_p(ffi::EVP_PKEY_get1_EC_KEY(self.as_ptr()))?;
        Ok(EcKey::from_ptr(ec_key))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: bits, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in bits:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 236, End Line: 238
/// Returns the size of the key.
///
/// This corresponds to the bit length of the modulus of an RSA key, and the bit length of the
/// group order for an elliptic curve key, for example.
#[corresponds(EVP_PKEY_bits)]
pub fn bits(&self) -> u32 {
    unsafe { ffi::EVP_PKEY_bits(self.as_ptr()) as u32 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: security_bits, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in security_bits:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 245, End Line: 247
///Returns the number of security bits.
///
///Bits of security is defined in NIST SP800-57.
#[corresponds(EVP_PKEY_security_bits)]
#[cfg(any(ossl110, libressl360))]
pub fn security_bits(&self) -> u32 {
    unsafe { ffi::EVP_PKEY_security_bits(self.as_ptr()) as u32 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: public_eq, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in public_eq:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 251, End Line: 260
/// Compares the public component of this key with another.
#[corresponds(EVP_PKEY_cmp)]
pub fn public_eq<U>(&self, other: &PKeyRef<U>) -> bool
where
    U: HasPublic,
{
    let res = unsafe { ffi::EVP_PKEY_cmp(self.as_ptr(), other.as_ptr()) == 1 };
    let _ = ErrorStack::get();
    res
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, complex: false, name: raw_public_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in raw_public_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 268, End Line: 285
/// Raw byte representation of a public key.
///
/// This function only works for algorithms that support raw public keys.
/// Currently this is: [`Id::X25519`], [`Id::ED25519`], [`Id::X448`] or [`Id::ED448`].
#[corresponds(EVP_PKEY_get_raw_public_key)]
#[cfg(any(ossl111, boringssl, libressl370))]
pub fn raw_public_key(&self) -> Result<Vec<u8>, ErrorStack> {
    unsafe {
        let mut len = 0;
        cvt(ffi::EVP_PKEY_get_raw_public_key(self.as_ptr(), ptr::null_mut(), &mut len))?;
        let mut buf = vec![0u8; len];
        cvt(
            ffi::EVP_PKEY_get_raw_public_key(self.as_ptr(), buf.as_mut_ptr(), &mut len),
        )?;
        buf.truncate(len);
        Ok(buf)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, complex: false, name: raw_private_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in raw_private_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 319, End Line: 336
/// Raw byte representation of a private key.
///
/// This function only works for algorithms that support raw private keys.
/// Currently this is: [`Id::HMAC`], [`Id::X25519`], [`Id::ED25519`], [`Id::X448`] or [`Id::ED448`].
#[corresponds(EVP_PKEY_get_raw_private_key)]
#[cfg(any(ossl111, boringssl, libressl370))]
pub fn raw_private_key(&self) -> Result<Vec<u8>, ErrorStack> {
    unsafe {
        let mut len = 0;
        cvt(
            ffi::EVP_PKEY_get_raw_private_key(self.as_ptr(), ptr::null_mut(), &mut len),
        )?;
        let mut buf = vec![0u8; len];
        cvt(
            ffi::EVP_PKEY_get_raw_private_key(self.as_ptr(), buf.as_mut_ptr(), &mut len),
        )?;
        buf.truncate(len);
        Ok(buf)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: private_key_to_pkcs8, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in private_key_to_pkcs8:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 340, End Line: 355
/// Serializes a private key into an unencrypted DER-formatted PKCS#8
#[corresponds(i2d_PKCS8PrivateKey_bio)]
pub fn private_key_to_pkcs8(&self) -> Result<Vec<u8>, ErrorStack> {
    unsafe {
        let bio = MemBio::new()?;
        cvt(
            ffi::i2d_PKCS8PrivateKey_bio(
                bio.as_ptr(),
                self.as_ptr(),
                ptr::null(),
                ptr::null_mut(),
                0,
                None,
                ptr::null_mut(),
            ),
        )?;
        Ok(bio.get_buf().to_owned())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: private_key_to_pkcs8_passphrase, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in private_key_to_pkcs8_passphrase:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 360, End Line: 379
/// Serializes a private key into a DER-formatted PKCS#8, using the supplied password to
/// encrypt the key.
#[corresponds(i2d_PKCS8PrivateKey_bio)]
pub fn private_key_to_pkcs8_passphrase(
    &self,
    cipher: Cipher,
    passphrase: &[u8],
) -> Result<Vec<u8>, ErrorStack> {
    unsafe {
        let bio = MemBio::new()?;
        cvt(
            ffi::i2d_PKCS8PrivateKey_bio(
                bio.as_ptr(),
                self.as_ptr(),
                cipher.as_ptr(),
                passphrase.as_ptr() as *const _ as *mut _,
                passphrase.len().try_into().unwrap(),
                None,
                ptr::null_mut(),
            ),
        )?;
        Ok(bio.get_buf().to_owned())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: false, name: from_rsa, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in from_rsa:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 411, End Line: 419
/// Creates a new `PKey` containing an RSA key.
#[corresponds(EVP_PKEY_assign_RSA)]
pub fn from_rsa(rsa: Rsa<T>) -> Result<PKey<T>, ErrorStack> {
    unsafe {
        let evp = cvt_p(ffi::EVP_PKEY_new())?;
        let pkey = PKey::from_ptr(evp);
        cvt(ffi::EVP_PKEY_assign_RSA(pkey.0, rsa.as_ptr()))?;
        mem::forget(rsa);
        Ok(pkey)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: false, name: from_dsa, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in from_dsa:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 423, End Line: 431
/// Creates a new `PKey` containing a DSA key.
#[corresponds(EVP_PKEY_assign_DSA)]
pub fn from_dsa(dsa: Dsa<T>) -> Result<PKey<T>, ErrorStack> {
    unsafe {
        let evp = cvt_p(ffi::EVP_PKEY_new())?;
        let pkey = PKey::from_ptr(evp);
        cvt(ffi::EVP_PKEY_assign_DSA(pkey.0, dsa.as_ptr()))?;
        mem::forget(dsa);
        Ok(pkey)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: false, name: from_dh, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in from_dh:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 436, End Line: 444
/// Creates a new `PKey` containing a Diffie-Hellman key.
#[corresponds(EVP_PKEY_assign_DH)]
#[cfg(not(boringssl))]
pub fn from_dh(dh: Dh<T>) -> Result<PKey<T>, ErrorStack> {
    unsafe {
        let evp = cvt_p(ffi::EVP_PKEY_new())?;
        let pkey = PKey::from_ptr(evp);
        cvt(ffi::EVP_PKEY_assign_DH(pkey.0, dh.as_ptr()))?;
        mem::forget(dh);
        Ok(pkey)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: false, name: from_dhx, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in from_dhx:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 448, End Line: 460
/// Creates a new `PKey` containing a Diffie-Hellman key with type DHX.
#[cfg(all(not(boringssl), ossl110))]
pub fn from_dhx(dh: Dh<T>) -> Result<PKey<T>, ErrorStack> {
    unsafe {
        let evp = cvt_p(ffi::EVP_PKEY_new())?;
        let pkey = PKey::from_ptr(evp);
        cvt(ffi::EVP_PKEY_assign(pkey.0, ffi::EVP_PKEY_DHX, dh.as_ptr().cast()))?;
        mem::forget(dh);
        Ok(pkey)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: false, name: from_ec_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in from_ec_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 464, End Line: 472
/// Creates a new `PKey` containing an elliptic curve key.
#[corresponds(EVP_PKEY_assign_EC_KEY)]
pub fn from_ec_key(ec_key: EcKey<T>) -> Result<PKey<T>, ErrorStack> {
    unsafe {
        let evp = cvt_p(ffi::EVP_PKEY_new())?;
        let pkey = PKey::from_ptr(evp);
        cvt(ffi::EVP_PKEY_assign_EC_KEY(pkey.0, ec_key.as_ptr()))?;
        mem::forget(ec_key);
        Ok(pkey)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: hmac, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in hmac:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 483, End Line: 494
/// Creates a new `PKey` containing an HMAC key.
///
/// # Note
///
/// To compute HMAC values, use the `sign` module.
#[corresponds(EVP_PKEY_new_mac_key)]
#[cfg(not(boringssl))]
pub fn hmac(key: &[u8]) -> Result<PKey<Private>, ErrorStack> {
    unsafe {
        assert!(key.len() <= c_int::MAX as usize);
        let key = cvt_p(
            ffi::EVP_PKEY_new_mac_key(
                ffi::EVP_PKEY_HMAC,
                ptr::null_mut(),
                key.as_ptr() as *const _,
                key.len() as c_int,
            ),
        )?;
        Ok(PKey::from_ptr(key))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: cmac, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in cmac:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 505, End Line: 511
/// Creates a new `PKey` containing a CMAC key.
///
/// Requires OpenSSL 1.1.0 or newer.
///
/// # Note
///
/// To compute CMAC values, use the `sign` module.
#[cfg(all(not(boringssl), ossl110))]
#[allow(clippy::trivially_copy_pass_by_ref)]
pub fn cmac(cipher: &Cipher, key: &[u8]) -> Result<PKey<Private>, ErrorStack> {
    let mut ctx = PkeyCtx::new_id(Id::CMAC)?;
    ctx.keygen_init()?;
    ctx.set_keygen_cipher(unsafe { CipherRef::from_ptr(cipher.as_ptr() as *mut _) })?;
    ctx.set_keygen_mac_key(key)?;
    ctx.keygen()
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: ec_gen, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in ec_gen:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 633, End Line: 641
/// Generates a new EC key using the provided curve.
///
/// Requires OpenSSL 3.0.0 or newer.
#[corresponds(EVP_EC_gen)]
#[cfg(ossl300)]
pub fn ec_gen(curve: &str) -> Result<PKey<Private>, ErrorStack> {
    ffi::init();
    let curve = CString::new(curve).unwrap();
    unsafe {
        let ptr = cvt_p(ffi::EVP_EC_gen(curve.as_ptr()))?;
        Ok(PKey::from_ptr(ptr))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, complex: false, name: private_key_from_pkcs8, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in private_key_from_pkcs8:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 676, End Line: 689
/// Deserializes a DER-formatted PKCS#8 unencrypted private key.
///
/// This method is mainly for interoperability reasons. Encrypted keyfiles should be preferred.
pub fn private_key_from_pkcs8(der: &[u8]) -> Result<PKey<Private>, ErrorStack> {
    unsafe {
        ffi::init();
        let len = der.len().min(c_long::MAX as usize) as c_long;
        let p8inf = cvt_p(
            ffi::d2i_PKCS8_PRIV_KEY_INFO(ptr::null_mut(), &mut der.as_ptr(), len),
        )?;
        let res = cvt_p(ffi::EVP_PKCS82PKEY(p8inf)).map(|p| PKey::from_ptr(p));
        ffi::PKCS8_PRIV_KEY_INFO_free(p8inf);
        res
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: private_key_from_pkcs8_callback, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in private_key_from_pkcs8_callback:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 697, End Line: 716
/// Deserializes a DER-formatted PKCS#8 private key, using a callback to retrieve the password
/// if the key is encrypted.
///
/// The callback should copy the password into the provided buffer and return the number of
/// bytes written.
#[corresponds(d2i_PKCS8PrivateKey_bio)]
pub fn private_key_from_pkcs8_callback<F>(
    der: &[u8],
    callback: F,
) -> Result<PKey<Private>, ErrorStack>
where
    F: FnOnce(&mut [u8]) -> Result<usize, ErrorStack>,
{
    unsafe {
        ffi::init();
        let mut cb = CallbackState::new(callback);
        let bio = MemBioSlice::new(der)?;
        cvt_p(
                ffi::d2i_PKCS8PrivateKey_bio(
                    bio.as_ptr(),
                    ptr::null_mut(),
                    Some(invoke_passwd_cb::<F>),
                    &mut cb as *mut _ as *mut _,
                ),
            )
            .map(|p| PKey::from_ptr(p))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: private_key_from_pkcs8_passphrase, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in private_key_from_pkcs8_passphrase:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 725, End Line: 741
/// Deserializes a DER-formatted PKCS#8 private key, using the supplied password if the key is
/// encrypted.
///
/// # Panics
///
/// Panics if `passphrase` contains an embedded null.
#[corresponds(d2i_PKCS8PrivateKey_bio)]
pub fn private_key_from_pkcs8_passphrase(
    der: &[u8],
    passphrase: &[u8],
) -> Result<PKey<Private>, ErrorStack> {
    unsafe {
        ffi::init();
        let bio = MemBioSlice::new(der)?;
        let passphrase = CString::new(passphrase).unwrap();
        cvt_p(
                ffi::d2i_PKCS8PrivateKey_bio(
                    bio.as_ptr(),
                    ptr::null_mut(),
                    None,
                    passphrase.as_ptr() as *const _ as *mut _,
                ),
            )
            .map(|p| PKey::from_ptr(p))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: private_key_from_raw_bytes, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in private_key_from_raw_bytes:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 748, End Line: 762
/// Creates a private key from its raw byte representation
///
/// Algorithm types that support raw private keys are HMAC, X25519, ED25519, X448 or ED448
#[corresponds(EVP_PKEY_new_raw_private_key)]
#[cfg(any(ossl111, boringssl, libressl370))]
pub fn private_key_from_raw_bytes(
    bytes: &[u8],
    key_type: Id,
) -> Result<PKey<Private>, ErrorStack> {
    unsafe {
        ffi::init();
        cvt_p(
                ffi::EVP_PKEY_new_raw_private_key(
                    key_type.as_raw(),
                    ptr::null_mut(),
                    bytes.as_ptr(),
                    bytes.len(),
                ),
            )
            .map(|p| PKey::from_ptr(p))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: public_key_from_raw_bytes, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs 

Found method with unsafe block in public_key_from_raw_bytes:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey.rs
Start Line: 799, End Line: 813
/// Creates a public key from its raw byte representation
///
/// Algorithm types that support raw public keys are X25519, ED25519, X448 or ED448
#[corresponds(EVP_PKEY_new_raw_public_key)]
#[cfg(any(ossl111, boringssl, libressl370))]
pub fn public_key_from_raw_bytes(
    bytes: &[u8],
    key_type: Id,
) -> Result<PKey<Public>, ErrorStack> {
    unsafe {
        ffi::init();
        cvt_p(
                ffi::EVP_PKEY_new_raw_public_key(
                    key_type.as_raw(),
                    ptr::null_mut(),
                    bytes.as_ptr(),
                    bytes.len(),
                ),
            )
            .map(|p| PKey::from_ptr(p))
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: new_id, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in new_id:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 153, End Line: 158
/// Creates a new pkey context for the specified algorithm ID.
#[corresponds(EVP_PKEY_new_id)]
#[inline]
pub fn new_id(id: Id) -> Result<Self, ErrorStack> {
    unsafe {
        let ptr = cvt_p(ffi::EVP_PKEY_CTX_new_id(id.as_raw(), ptr::null_mut()))?;
        Ok(PkeyCtx::from_ptr(ptr))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: verify_init, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in verify_init:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 179, End Line: 185
/// Prepares the context for signature verification using the public key.
#[corresponds(EVP_PKEY_verify_init)]
#[inline]
pub fn verify_init(&mut self) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_verify_init(self.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: verify_recover_init, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in verify_recover_init:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 190, End Line: 196
/// Prepares the context for signature recovery using the public key.
#[corresponds(EVP_PKEY_verify_recover_init)]
#[inline]
pub fn verify_recover_init(&mut self) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_verify_recover_init(self.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: verify_recover, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in verify_recover:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 273, End Line: 290
/// Recovers the original data signed by the private key. You almost
/// always want `verify` instead.
///
/// Returns the number of bytes written to `to`, or the number of bytes
/// that would be written, if `to` is `None.
#[corresponds(EVP_PKEY_verify_recover)]
#[inline]
pub fn verify_recover(
    &mut self,
    sig: &[u8],
    to: Option<&mut [u8]>,
) -> Result<usize, ErrorStack> {
    let mut written = to.as_ref().map_or(0, |b| b.len());
    unsafe {
        cvt(
            ffi::EVP_PKEY_verify_recover(
                self.as_ptr(),
                to.map_or(ptr::null_mut(), |b| b.as_mut_ptr()),
                &mut written,
                sig.as_ptr(),
                sig.len(),
            ),
        )?;
    }
    Ok(written)
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sign_init, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in sign_init:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 311, End Line: 317
/// Prepares the context for signing using the private key.
#[corresponds(EVP_PKEY_sign_init)]
#[inline]
pub fn sign_init(&mut self) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_sign_init(self.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: derive_set_peer, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in derive_set_peer:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 321, End Line: 330
/// Sets the peer key used for secret derivation.
#[corresponds(EVP_PKEY_derive_set_peer)]
pub fn derive_set_peer<U>(&mut self, key: &PKeyRef<U>) -> Result<(), ErrorStack>
where
    U: HasPublic,
{
    unsafe {
        cvt(ffi::EVP_PKEY_derive_set_peer(self.as_ptr(), key.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: derive_init, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in derive_init:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 404, End Line: 410
/// Prepares the context for shared secret derivation.
#[corresponds(EVP_PKEY_derive_init)]
#[inline]
pub fn derive_init(&mut self) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_derive_init(self.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: keygen_init, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in keygen_init:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 415, End Line: 421
/// Prepares the context for key generation.
#[corresponds(EVP_PKEY_keygen_init)]
#[inline]
pub fn keygen_init(&mut self) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_keygen_init(self.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_signature_md, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in set_signature_md:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 429, End Line: 437
/// Sets which algorithm was used to compute the digest used in a
/// signature. With RSA signatures this causes the signature to be wrapped
/// in a `DigestInfo` structure. This is almost always what you want with
/// RSA signatures.
#[corresponds(EVP_PKEY_CTX_set_signature_md)]
#[inline]
pub fn set_signature_md(&self, md: &MdRef) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_set_signature_md(self.as_ptr(), md.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_rsa_pss_saltlen, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in set_rsa_pss_saltlen:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 474, End Line: 482
/// Sets the RSA PSS salt length.
///
/// This is only useful for RSA keys.
#[corresponds(EVP_PKEY_CTX_set_rsa_pss_saltlen)]
#[inline]
pub fn set_rsa_pss_saltlen(&mut self, len: RsaPssSaltlen) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_set_rsa_pss_saltlen(self.as_ptr(), len.as_raw()))
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_keygen_cipher, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in set_keygen_cipher:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 548, End Line: 561
/// Sets the cipher used during key generation.
#[cfg(not(boringssl))]
#[corresponds(EVP_PKEY_CTX_ctrl)]
#[inline]
pub fn set_keygen_cipher(&mut self, cipher: &CipherRef) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
            ffi::EVP_PKEY_CTX_ctrl(
                self.as_ptr(),
                -1,
                ffi::EVP_PKEY_OP_KEYGEN,
                ffi::EVP_PKEY_CTRL_CIPHER,
                0,
                cipher.as_ptr() as *mut _,
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_keygen_mac_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in set_keygen_mac_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 567, End Line: 582
/// Sets the key MAC key used during key generation.
#[cfg(not(boringssl))]
#[corresponds(EVP_PKEY_CTX_ctrl)]
#[inline]
pub fn set_keygen_mac_key(&mut self, key: &[u8]) -> Result<(), ErrorStack> {
    let len = c_int::try_from(key.len()).unwrap();
    unsafe {
        cvt(
            ffi::EVP_PKEY_CTX_ctrl(
                self.as_ptr(),
                -1,
                ffi::EVP_PKEY_OP_KEYGEN,
                ffi::EVP_PKEY_CTRL_SET_MAC_KEY,
                len,
                key.as_ptr() as *mut _,
            ),
        )?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_hkdf_md, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in set_hkdf_md:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 590, End Line: 599
/// Sets the digest used for HKDF derivation.
///
/// Requires OpenSSL 1.1.0 or newer.
#[corresponds(EVP_PKEY_CTX_set_hkdf_md)]
#[cfg(any(ossl110, boringssl, libressl360))]
#[inline]
pub fn set_hkdf_md(&mut self, digest: &MdRef) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_set_hkdf_md(self.as_ptr(), digest.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_hkdf_mode, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in set_hkdf_mode:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 613, End Line: 619
/// Sets the HKDF mode of operation.
///
/// Defaults to [`HkdfMode::EXTRACT_THEN_EXPAND`].
///
/// WARNING: Although this API calls it a "mode", HKDF-Extract and HKDF-Expand are distinct
/// operations with distinct inputs and distinct kinds of keys. Callers should not pass input
/// secrets for one operation into the other.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(EVP_PKEY_CTX_set_hkdf_mode)]
#[cfg(any(ossl111, libressl360))]
#[inline]
pub fn set_hkdf_mode(&mut self, mode: HkdfMode) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_set_hkdf_mode(self.as_ptr(), mode.0))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_hkdf_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in set_hkdf_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 632, End Line: 647
/// Sets the input material for HKDF generation as the "key".
///
/// Which input is the key depends on the "mode" (see [`set_hkdf_mode`][Self::set_hkdf_mode]).
/// If [`HkdfMode::EXTRACT_THEN_EXPAND`] or [`HkdfMode::EXTRACT_ONLY`], this function specifies
/// the input keying material (IKM) for HKDF-Extract. If [`HkdfMode::EXPAND_ONLY`], it instead
/// specifies the pseudorandom key (PRK) for HKDF-Expand.
///
/// Requires OpenSSL 1.1.0 or newer.
#[corresponds(EVP_PKEY_CTX_set1_hkdf_key)]
#[cfg(any(ossl110, boringssl, libressl360))]
#[inline]
pub fn set_hkdf_key(&mut self, key: &[u8]) -> Result<(), ErrorStack> {
    #[cfg(not(boringssl))]
    let len = c_int::try_from(key.len()).unwrap();
    #[cfg(boringssl)]
    let len = key.len();
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_set1_hkdf_key(self.as_ptr(), key.as_ptr(), len))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_hkdf_salt, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in set_hkdf_salt:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 657, End Line: 672
/// Sets the salt value for HKDF generation.
///
/// If performing HKDF-Expand only, this parameter is ignored.
///
/// Requires OpenSSL 1.1.0 or newer.
#[corresponds(EVP_PKEY_CTX_set1_hkdf_salt)]
#[cfg(any(ossl110, boringssl, libressl360))]
#[inline]
pub fn set_hkdf_salt(&mut self, salt: &[u8]) -> Result<(), ErrorStack> {
    #[cfg(not(boringssl))]
    let len = c_int::try_from(salt.len()).unwrap();
    #[cfg(boringssl)]
    let len = salt.len();
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_set1_hkdf_salt(self.as_ptr(), salt.as_ptr(), len))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: add_hkdf_info, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in add_hkdf_info:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 682, End Line: 697
/// Appends info bytes for HKDF generation.
///
/// If performing HKDF-Extract only, this parameter is ignored.
///
/// Requires OpenSSL 1.1.0 or newer.
#[corresponds(EVP_PKEY_CTX_add1_hkdf_info)]
#[cfg(any(ossl110, boringssl, libressl360))]
#[inline]
pub fn add_hkdf_info(&mut self, info: &[u8]) -> Result<(), ErrorStack> {
    #[cfg(not(boringssl))]
    let len = c_int::try_from(info.len()).unwrap();
    #[cfg(boringssl)]
    let len = info.len();
    unsafe {
        cvt(ffi::EVP_PKEY_CTX_add1_hkdf_info(self.as_ptr(), info.as_ptr(), len))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: keygen, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in keygen:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 729, End Line: 735
/// Generates a new public/private keypair.
#[corresponds(EVP_PKEY_keygen)]
#[inline]
pub fn keygen(&mut self) -> Result<PKey<Private>, ErrorStack> {
    unsafe {
        let mut key = ptr::null_mut();
        cvt(ffi::EVP_PKEY_keygen(self.as_ptr(), &mut key))?;
        Ok(PKey::from_ptr(key))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: set_nonce_type, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in set_nonce_type:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 745, End Line: 757
/// Sets the nonce type for a private key context.
///
/// The nonce for DSA and ECDSA can be either random (the default) or deterministic (as defined by RFC 6979).
///
/// This is only useful for DSA and ECDSA.
/// Requires OpenSSL 3.2.0 or newer.
#[cfg(ossl320)]
#[corresponds(EVP_PKEY_CTX_set_params)]
pub fn set_nonce_type(&mut self, nonce_type: NonceType) -> Result<(), ErrorStack> {
    let nonce_field_name = CStr::from_bytes_with_nul(b"nonce-type\0").unwrap();
    let mut nonce_type = nonce_type.0;
    unsafe {
        let param_nonce = ffi::OSSL_PARAM_construct_uint(
            nonce_field_name.as_ptr(),
            &mut nonce_type,
        );
        let param_end = ffi::OSSL_PARAM_construct_end();
        let params = [param_nonce, param_end];
        cvt(ffi::EVP_PKEY_CTX_set_params(self.as_ptr(), params.as_ptr()))?;
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: nonce_type, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs 

Found method with unsafe block in nonce_type:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\pkey_ctx.rs
Start Line: 767, End Line: 782
/// Gets the nonce type for a private key context.
///
/// The nonce for DSA and ECDSA can be either random (the default) or deterministic (as defined by RFC 6979).
///
/// This is only useful for DSA and ECDSA.
/// Requires OpenSSL 3.2.0 or newer.
#[cfg(ossl320)]
#[corresponds(EVP_PKEY_CTX_get_params)]
pub fn nonce_type(&mut self) -> Result<NonceType, ErrorStack> {
    let nonce_field_name = CStr::from_bytes_with_nul(b"nonce-type\0").unwrap();
    let mut nonce_type: c_uint = 0;
    unsafe {
        let param_nonce = ffi::OSSL_PARAM_construct_uint(
            nonce_field_name.as_ptr(),
            &mut nonce_type,
        );
        let param_end = ffi::OSSL_PARAM_construct_end();
        let mut params = [param_nonce, param_end];
        cvt(ffi::EVP_PKEY_CTX_get_params(self.as_ptr(), params.as_mut_ptr()))?;
    }
    Ok(NonceType(nonce_type))
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\provider.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: load, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\provider.rs 

Found method with unsafe block in load:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\provider.rs
Start Line: 28, End Line: 38
/// Loads a new provider into the specified library context, disabling the fallback providers.
///
/// If `ctx` is `None`, the provider will be loaded in to the default library context.
#[corresponds(OSSL_provider_load)]
pub fn load(ctx: Option<&LibCtxRef>, name: &str) -> Result<Self, ErrorStack> {
    let name = CString::new(name).unwrap();
    unsafe {
        let p = cvt_p(
            ffi::OSSL_PROVIDER_load(
                ctx.map_or(ptr::null_mut(), ForeignTypeRef::as_ptr),
                name.as_ptr(),
            ),
        )?;
        Ok(Provider::from_ptr(p))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: try_load, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\provider.rs 

Found method with unsafe block in try_load:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\provider.rs
Start Line: 45, End Line: 64
/// Loads a new provider into the specified library context, disabling the fallback providers if `retain_fallbacks`
/// is `false` and the load succeeds.
///
/// If `ctx` is `None`, the provider will be loaded into the default library context.
#[corresponds(OSSL_provider_try_load)]
pub fn try_load(
    ctx: Option<&LibCtxRef>,
    name: &str,
    retain_fallbacks: bool,
) -> Result<Self, ErrorStack> {
    let name = CString::new(name).unwrap();
    unsafe {
        let p = cvt_p(
            ffi::OSSL_PROVIDER_try_load(
                ctx.map_or(ptr::null_mut(), ForeignTypeRef::as_ptr),
                name.as_ptr(),
                retain_fallbacks as _,
            ),
        )?;
        let _ = ErrorStack::get();
        Ok(Provider::from_ptr(p))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_default_search_path, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\provider.rs 

Found method with unsafe block in set_default_search_path:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\provider.rs
Start Line: 71, End Line: 80
/// Specifies the default search path that is to be used for looking for providers in the specified library context.
/// If left unspecified, an environment variable and a fall back default value will be used instead
///
/// If `ctx` is `None`, the provider will be loaded into the default library context.
#[corresponds(OSSL_PROVIDER_set_default_search_path)]
pub fn set_default_search_path(
    ctx: Option<&LibCtxRef>,
    path: &str,
) -> Result<(), ErrorStack> {
    let path = CString::new(path).unwrap();
    unsafe {
        cvt(
                ffi::OSSL_PROVIDER_set_default_search_path(
                    ctx.map_or(ptr::null_mut(), ForeignTypeRef::as_ptr),
                    path.as_ptr(),
                ),
            )
            .map(|_| ())
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rand.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: rand_bytes, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rand.rs 

Found function with unsafe block in rand_bytes:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rand.rs
Start Line: 32, End Line: 38
/// Fill buffer with cryptographically strong pseudo-random bytes.
///
/// # Examples
///
/// To generate a buffer with cryptographically strong random bytes:
///
/// ```
/// use openssl::rand::rand_bytes;
///
/// let mut buf = [0; 256];
/// rand_bytes(&mut buf).unwrap();
/// ```
#[corresponds(RAND_bytes)]
pub fn rand_bytes(buf: &mut [u8]) -> Result<(), ErrorStack> {
    unsafe {
        ffi::init();
        assert!(buf.len() <= c_int::MAX as usize);
        cvt(ffi::RAND_bytes(buf.as_mut_ptr(), buf.len() as LenType)).map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: rand_priv_bytes, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rand.rs 

Found function with unsafe block in rand_priv_bytes:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rand.rs
Start Line: 57, End Line: 63
/// Fill buffer with cryptographically strong pseudo-random bytes. It is
/// intended to be used for generating values that should remain private.
///
/// # Examples
///
/// To generate a buffer with cryptographically strong random bytes:
///
/// ```
/// use openssl::rand::rand_priv_bytes;
///
/// let mut buf = [0; 256];
/// rand_priv_bytes(&mut buf).unwrap();
/// ```
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(RAND_priv_bytes)]
#[cfg(ossl111)]
pub fn rand_priv_bytes(buf: &mut [u8]) -> Result<(), ErrorStack> {
    unsafe {
        ffi::init();
        assert!(buf.len() <= c_int::MAX as usize);
        cvt(ffi::RAND_priv_bytes(buf.as_mut_ptr(), buf.len() as LenType)).map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: keep_random_devices_open, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rand.rs 

Found function with unsafe block in keep_random_devices_open:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rand.rs
Start Line: 70, End Line: 74
/// Controls random device file descriptor behavior.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(RAND_keep_random_devices_open)]
#[cfg(ossl111)]
pub fn keep_random_devices_open(keep: bool) {
    unsafe {
        ffi::RAND_keep_random_devices_open(keep as LenType);
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: private_decrypt, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs 

Found method with unsafe block in private_decrypt:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Start Line: 126, End Line: 145
/// Decrypts data using the private key, returning the number of decrypted bytes.
///
/// # Panics
///
/// Panics if `self` has no private components, or if `to` is smaller
/// than `self.size()`.
#[corresponds(RSA_private_decrypt)]
pub fn private_decrypt(
    &self,
    from: &[u8],
    to: &mut [u8],
    padding: Padding,
) -> Result<usize, ErrorStack> {
    assert!(from.len() <= i32::MAX as usize);
    assert!(to.len() >= self.size() as usize);
    unsafe {
        let len = cvt_n(
            ffi::RSA_private_decrypt(
                from.len() as LenType,
                from.as_ptr(),
                to.as_mut_ptr(),
                self.as_ptr(),
                padding.0,
            ),
        )?;
        Ok(len as usize)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: private_encrypt, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs 

Found method with unsafe block in private_encrypt:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Start Line: 154, End Line: 173
/// Encrypts data using the private key, returning the number of encrypted bytes.
///
/// # Panics
///
/// Panics if `self` has no private components, or if `to` is smaller
/// than `self.size()`.
#[corresponds(RSA_private_encrypt)]
pub fn private_encrypt(
    &self,
    from: &[u8],
    to: &mut [u8],
    padding: Padding,
) -> Result<usize, ErrorStack> {
    assert!(from.len() <= i32::MAX as usize);
    assert!(to.len() >= self.size() as usize);
    unsafe {
        let len = cvt_n(
            ffi::RSA_private_encrypt(
                from.len() as LenType,
                from.as_ptr(),
                to.as_mut_ptr(),
                self.as_ptr(),
                padding.0,
            ),
        )?;
        Ok(len as usize)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: d, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs 

Found method with unsafe block in d:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Start Line: 177, End Line: 183
/// Returns a reference to the private exponent of the key.
#[corresponds(RSA_get0_key)]
pub fn d(&self) -> &BigNumRef {
    unsafe {
        let mut d = ptr::null();
        RSA_get0_key(self.as_ptr(), ptr::null_mut(), ptr::null_mut(), &mut d);
        BigNumRef::from_const_ptr(d)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: dmp1, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs 

Found method with unsafe block in dmp1:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Start Line: 207, End Line: 213
/// Returns a reference to the first exponent used for CRT calculations.
#[corresponds(RSA_get0_crt_params)]
pub fn dmp1(&self) -> Option<&BigNumRef> {
    unsafe {
        let mut dp = ptr::null();
        RSA_get0_crt_params(self.as_ptr(), &mut dp, ptr::null_mut(), ptr::null_mut());
        BigNumRef::from_const_ptr_opt(dp)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: dmq1, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs 

Found method with unsafe block in dmq1:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Start Line: 217, End Line: 223
/// Returns a reference to the second exponent used for CRT calculations.
#[corresponds(RSA_get0_crt_params)]
pub fn dmq1(&self) -> Option<&BigNumRef> {
    unsafe {
        let mut dq = ptr::null();
        RSA_get0_crt_params(self.as_ptr(), ptr::null_mut(), &mut dq, ptr::null_mut());
        BigNumRef::from_const_ptr_opt(dq)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: iqmp, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs 

Found method with unsafe block in iqmp:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Start Line: 227, End Line: 233
/// Returns a reference to the coefficient used for CRT calculations.
#[corresponds(RSA_get0_crt_params)]
pub fn iqmp(&self) -> Option<&BigNumRef> {
    unsafe {
        let mut qi = ptr::null();
        RSA_get0_crt_params(self.as_ptr(), ptr::null_mut(), ptr::null_mut(), &mut qi);
        BigNumRef::from_const_ptr_opt(qi)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: public_decrypt, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs 

Found method with unsafe block in public_decrypt:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Start Line: 298, End Line: 317
/// Decrypts data using the public key, returning the number of decrypted bytes.
///
/// # Panics
///
/// Panics if `to` is smaller than `self.size()`.
#[corresponds(RSA_public_decrypt)]
pub fn public_decrypt(
    &self,
    from: &[u8],
    to: &mut [u8],
    padding: Padding,
) -> Result<usize, ErrorStack> {
    assert!(from.len() <= i32::MAX as usize);
    assert!(to.len() >= self.size() as usize);
    unsafe {
        let len = cvt_n(
            ffi::RSA_public_decrypt(
                from.len() as LenType,
                from.as_ptr(),
                to.as_mut_ptr(),
                self.as_ptr(),
                padding.0,
            ),
        )?;
        Ok(len as usize)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: public_encrypt, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs 

Found method with unsafe block in public_encrypt:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Start Line: 325, End Line: 344
/// Encrypts data using the public key, returning the number of encrypted bytes.
///
/// # Panics
///
/// Panics if `to` is smaller than `self.size()`.
#[corresponds(RSA_public_encrypt)]
pub fn public_encrypt(
    &self,
    from: &[u8],
    to: &mut [u8],
    padding: Padding,
) -> Result<usize, ErrorStack> {
    assert!(from.len() <= i32::MAX as usize);
    assert!(to.len() >= self.size() as usize);
    unsafe {
        let len = cvt_n(
            ffi::RSA_public_encrypt(
                from.len() as LenType,
                from.as_ptr(),
                to.as_mut_ptr(),
                self.as_ptr(),
                padding.0,
            ),
        )?;
        Ok(len as usize)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: n, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs 

Found method with unsafe block in n:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Start Line: 348, End Line: 354
/// Returns a reference to the modulus of the key.
#[corresponds(RSA_get0_key)]
pub fn n(&self) -> &BigNumRef {
    unsafe {
        let mut n = ptr::null();
        RSA_get0_key(self.as_ptr(), &mut n, ptr::null_mut(), ptr::null_mut());
        BigNumRef::from_const_ptr(n)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: e, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs 

Found method with unsafe block in e:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Start Line: 358, End Line: 364
/// Returns a reference to the public exponent of the key.
#[corresponds(RSA_get0_key)]
pub fn e(&self) -> &BigNumRef {
    unsafe {
        let mut e = ptr::null();
        RSA_get0_key(self.as_ptr(), ptr::null_mut(), &mut e, ptr::null_mut());
        BigNumRef::from_const_ptr(e)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_factors, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs 

Found method with unsafe block in set_factors:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Start Line: 453, End Line: 459
/// Sets the factors of the Rsa key.
///
/// `p` and `q` are the first and second factors of `n`.
#[corresponds(RSA_set0_factors)]
pub fn set_factors(
    self,
    p: BigNum,
    q: BigNum,
) -> Result<RsaPrivateKeyBuilder, ErrorStack> {
    unsafe {
        RSA_set0_factors(self.rsa.as_ptr(), p.as_ptr(), q.as_ptr());
        mem::forget((p, q));
    }
    Ok(self)
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_crt_params, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs 

Found method with unsafe block in set_crt_params:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Start Line: 467, End Line: 483
/// Sets the Chinese Remainder Theorem params of the Rsa key.
///
/// `dmp1`, `dmq1`, and `iqmp` are the exponents and coefficient for
/// CRT calculations which is used to speed up RSA operations.
#[corresponds(RSA_set0_crt_params)]
pub fn set_crt_params(
    self,
    dmp1: BigNum,
    dmq1: BigNum,
    iqmp: BigNum,
) -> Result<RsaPrivateKeyBuilder, ErrorStack> {
    unsafe {
        RSA_set0_crt_params(
            self.rsa.as_ptr(),
            dmp1.as_ptr(),
            dmq1.as_ptr(),
            iqmp.as_ptr(),
        );
        mem::forget((dmp1, dmq1, iqmp));
    }
    Ok(self)
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: generate_with_e, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs 

Found method with unsafe block in generate_with_e:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\rsa.rs
Start Line: 536, End Line: 547
/// Generates a public/private key pair with the specified size and a custom exponent.
///
/// Unless you have specific needs and know what you're doing, use `Rsa::generate` instead.
#[corresponds(RSA_generate_key_ex)]
pub fn generate_with_e(bits: u32, e: &BigNumRef) -> Result<Rsa<Private>, ErrorStack> {
    unsafe {
        let rsa = Rsa::from_ptr(cvt_p(ffi::RSA_new())?);
        cvt(
            ffi::RSA_generate_key_ex(rsa.0, bits as c_int, e.as_ptr(), ptr::null_mut()),
        )?;
        Ok(rsa)
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sha.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
-----------------------------------------------------------------
Checking unsafe block with 7 statements, complex: true, name: new_intern, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs 

Found method with unsafe block in new_intern:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Start Line: 164, End Line: 196
fn new_intern<'a, T>(
    type_: Option<MessageDigest>,
    pkey: &PKeyRef<T>,
) -> Result<Signer<'a>, ErrorStack>
where
    T: HasPrivate,
{
    unsafe {
        ffi::init();
        let ctx = cvt_p(EVP_MD_CTX_new())?;
        let mut pctx: *mut ffi::EVP_PKEY_CTX = ptr::null_mut();
        let r = ffi::EVP_DigestSignInit(
            ctx,
            &mut pctx,
            type_.map(|t| t.as_ptr()).unwrap_or(ptr::null()),
            ptr::null_mut(),
            pkey.as_ptr(),
        );
        if r != 1 {
            EVP_MD_CTX_free(ctx);
            return Err(ErrorStack::get());
        }
        assert!(! pctx.is_null());
        Ok(Signer {
            md_ctx: ctx,
            pctx,
            _p: PhantomData,
        })
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: len_intern, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs 

Found method with unsafe block in len_intern:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Start Line: 294, End Line: 304
#[cfg(all(not(ossl111), not(boringssl), not(libressl370)))]
fn len_intern(&self) -> Result<usize, ErrorStack> {
    unsafe {
        let mut len = 0;
        cvt(ffi::EVP_DigestSignFinal(self.md_ctx, ptr::null_mut(), &mut len))?;
        Ok(len)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: sign_oneshot, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs 

Found method with unsafe block in sign_oneshot:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Start Line: 364, End Line: 380
/// Signs the data in `data_buf` and writes the signature into the buffer `sig_buf`, returning the
/// number of bytes written.
///
/// For PureEdDSA (Ed25519 and Ed448 keys), this is the only way to sign data.
///
/// This method will fail if the buffer is not large enough for the signature. Use the `len`
/// method to get an upper bound on the required size.
///
/// OpenSSL documentation at [`EVP_DigestSign`].
///
/// [`EVP_DigestSign`]: https://www.openssl.org/docs/man1.1.1/man3/EVP_DigestSign.html
#[cfg(any(ossl111, boringssl, libressl370))]
pub fn sign_oneshot(
    &mut self,
    sig_buf: &mut [u8],
    data_buf: &[u8],
) -> Result<usize, ErrorStack> {
    unsafe {
        let mut sig_len = sig_buf.len();
        cvt(
            ffi::EVP_DigestSign(
                self.md_ctx,
                sig_buf.as_mut_ptr() as *mut _,
                &mut sig_len,
                data_buf.as_ptr() as *const _,
                data_buf.len(),
            ),
        )?;
        Ok(sig_len)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: verify_oneshot, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs 

Found method with unsafe block in verify_oneshot:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\sign.rs
Start Line: 600, End Line: 618
/// Determines if the data given in `buf` matches the provided signature.
///
/// OpenSSL documentation at [`EVP_DigestVerify`].
///
/// [`EVP_DigestVerify`]: https://www.openssl.org/docs/man1.1.1/man3/EVP_DigestVerify.html
#[cfg(any(ossl111, boringssl, libressl370))]
pub fn verify_oneshot(
    &mut self,
    signature: &[u8],
    buf: &[u8],
) -> Result<bool, ErrorStack> {
    unsafe {
        let r = ffi::EVP_DigestVerify(
            self.md_ctx,
            signature.as_ptr() as *const _,
            signature.len(),
            buf.as_ptr() as *const _,
            buf.len(),
        );
        match r {
            1 => Ok(true),
            0 => {
                ErrorStack::get();
                Ok(false)
            }
            _ => Err(ErrorStack::get()),
        }
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\srtp.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\bio.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: false, name: raw_verify, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs 

Found function with unsafe block in raw_verify:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 37, End Line: 57
pub extern "C" fn raw_verify<F>(
    preverify_ok: c_int,
    x509_ctx: *mut ffi::X509_STORE_CTX,
) -> c_int
where
    F: Fn(bool, &mut X509StoreContextRef) -> bool + 'static + Sync + Send,
{
    unsafe {
        let ctx = X509StoreContextRef::from_ptr_mut(x509_ctx);
        let ssl_idx = X509StoreContext::ssl_idx()
            .expect("BUG: store context ssl index missing");
        let verify_idx = SslContext::cached_ex_index::<F>();
        let verify = ctx
            .ex_data(ssl_idx)
            .expect("BUG: store context missing ssl")
            .ssl_context()
            .ex_data(verify_idx)
            .expect("BUG: verify callback missing") as *const F;
        (*verify)(preverify_ok != 0, ctx) as c_int
    }
}



-----------------------------------------------------------------
Checking unsafe block with 7 statements, complex: false, name: raw_client_psk, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs 

Found function with unsafe block in raw_client_psk:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 60, End Line: 99
#[cfg(not(osslconf = "OPENSSL_NO_PSK"))]
pub extern "C" fn raw_client_psk<F>(
    ssl: *mut ffi::SSL,
    hint: *const c_char,
    identity: *mut c_char,
    max_identity_len: c_uint,
    psk: *mut c_uchar,
    max_psk_len: c_uint,
) -> c_uint
where
    F: Fn(&mut SslRef, Option<&[u8]>, &mut [u8], &mut [u8]) -> Result<usize, ErrorStack>
        + 'static + Sync + Send,
{
    unsafe {
        let ssl = SslRef::from_ptr_mut(ssl);
        let callback_idx = SslContext::cached_ex_index::<F>();
        let callback = ssl
            .ssl_context()
            .ex_data(callback_idx)
            .expect("BUG: psk callback missing") as *const F;
        let hint = if !hint.is_null() {
            Some(CStr::from_ptr(hint).to_bytes())
        } else {
            None
        };
        let identity_sl = slice::from_raw_parts_mut(
            identity as *mut u8,
            max_identity_len as usize,
        );
        #[allow(clippy::unnecessary_cast)]
        let psk_sl = slice::from_raw_parts_mut(psk as *mut u8, max_psk_len as usize);
        match (*callback)(ssl, hint, identity_sl, psk_sl) {
            Ok(psk_len) => psk_len as u32,
            Err(e) => {
                e.put();
                0
            }
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, complex: false, name: raw_server_psk, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs 

Found function with unsafe block in raw_server_psk:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 102, End Line: 138
#[cfg(not(osslconf = "OPENSSL_NO_PSK"))]
pub extern "C" fn raw_server_psk<F>(
    ssl: *mut ffi::SSL,
    identity: *const c_char,
    psk: *mut c_uchar,
    max_psk_len: c_uint,
) -> c_uint
where
    F: Fn(&mut SslRef, Option<&[u8]>, &mut [u8]) -> Result<usize, ErrorStack> + 'static
        + Sync + Send,
{
    unsafe {
        let ssl = SslRef::from_ptr_mut(ssl);
        let callback_idx = SslContext::cached_ex_index::<F>();
        let callback = ssl
            .ssl_context()
            .ex_data(callback_idx)
            .expect("BUG: psk callback missing") as *const F;
        let identity = if identity.is_null() {
            None
        } else {
            Some(CStr::from_ptr(identity).to_bytes())
        };
        #[allow(clippy::unnecessary_cast)]
        let psk_sl = slice::from_raw_parts_mut(psk as *mut u8, max_psk_len as usize);
        match (*callback)(ssl, identity, psk_sl) {
            Ok(psk_len) => psk_len as u32,
            Err(e) => {
                e.put();
                0
            }
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: false, name: ssl_raw_verify, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs 

Found function with unsafe block in ssl_raw_verify:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 140, End Line: 161
pub extern "C" fn ssl_raw_verify<F>(
    preverify_ok: c_int,
    x509_ctx: *mut ffi::X509_STORE_CTX,
) -> c_int
where
    F: Fn(bool, &mut X509StoreContextRef) -> bool + 'static + Sync + Send,
{
    unsafe {
        let ctx = X509StoreContextRef::from_ptr_mut(x509_ctx);
        let ssl_idx = X509StoreContext::ssl_idx()
            .expect("BUG: store context ssl index missing");
        let callback_idx = Ssl::cached_ex_index::<Arc<F>>();
        let callback = ctx
            .ex_data(ssl_idx)
            .expect("BUG: store context missing ssl")
            .ex_data(callback_idx)
            .expect("BUG: ssl verify callback missing")
            .clone();
        callback(preverify_ok != 0, ctx) as c_int
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, complex: false, name: raw_sni, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs 

Found function with unsafe block in raw_sni:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 163, End Line: 179
pub extern "C" fn raw_sni<F>(
    ssl: *mut ffi::SSL,
    al: *mut c_int,
    arg: *mut c_void,
) -> c_int
where
    F: Fn(&mut SslRef, &mut SslAlert) -> Result<(), SniError> + 'static + Sync + Send,
{
    unsafe {
        let ssl = SslRef::from_ptr_mut(ssl);
        let callback = arg as *const F;
        let mut alert = SslAlert(*al);
        let r = (*callback)(ssl, &mut alert);
        *al = alert.0;
        match r {
            Ok(()) => ffi::SSL_TLSEXT_ERR_OK,
            Err(e) => e.0,
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: raw_alpn_select, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs 

Found function with unsafe block in raw_alpn_select:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 182, End Line: 211
#[cfg(any(ossl102, libressl261))]
pub extern "C" fn raw_alpn_select<F>(
    ssl: *mut ffi::SSL,
    out: *mut *const c_uchar,
    outlen: *mut c_uchar,
    inbuf: *const c_uchar,
    inlen: c_uint,
    _arg: *mut c_void,
) -> c_int
where
    F: for<'a> Fn(&mut SslRef, &'a [u8]) -> Result<&'a [u8], AlpnError> + 'static + Sync
        + Send,
{
    unsafe {
        let ssl = SslRef::from_ptr_mut(ssl);
        let callback = ssl
            .ssl_context()
            .ex_data(SslContext::cached_ex_index::<F>())
            .expect("BUG: alpn callback missing") as *const F;
        #[allow(clippy::unnecessary_cast)]
        let protos = slice::from_raw_parts(inbuf as *const u8, inlen as usize);
        match (*callback)(ssl, protos) {
            Ok(proto) => {
                *out = proto.as_ptr() as *const c_uchar;
                *outlen = proto.len() as c_uchar;
                ffi::SSL_TLSEXT_ERR_OK
            }
            Err(e) => e.0,
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: raw_cookie_generate, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs 

Found function with unsafe block in raw_cookie_generate:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 496, End Line: 526
#[cfg(not(boringssl))]
pub extern "C" fn raw_cookie_generate<F>(
    ssl: *mut ffi::SSL,
    cookie: *mut c_uchar,
    cookie_len: *mut c_uint,
) -> c_int
where
    F: Fn(&mut SslRef, &mut [u8]) -> Result<usize, ErrorStack> + 'static + Sync + Send,
{
    unsafe {
        let ssl = SslRef::from_ptr_mut(ssl);
        let callback = ssl
            .ssl_context()
            .ex_data(SslContext::cached_ex_index::<F>())
            .expect("BUG: cookie generate callback missing") as *const F;
        #[allow(clippy::unnecessary_cast)]
        let slice = slice::from_raw_parts_mut(
            cookie as *mut u8,
            ffi::DTLS1_COOKIE_LENGTH as usize - 1,
        );
        match (*callback)(ssl, slice) {
            Ok(len) => {
                *cookie_len = len as c_uint;
                1
            }
            Err(e) => {
                e.put();
                0
            }
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: raw_cookie_verify, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs 

Found function with unsafe block in raw_cookie_verify:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 538, End Line: 557
#[cfg(not(boringssl))]
pub extern "C" fn raw_cookie_verify<F>(
    ssl: *mut ffi::SSL,
    cookie: CookiePtr,
    cookie_len: c_uint,
) -> c_int
where
    F: Fn(&mut SslRef, &[u8]) -> bool + 'static + Sync + Send,
{
    unsafe {
        let ssl = SslRef::from_ptr_mut(ssl);
        let callback = ssl
            .ssl_context()
            .ex_data(SslContext::cached_ex_index::<F>())
            .expect("BUG: cookie verify callback missing") as *const F;
        #[allow(clippy::unnecessary_cast)]
        let slice = slice::from_raw_parts(
            cookie as *const c_uchar as *const u8,
            cookie_len as usize,
        );
        (*callback)(ssl, slice) as c_int
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: false, name: raw_custom_ext_add, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs 

Found function with unsafe block in raw_custom_ext_add:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 563, End Line: 619
#[cfg(ossl111)]
pub extern "C" fn raw_custom_ext_add<F, T>(
    ssl: *mut ffi::SSL,
    _: c_uint,
    context: c_uint,
    out: *mut *const c_uchar,
    outlen: *mut size_t,
    x: *mut ffi::X509,
    chainidx: size_t,
    al: *mut c_int,
    _: *mut c_void,
) -> c_int
where
    F: Fn(
            &mut SslRef,
            ExtensionContext,
            Option<(usize, &X509Ref)>,
        ) -> Result<Option<T>, SslAlert> + 'static + Sync + Send,
    T: AsRef<[u8]> + 'static + Sync + Send,
{
    unsafe {
        let ssl = SslRef::from_ptr_mut(ssl);
        let callback = ssl
            .ssl_context()
            .ex_data(SslContext::cached_ex_index::<F>())
            .expect("BUG: custom ext add callback missing") as *const F;
        let ectx = ExtensionContext::from_bits_truncate(context);
        let cert = if ectx.contains(ExtensionContext::TLS1_3_CERTIFICATE) {
            Some((chainidx, X509Ref::from_ptr(x)))
        } else {
            None
        };
        match (*callback)(ssl, ectx, cert) {
            Ok(None) => 0,
            Ok(Some(buf)) => {
                *outlen = buf.as_ref().len();
                *out = buf.as_ref().as_ptr();
                let idx = Ssl::cached_ex_index::<CustomExtAddState<T>>();
                let mut buf = Some(buf);
                let new = match ssl.ex_data_mut(idx) {
                    Some(state) => {
                        state.0 = buf.take();
                        false
                    }
                    None => true,
                };
                if new {
                    ssl.set_ex_data(idx, CustomExtAddState(buf));
                }
                1
            }
            Err(alert) => {
                *al = alert.0;
                -1
            }
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: true, name: raw_custom_ext_free, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs 

Found function with unsafe block in raw_custom_ext_free:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 622, End Line: 638
#[cfg(ossl111)]
pub extern "C" fn raw_custom_ext_free<T>(
    ssl: *mut ffi::SSL,
    _: c_uint,
    _: c_uint,
    _: *const c_uchar,
    _: *mut c_void,
)
where
    T: 'static + Sync + Send,
{
    unsafe {
        let ssl = SslRef::from_ptr_mut(ssl);
        let idx = Ssl::cached_ex_index::<CustomExtAddState<T>>();
        if let Some(state) = ssl.ex_data_mut(idx) {
            state.0 = None;
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, complex: false, name: raw_custom_ext_parse, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs 

Found function with unsafe block in raw_custom_ext_parse:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\callbacks.rs
Start Line: 641, End Line: 680
#[cfg(ossl111)]
pub extern "C" fn raw_custom_ext_parse<F>(
    ssl: *mut ffi::SSL,
    _: c_uint,
    context: c_uint,
    input: *const c_uchar,
    inlen: size_t,
    x: *mut ffi::X509,
    chainidx: size_t,
    al: *mut c_int,
    _: *mut c_void,
) -> c_int
where
    F: Fn(
            &mut SslRef,
            ExtensionContext,
            &[u8],
            Option<(usize, &X509Ref)>,
        ) -> Result<(), SslAlert> + 'static + Sync + Send,
{
    unsafe {
        let ssl = SslRef::from_ptr_mut(ssl);
        let callback = ssl
            .ssl_context()
            .ex_data(SslContext::cached_ex_index::<F>())
            .expect("BUG: custom ext parse callback missing") as *const F;
        let ectx = ExtensionContext::from_bits_truncate(context);
        #[allow(clippy::unnecessary_cast)]
        let slice = slice::from_raw_parts(input as *const u8, inlen);
        let cert = if ectx.contains(ExtensionContext::TLS1_3_CERTIFICATE) {
            Some((chainidx, X509Ref::from_ptr(x)))
        } else {
            None
        };
        match (*callback)(ssl, ectx, slice, cert) {
            Ok(()) => 1,
            Err(alert) => {
                *al = alert.0;
                0
            }
        }
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\connector.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\error.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: cipher_name, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found function with unsafe block in cipher_name:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 127, End Line: 135
/// Returns the OpenSSL name of a cipher corresponding to an RFC-standard cipher name.
///
/// If the cipher has no corresponding OpenSSL name, the string `(NONE)` is returned.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(OPENSSL_cipher_name)]
#[cfg(ossl111)]
pub fn cipher_name(std_name: &str) -> &'static str {
    unsafe {
        ffi::init();
        let s = CString::new(std_name).unwrap();
        let ptr = ffi::OPENSSL_cipher_name(s.as_ptr());
        CStr::from_ptr(ptr).to_str().unwrap()
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: tls, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in tls:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 345, End Line: 347
/// Support all versions of the TLS protocol.
#[corresponds(TLS_method)]
pub fn tls() -> SslMethod {
    unsafe { SslMethod(TLS_method()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: dtls, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in dtls:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 351, End Line: 353
/// Support all versions of the DTLS protocol.
#[corresponds(DTLS_method)]
pub fn dtls() -> SslMethod {
    unsafe { SslMethod(DTLS_method()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: tls_client, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in tls_client:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 357, End Line: 359
/// Support all versions of the TLS protocol, explicitly as a client.
#[corresponds(TLS_client_method)]
pub fn tls_client() -> SslMethod {
    unsafe { SslMethod(TLS_client_method()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: tls_server, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in tls_server:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 363, End Line: 365
/// Support all versions of the TLS protocol, explicitly as a server.
#[corresponds(TLS_server_method)]
pub fn tls_server() -> SslMethod {
    unsafe { SslMethod(TLS_server_method()) }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: true, name: select_next_proto, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found function with unsafe block in select_next_proto:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 698, End Line: 716
/// A standard implementation of protocol selection for Application Layer Protocol Negotiation
/// (ALPN).
///
/// `server` should contain the server's list of supported protocols and `client` the client's. They
/// must both be in the ALPN wire format. See the documentation for
/// [`SslContextBuilder::set_alpn_protos`] for details.
///
/// It will select the first protocol supported by the server which is also supported by the client.
///
/// [`SslContextBuilder::set_alpn_protos`]: struct.SslContextBuilder.html#method.set_alpn_protos
#[corresponds(SSL_select_next_proto)]
pub fn select_next_proto<'a>(server: &[u8], client: &'a [u8]) -> Option<&'a [u8]> {
    unsafe {
        let mut out = ptr::null_mut();
        let mut outlen = 0;
        let r = ffi::SSL_select_next_proto(
            &mut out,
            &mut outlen,
            server.as_ptr(),
            server.len() as c_uint,
            client.as_ptr(),
            client.len() as c_uint,
        );
        if r == ffi::OPENSSL_NPN_NEGOTIATED {
            Some(slice::from_raw_parts(out as *const u8, outlen as usize))
        } else {
            None
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_verify, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_verify:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 749, End Line: 753
/// Configures the certificate verification method for new connections.
#[corresponds(SSL_CTX_set_verify)]
pub fn set_verify(&mut self, mode: SslVerifyMode) {
    unsafe {
        ffi::SSL_CTX_set_verify(self.as_ptr(), mode.bits() as c_int, None);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_verify_callback, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_verify_callback:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 762, End Line: 770
/// Configures the certificate verification method for new connections and
/// registers a verification callback.
///
/// The callback is passed a boolean indicating if OpenSSL's internal verification succeeded as
/// well as a reference to the `X509StoreContext` which can be used to examine the certificate
/// chain. It should return a boolean indicating if verification succeeded.
#[corresponds(SSL_CTX_set_verify)]
pub fn set_verify_callback<F>(&mut self, mode: SslVerifyMode, verify: F)
where
    F: Fn(bool, &mut X509StoreContextRef) -> bool + 'static + Sync + Send,
{
    unsafe {
        self.set_ex_data(SslContext::cached_ex_index::<F>(), verify);
        ffi::SSL_CTX_set_verify(
            self.as_ptr(),
            mode.bits() as c_int,
            Some(raw_verify::<F>),
        );
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: set_servername_callback, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_servername_callback:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 781, End Line: 801
/// Configures the server name indication (SNI) callback for new connections.
///
/// SNI is used to allow a single server to handle requests for multiple domains, each of which
/// has its own certificate chain and configuration.
///
/// Obtain the server name with the `servername` method and then set the corresponding context
/// with `set_ssl_context`
#[corresponds(SSL_CTX_set_tlsext_servername_callback)]
pub fn set_servername_callback<F>(&mut self, callback: F)
where
    F: Fn(&mut SslRef, &mut SslAlert) -> Result<(), SniError> + 'static + Sync + Send,
{
    unsafe {
        let arg = self.set_ex_data_inner(SslContext::cached_ex_index::<F>(), callback);
        ffi::SSL_CTX_set_tlsext_servername_arg(self.as_ptr(), arg);
        #[cfg(boringssl)]
        ffi::SSL_CTX_set_tlsext_servername_callback(self.as_ptr(), Some(raw_sni::<F>));
        #[cfg(not(boringssl))]
        ffi::SSL_CTX_set_tlsext_servername_callback__fixed_rust(
            self.as_ptr(),
            Some(raw_sni::<F>),
        );
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_verify_depth, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_verify_depth:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 807, End Line: 811
/// Sets the certificate verification depth.
///
/// If the peer's certificate chain is longer than this value, verification will fail.
#[corresponds(SSL_CTX_set_verify_depth)]
pub fn set_verify_depth(&mut self, depth: u32) {
    unsafe {
        ffi::SSL_CTX_set_verify_depth(self.as_ptr(), depth as c_int);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: set_verify_cert_store, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_verify_cert_store:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 818, End Line: 826
/// Sets a custom certificate store for verifying peer certificates.
///
/// Requires OpenSSL 1.0.2 or newer.
#[corresponds(SSL_CTX_set0_verify_cert_store)]
#[cfg(ossl102)]
pub fn set_verify_cert_store(
    &mut self,
    cert_store: X509Store,
) -> Result<(), ErrorStack> {
    unsafe {
        let ptr = cert_store.as_ptr();
        cvt(ffi::SSL_CTX_set0_verify_cert_store(self.as_ptr(), ptr) as c_int)?;
        mem::forget(cert_store);
        Ok(())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_cert_store, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_cert_store:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 830, End Line: 835
/// Replaces the context's certificate store.
#[corresponds(SSL_CTX_set_cert_store)]
pub fn set_cert_store(&mut self, cert_store: X509Store) {
    unsafe {
        ffi::SSL_CTX_set_cert_store(self.as_ptr(), cert_store.as_ptr());
        mem::forget(cert_store);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_read_ahead, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_read_ahead:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 844, End Line: 848
/// Controls read ahead behavior.
///
/// If enabled, OpenSSL will read as much data as is available from the underlying stream,
/// instead of a single record at a time.
///
/// It has no effect when used with DTLS.
#[corresponds(SSL_CTX_set_read_ahead)]
pub fn set_read_ahead(&mut self, read_ahead: bool) {
    unsafe {
        ffi::SSL_CTX_set_read_ahead(self.as_ptr(), read_ahead as SslBitType);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_mode, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_mode:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 852, End Line: 857
/// Sets the mode used by the context, returning the previous mode.
#[corresponds(SSL_CTX_set_mode)]
pub fn set_mode(&mut self, mode: SslMode) -> SslMode {
    unsafe {
        let bits = ffi::SSL_CTX_set_mode(self.as_ptr(), mode.bits() as MtuTy)
            as SslBitType;
        SslMode::from_bits_retain(bits)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_tmp_dh, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_tmp_dh:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 861, End Line: 863
/// Sets the parameters to be used during ephemeral Diffie-Hellman key exchange.
#[corresponds(SSL_CTX_set_tmp_dh)]
pub fn set_tmp_dh(&mut self, dh: &DhRef<Params>) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::SSL_CTX_set_tmp_dh(self.as_ptr(), dh.as_ptr()) as c_int).map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: set_tmp_dh_callback, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_tmp_dh_callback:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 872, End Line: 884
/// Sets the callback which will generate parameters to be used during ephemeral Diffie-Hellman
/// key exchange.
///
/// The callback is provided with a reference to the `Ssl` for the session, as well as a boolean
/// indicating if the selected cipher is export-grade, and the key length. The export and key
/// length options are archaic and should be ignored in almost all cases.
#[corresponds(SSL_CTX_set_tmp_dh_callback)]
pub fn set_tmp_dh_callback<F>(&mut self, callback: F)
where
    F: Fn(&mut SslRef, bool, u32) -> Result<Dh<Params>, ErrorStack> + 'static + Sync
        + Send,
{
    unsafe {
        self.set_ex_data(SslContext::cached_ex_index::<F>(), callback);
        #[cfg(not(boringssl))]
        ffi::SSL_CTX_set_tmp_dh_callback__fixed_rust(
            self.as_ptr(),
            Some(raw_tmp_dh::<F>),
        );
        #[cfg(boringssl)]
        ffi::SSL_CTX_set_tmp_dh_callback(self.as_ptr(), Some(raw_tmp_dh::<F>));
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_tmp_ecdh, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_tmp_ecdh:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 888, End Line: 890
/// Sets the parameters to be used during ephemeral elliptic curve Diffie-Hellman key exchange.
#[corresponds(SSL_CTX_set_tmp_ecdh)]
pub fn set_tmp_ecdh(&mut self, key: &EcKeyRef<Params>) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::SSL_CTX_set_tmp_ecdh(self.as_ptr(), key.as_ptr()) as c_int).map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_tmp_ecdh_callback, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_tmp_ecdh_callback:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 903, End Line: 911
/// Sets the callback which will generate parameters to be used during ephemeral elliptic curve
/// Diffie-Hellman key exchange.
///
/// The callback is provided with a reference to the `Ssl` for the session, as well as a boolean
/// indicating if the selected cipher is export-grade, and the key length. The export and key
/// length options are archaic and should be ignored in almost all cases.
///
/// Requires OpenSSL 1.0.1 or 1.0.2.
#[corresponds(SSL_CTX_set_tmp_ecdh_callback)]
#[cfg(all(ossl101, not(ossl110)))]
#[deprecated(
    note = "this function leaks memory and does not exist on newer OpenSSL versions"
)]
pub fn set_tmp_ecdh_callback<F>(&mut self, callback: F)
where
    F: Fn(&mut SslRef, bool, u32) -> Result<EcKey<Params>, ErrorStack> + 'static + Sync
        + Send,
{
    unsafe {
        self.set_ex_data(SslContext::cached_ex_index::<F>(), callback);
        ffi::SSL_CTX_set_tmp_ecdh_callback__fixed_rust(
            self.as_ptr(),
            Some(raw_tmp_ecdh::<F>),
        );
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_default_verify_paths, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_default_verify_paths:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 918, End Line: 920
/// Use the default locations of trusted certificates for verification.
///
/// These locations are read from the `SSL_CERT_FILE` and `SSL_CERT_DIR` environment variables
/// if present, or defaults specified at OpenSSL build time otherwise.
#[corresponds(SSL_CTX_set_default_verify_paths)]
pub fn set_default_verify_paths(&mut self) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::SSL_CTX_set_default_verify_paths(self.as_ptr())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_ca_file, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_ca_file:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 926, End Line: 936
/// Loads trusted root certificates from a file.
///
/// The file should contain a sequence of PEM-formatted CA certificates.
#[corresponds(SSL_CTX_load_verify_locations)]
pub fn set_ca_file<P: AsRef<Path>>(&mut self, file: P) -> Result<(), ErrorStack> {
    let file = CString::new(file.as_ref().as_os_str().to_str().unwrap()).unwrap();
    unsafe {
        cvt(
                ffi::SSL_CTX_load_verify_locations(
                    self.as_ptr(),
                    file.as_ptr() as *const _,
                    ptr::null(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_client_ca_list, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_client_ca_list:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 943, End Line: 948
/// Sets the list of CA names sent to the client.
///
/// The CA certificates must still be added to the trust root - they are not automatically set
/// as trusted by this method.
#[corresponds(SSL_CTX_set_client_CA_list)]
pub fn set_client_ca_list(&mut self, list: Stack<X509Name>) {
    unsafe {
        ffi::SSL_CTX_set_client_CA_list(self.as_ptr(), list.as_ptr());
        mem::forget(list);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: add_client_ca, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in add_client_ca:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 953, End Line: 955
/// Add the provided CA certificate to the list sent by the server to the client when
/// requesting client-side TLS authentication.
#[corresponds(SSL_CTX_add_client_CA)]
pub fn add_client_ca(&mut self, cacert: &X509Ref) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::SSL_CTX_add_client_CA(self.as_ptr(), cacert.as_ptr())).map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_session_id_context, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_session_id_context:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 966, End Line: 976
/// Set the context identifier for sessions.
///
/// This value identifies the server's session cache to clients, telling them when they're
/// able to reuse sessions. It should be set to a unique value per server, unless multiple
/// servers share a session cache.
///
/// This value should be set when using client certificates, or each request will fail its
/// handshake and need to be restarted.
#[corresponds(SSL_CTX_set_session_id_context)]
pub fn set_session_id_context(&mut self, sid_ctx: &[u8]) -> Result<(), ErrorStack> {
    unsafe {
        assert!(sid_ctx.len() <= c_uint::MAX as usize);
        cvt(
                ffi::SSL_CTX_set_session_id_context(
                    self.as_ptr(),
                    sid_ctx.as_ptr(),
                    sid_ctx.len() as SizeTy,
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_certificate_file, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_certificate_file:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 984, End Line: 998
/// Loads a leaf certificate from a file.
///
/// Only a single certificate will be loaded - use `add_extra_chain_cert` to add the remainder
/// of the certificate chain, or `set_certificate_chain_file` to load the entire chain from a
/// single file.
#[corresponds(SSL_CTX_use_certificate_file)]
pub fn set_certificate_file<P: AsRef<Path>>(
    &mut self,
    file: P,
    file_type: SslFiletype,
) -> Result<(), ErrorStack> {
    let file = CString::new(file.as_ref().as_os_str().to_str().unwrap()).unwrap();
    unsafe {
        cvt(
                ffi::SSL_CTX_use_certificate_file(
                    self.as_ptr(),
                    file.as_ptr() as *const _,
                    file_type.as_raw(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_certificate_chain_file, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_certificate_chain_file:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1006, End Line: 1018
/// Loads a certificate chain from a file.
///
/// The file should contain a sequence of PEM-formatted certificates, the first being the leaf
/// certificate, and the remainder forming the chain of certificates up to and including the
/// trusted root certificate.
#[corresponds(SSL_CTX_use_certificate_chain_file)]
pub fn set_certificate_chain_file<P: AsRef<Path>>(
    &mut self,
    file: P,
) -> Result<(), ErrorStack> {
    let file = CString::new(file.as_ref().as_os_str().to_str().unwrap()).unwrap();
    unsafe {
        cvt(
                ffi::SSL_CTX_use_certificate_chain_file(
                    self.as_ptr(),
                    file.as_ptr() as *const _,
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_certificate, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_certificate:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1024, End Line: 1026
/// Sets the leaf certificate.
///
/// Use `add_extra_chain_cert` to add the remainder of the certificate chain.
#[corresponds(SSL_CTX_use_certificate)]
pub fn set_certificate(&mut self, cert: &X509Ref) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::SSL_CTX_use_certificate(self.as_ptr(), cert.as_ptr())).map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: add_extra_chain_cert, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in add_extra_chain_cert:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1033, End Line: 1039
/// Appends a certificate to the certificate chain.
///
/// This chain should contain all certificates necessary to go from the certificate specified by
/// `set_certificate` to a trusted root.
#[corresponds(SSL_CTX_add_extra_chain_cert)]
pub fn add_extra_chain_cert(&mut self, cert: X509) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::SSL_CTX_add_extra_chain_cert(self.as_ptr(), cert.as_ptr()) as c_int)?;
        mem::forget(cert);
        Ok(())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_private_key_file, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_private_key_file:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1043, End Line: 1057
/// Loads the private key from a file.
#[corresponds(SSL_CTX_use_PrivateKey_file)]
pub fn set_private_key_file<P: AsRef<Path>>(
    &mut self,
    file: P,
    file_type: SslFiletype,
) -> Result<(), ErrorStack> {
    let file = CString::new(file.as_ref().as_os_str().to_str().unwrap()).unwrap();
    unsafe {
        cvt(
                ffi::SSL_CTX_use_PrivateKey_file(
                    self.as_ptr(),
                    file.as_ptr() as *const _,
                    file_type.as_raw(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_cipher_list, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_cipher_list:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1076, End Line: 1085
/// Sets the list of supported ciphers for protocols before TLSv1.3.
///
/// The `set_ciphersuites` method controls the cipher suites for TLSv1.3.
///
/// See [`ciphers`] for details on the format.
///
/// [`ciphers`]: https://www.openssl.org/docs/manmaster/apps/ciphers.html
#[corresponds(SSL_CTX_set_cipher_list)]
pub fn set_cipher_list(&mut self, cipher_list: &str) -> Result<(), ErrorStack> {
    let cipher_list = CString::new(cipher_list).unwrap();
    unsafe {
        cvt(
                ffi::SSL_CTX_set_cipher_list(
                    self.as_ptr(),
                    cipher_list.as_ptr() as *const _,
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_ciphersuites, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_ciphersuites:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1097, End Line: 1106
/// Sets the list of supported ciphers for the TLSv1.3 protocol.
///
/// The `set_cipher_list` method controls the cipher suites for protocols before TLSv1.3.
///
/// The format consists of TLSv1.3 cipher suite names separated by `:` characters in order of
/// preference.
///
/// Requires OpenSSL 1.1.1 or LibreSSL 3.4.0 or newer.
#[corresponds(SSL_CTX_set_ciphersuites)]
#[cfg(any(ossl111, libressl340))]
pub fn set_ciphersuites(&mut self, cipher_list: &str) -> Result<(), ErrorStack> {
    let cipher_list = CString::new(cipher_list).unwrap();
    unsafe {
        cvt(
                ffi::SSL_CTX_set_ciphersuites(
                    self.as_ptr(),
                    cipher_list.as_ptr() as *const _,
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_ecdh_auto, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_ecdh_auto:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1113, End Line: 1115
/// Enables ECDHE key exchange with an automatically chosen curve list.
///
/// Requires OpenSSL 1.0.2.
#[corresponds(SSL_CTX_set_ecdh_auto)]
#[cfg(any(libressl, all(ossl102, not(ossl110))))]
pub fn set_ecdh_auto(&mut self, onoff: bool) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::SSL_CTX_set_ecdh_auto(self.as_ptr(), onoff as c_int)).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_options, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_options:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1124, End Line: 1128
/// Sets the options used by the context, returning the old set.
///
/// # Note
///
/// This *enables* the specified options, but does not disable unspecified options. Use
/// `clear_options` for that.
#[corresponds(SSL_CTX_set_options)]
pub fn set_options(&mut self, option: SslOptions) -> SslOptions {
    let bits = unsafe { ffi::SSL_CTX_set_options(self.as_ptr(), option.bits()) }
        as SslOptionsRepr;
    SslOptions::from_bits_retain(bits)
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: clear_options, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in clear_options:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1139, End Line: 1143
/// Clears the options used by the context, returning the old set.
#[corresponds(SSL_CTX_clear_options)]
pub fn clear_options(&mut self, option: SslOptions) -> SslOptions {
    let bits = unsafe { ffi::SSL_CTX_clear_options(self.as_ptr(), option.bits()) }
        as SslOptionsRepr;
    SslOptions::from_bits_retain(bits)
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_min_proto_version, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_min_proto_version:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1153, End Line: 1161
/// Sets the minimum supported protocol version.
///
/// A value of `None` will enable protocol versions down to the lowest version supported by
/// OpenSSL.
///
/// Requires BoringSSL or OpenSSL 1.1.0 or LibreSSL 2.6.1 or newer.
#[corresponds(SSL_CTX_set_min_proto_version)]
#[cfg(any(ossl110, libressl261, boringssl))]
pub fn set_min_proto_version(
    &mut self,
    version: Option<SslVersion>,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::SSL_CTX_set_min_proto_version(
                    self.as_ptr(),
                    version.map_or(0, |v| v.0 as _),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_max_proto_version, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_max_proto_version:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1171, End Line: 1179
/// Sets the maximum supported protocol version.
///
/// A value of `None` will enable protocol versions up to the highest version supported by
/// OpenSSL.
///
/// Requires BoringSSL or OpenSSL 1.1.0 or or LibreSSL 2.6.1 or newer.
#[corresponds(SSL_CTX_set_max_proto_version)]
#[cfg(any(ossl110, libressl261, boringssl))]
pub fn set_max_proto_version(
    &mut self,
    version: Option<SslVersion>,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::SSL_CTX_set_max_proto_version(
                    self.as_ptr(),
                    version.map_or(0, |v| v.0 as _),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: min_proto_version, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in min_proto_version:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1189, End Line: 1198
/// Gets the minimum supported protocol version.
///
/// A value of `None` indicates that all versions down to the lowest version supported by
/// OpenSSL are enabled.
///
/// Requires OpenSSL 1.1.0g or LibreSSL 2.7.0 or newer.
#[corresponds(SSL_CTX_get_min_proto_version)]
#[cfg(any(ossl110g, libressl270))]
pub fn min_proto_version(&mut self) -> Option<SslVersion> {
    unsafe {
        let r = ffi::SSL_CTX_get_min_proto_version(self.as_ptr());
        if r == 0 { None } else { Some(SslVersion(r)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: max_proto_version, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in max_proto_version:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1208, End Line: 1217
/// Gets the maximum supported protocol version.
///
/// A value of `None` indicates that all versions up to the highest version supported by
/// OpenSSL are enabled.
///
/// Requires OpenSSL 1.1.0g or LibreSSL 2.7.0 or newer.
#[corresponds(SSL_CTX_get_max_proto_version)]
#[cfg(any(ossl110g, libressl270))]
pub fn max_proto_version(&mut self) -> Option<SslVersion> {
    unsafe {
        let r = ffi::SSL_CTX_get_max_proto_version(self.as_ptr());
        if r == 0 { None } else { Some(SslVersion(r)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: true, name: set_alpn_protos, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_alpn_protos:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1229, End Line: 1244
/// Sets the protocols to sent to the server for Application Layer Protocol Negotiation (ALPN).
///
/// The input must be in ALPN "wire format". It consists of a sequence of supported protocol
/// names prefixed by their byte length. For example, the protocol list consisting of `spdy/1`
/// and `http/1.1` is encoded as `b"\x06spdy/1\x08http/1.1"`. The protocols are ordered by
/// preference.
///
/// Requires BoringSSL or OpenSSL 1.0.2 or LibreSSL 2.6.1 or newer.
#[corresponds(SSL_CTX_set_alpn_protos)]
#[cfg(any(ossl102, libressl261, boringssl))]
pub fn set_alpn_protos(&mut self, protocols: &[u8]) -> Result<(), ErrorStack> {
    unsafe {
        assert!(protocols.len() <= c_uint::MAX as usize);
        let r = ffi::SSL_CTX_set_alpn_protos(
            self.as_ptr(),
            protocols.as_ptr(),
            protocols.len() as _,
        );
        if r == 0 { Ok(()) } else { Err(ErrorStack::get()) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: true, name: set_tlsext_use_srtp, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_tlsext_use_srtp:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1248, End Line: 1260
/// Enables the DTLS extension "use_srtp" as defined in RFC5764.
#[corresponds(SSL_CTX_set_tlsext_use_srtp)]
pub fn set_tlsext_use_srtp(&mut self, protocols: &str) -> Result<(), ErrorStack> {
    unsafe {
        let cstr = CString::new(protocols).unwrap();
        let r = ffi::SSL_CTX_set_tlsext_use_srtp(self.as_ptr(), cstr.as_ptr());
        if r == 0 { Ok(()) } else { Err(ErrorStack::get()) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_alpn_select_callback, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_alpn_select_callback:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1276, End Line: 1288
/// Sets the callback used by a server to select a protocol for Application Layer Protocol
/// Negotiation (ALPN).
///
/// The callback is provided with the client's protocol list in ALPN wire format. See the
/// documentation for [`SslContextBuilder::set_alpn_protos`] for details. It should return one
/// of those protocols on success. The [`select_next_proto`] function implements the standard
/// protocol selection algorithm.
///
/// Requires OpenSSL 1.0.2 or LibreSSL 2.6.1 or newer.
///
/// [`SslContextBuilder::set_alpn_protos`]: struct.SslContextBuilder.html#method.set_alpn_protos
/// [`select_next_proto`]: fn.select_next_proto.html
#[corresponds(SSL_CTX_set_alpn_select_cb)]
#[cfg(any(ossl102, libressl261))]
pub fn set_alpn_select_callback<F>(&mut self, callback: F)
where
    F: for<'a> Fn(&mut SslRef, &'a [u8]) -> Result<&'a [u8], AlpnError> + 'static + Sync
        + Send,
{
    unsafe {
        self.set_ex_data(SslContext::cached_ex_index::<F>(), callback);
        ffi::SSL_CTX_set_alpn_select_cb__fixed_rust(
            self.as_ptr(),
            Some(callbacks::raw_alpn_select::<F>),
            ptr::null_mut(),
        );
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: check_private_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in check_private_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1292, End Line: 1294
/// Checks for consistency between the private key and certificate.
#[corresponds(SSL_CTX_check_private_key)]
pub fn check_private_key(&self) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::SSL_CTX_check_private_key(self.as_ptr())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: cert_store, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in cert_store:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1298, End Line: 1300
/// Returns a shared reference to the context's certificate store.
#[corresponds(SSL_CTX_get_cert_store)]
pub fn cert_store(&self) -> &X509StoreBuilderRef {
    unsafe { X509StoreBuilderRef::from_ptr(ffi::SSL_CTX_get_cert_store(self.as_ptr())) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: cert_store_mut, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in cert_store_mut:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1304, End Line: 1306
/// Returns a mutable reference to the context's certificate store.
#[corresponds(SSL_CTX_get_cert_store)]
pub fn cert_store_mut(&mut self) -> &mut X509StoreBuilderRef {
    unsafe {
        X509StoreBuilderRef::from_ptr_mut(ffi::SSL_CTX_get_cert_store(self.as_ptr()))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: verify_param, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in verify_param:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1313, End Line: 1315
/// Returns a reference to the X509 verification configuration.
///
/// Requires BoringSSL or OpenSSL 1.0.2 or newer.
#[corresponds(SSL_CTX_get0_param)]
#[cfg(any(ossl102, boringssl, libressl261))]
pub fn verify_param(&self) -> &X509VerifyParamRef {
    unsafe { X509VerifyParamRef::from_ptr(ffi::SSL_CTX_get0_param(self.as_ptr())) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: verify_param_mut, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in verify_param_mut:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1322, End Line: 1324
/// Returns a mutable reference to the X509 verification configuration.
///
/// Requires BoringSSL or OpenSSL 1.0.2 or newer.
#[corresponds(SSL_CTX_get0_param)]
#[cfg(any(ossl102, boringssl, libressl261))]
pub fn verify_param_mut(&mut self) -> &mut X509VerifyParamRef {
    unsafe { X509VerifyParamRef::from_ptr_mut(ffi::SSL_CTX_get0_param(self.as_ptr())) }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_status_callback, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_status_callback:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1339, End Line: 1351
/// Sets the callback dealing with OCSP stapling.
///
/// On the client side, this callback is responsible for validating the OCSP status response
/// returned by the server. The status may be retrieved with the `SslRef::ocsp_status` method.
/// A response of `Ok(true)` indicates that the OCSP status is valid, and a response of
/// `Ok(false)` indicates that the OCSP status is invalid and the handshake should be
/// terminated.
///
/// On the server side, this callback is responsible for setting the OCSP status response to be
/// returned to clients. The status may be set with the `SslRef::set_ocsp_status` method. A
/// response of `Ok(true)` indicates that the OCSP status should be returned to the client, and
/// `Ok(false)` indicates that the status should not be returned to the client.
#[corresponds(SSL_CTX_set_tlsext_status_cb)]
pub fn set_status_callback<F>(&mut self, callback: F) -> Result<(), ErrorStack>
where
    F: Fn(&mut SslRef) -> Result<bool, ErrorStack> + 'static + Sync + Send,
{
    unsafe {
        self.set_ex_data(SslContext::cached_ex_index::<F>(), callback);
        cvt(
                ffi::SSL_CTX_set_tlsext_status_cb(
                    self.as_ptr(),
                    Some(raw_tlsext_status::<F>),
                ) as c_int,
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_psk_client_callback, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_psk_client_callback:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1360, End Line: 1371
/// Sets the callback for providing an identity and pre-shared key for a TLS-PSK client.
///
/// The callback will be called with the SSL context, an identity hint if one was provided
/// by the server, a mutable slice for each of the identity and pre-shared key bytes. The
/// identity must be written as a null-terminated C string.
#[corresponds(SSL_CTX_set_psk_client_callback)]
#[cfg(not(osslconf = "OPENSSL_NO_PSK"))]
pub fn set_psk_client_callback<F>(&mut self, callback: F)
where
    F: Fn(&mut SslRef, Option<&[u8]>, &mut [u8], &mut [u8]) -> Result<usize, ErrorStack>
        + 'static + Sync + Send,
{
    unsafe {
        self.set_ex_data(SslContext::cached_ex_index::<F>(), callback);
        ffi::SSL_CTX_set_psk_client_callback(self.as_ptr(), Some(raw_client_psk::<F>));
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_psk_server_callback, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_psk_server_callback:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1392, End Line: 1403
/// Sets the callback for providing an identity and pre-shared key for a TLS-PSK server.
///
/// The callback will be called with the SSL context, an identity provided by the client,
/// and, a mutable slice for the pre-shared key bytes. The callback returns the number of
/// bytes in the pre-shared key.
#[corresponds(SSL_CTX_set_psk_server_callback)]
#[cfg(not(osslconf = "OPENSSL_NO_PSK"))]
pub fn set_psk_server_callback<F>(&mut self, callback: F)
where
    F: Fn(&mut SslRef, Option<&[u8]>, &mut [u8]) -> Result<usize, ErrorStack> + 'static
        + Sync + Send,
{
    unsafe {
        self.set_ex_data(SslContext::cached_ex_index::<F>(), callback);
        ffi::SSL_CTX_set_psk_server_callback(self.as_ptr(), Some(raw_server_psk::<F>));
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_new_session_callback, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_new_session_callback:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1419, End Line: 1427
/// Sets the callback which is called when new sessions are negotiated.
///
/// This can be used by clients to implement session caching. While in TLSv1.2 the session is
/// available to access via [`SslRef::session`] immediately after the handshake completes, this
/// is not the case for TLSv1.3. There, a session is not generally available immediately, and
/// the server may provide multiple session tokens to the client over a single session. The new
/// session callback is a portable way to deal with both cases.
///
/// Note that session caching must be enabled for the callback to be invoked, and it defaults
/// off for clients. [`set_session_cache_mode`] controls that behavior.
///
/// [`SslRef::session`]: struct.SslRef.html#method.session
/// [`set_session_cache_mode`]: #method.set_session_cache_mode
#[corresponds(SSL_CTX_sess_set_new_cb)]
pub fn set_new_session_callback<F>(&mut self, callback: F)
where
    F: Fn(&mut SslRef, SslSession) + 'static + Sync + Send,
{
    unsafe {
        self.set_ex_data(SslContext::cached_ex_index::<F>(), callback);
        ffi::SSL_CTX_sess_set_new_cb(
            self.as_ptr(),
            Some(callbacks::raw_new_session::<F>),
        );
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_remove_session_callback, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_remove_session_callback:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1433, End Line: 1444
/// Sets the callback which is called when sessions are removed from the context.
///
/// Sessions can be removed because they have timed out or because they are considered faulty.
#[corresponds(SSL_CTX_sess_set_remove_cb)]
pub fn set_remove_session_callback<F>(&mut self, callback: F)
where
    F: Fn(&SslContextRef, &SslSessionRef) + 'static + Sync + Send,
{
    unsafe {
        self.set_ex_data(SslContext::cached_ex_index::<F>(), callback);
        ffi::SSL_CTX_sess_set_remove_cb(
            self.as_ptr(),
            Some(callbacks::raw_remove_session::<F>),
        );
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_keylog_callback, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_keylog_callback:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1474, End Line: 1482
/// Sets the TLS key logging callback.
///
/// The callback is invoked whenever TLS key material is generated, and is passed a line of NSS
/// SSLKEYLOGFILE-formatted text. This can be used by tools like Wireshark to decrypt message
/// traffic. The line does not contain a trailing newline.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_CTX_set_keylog_callback)]
#[cfg(any(ossl111, boringssl))]
pub fn set_keylog_callback<F>(&mut self, callback: F)
where
    F: Fn(&SslRef, &str) + 'static + Sync + Send,
{
    unsafe {
        self.set_ex_data(SslContext::cached_ex_index::<F>(), callback);
        ffi::SSL_CTX_set_keylog_callback(
            self.as_ptr(),
            Some(callbacks::raw_keylog::<F>),
        );
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_session_cache_mode, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_session_cache_mode:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1488, End Line: 1493
/// Sets the session caching mode use for connections made with the context.
///
/// Returns the previous session caching mode.
#[corresponds(SSL_CTX_set_session_cache_mode)]
pub fn set_session_cache_mode(
    &mut self,
    mode: SslSessionCacheMode,
) -> SslSessionCacheMode {
    unsafe {
        let bits = ffi::SSL_CTX_set_session_cache_mode(self.as_ptr(), mode.bits());
        SslSessionCacheMode::from_bits_retain(bits)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_stateless_cookie_generate_cb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_stateless_cookie_generate_cb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1502, End Line: 1513
/// Sets the callback for generating an application cookie for TLS1.3
/// stateless handshakes.
///
/// The callback will be called with the SSL context and a slice into which the cookie
/// should be written. The callback should return the number of bytes written.
#[corresponds(SSL_CTX_set_stateless_cookie_generate_cb)]
#[cfg(ossl111)]
pub fn set_stateless_cookie_generate_cb<F>(&mut self, callback: F)
where
    F: Fn(&mut SslRef, &mut [u8]) -> Result<usize, ErrorStack> + 'static + Sync + Send,
{
    unsafe {
        self.set_ex_data(SslContext::cached_ex_index::<F>(), callback);
        ffi::SSL_CTX_set_stateless_cookie_generate_cb(
            self.as_ptr(),
            Some(raw_stateless_cookie_generate::<F>),
        );
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_stateless_cookie_verify_cb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_stateless_cookie_verify_cb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1525, End Line: 1536
/// Sets the callback for verifying an application cookie for TLS1.3
/// stateless handshakes.
///
/// The callback will be called with the SSL context and the cookie supplied by the
/// client. It should return true if and only if the cookie is valid.
///
/// Note that the OpenSSL implementation independently verifies the integrity of
/// application cookies using an HMAC before invoking the supplied callback.
#[corresponds(SSL_CTX_set_stateless_cookie_verify_cb)]
#[cfg(ossl111)]
pub fn set_stateless_cookie_verify_cb<F>(&mut self, callback: F)
where
    F: Fn(&mut SslRef, &[u8]) -> bool + 'static + Sync + Send,
{
    unsafe {
        self.set_ex_data(SslContext::cached_ex_index::<F>(), callback);
        ffi::SSL_CTX_set_stateless_cookie_verify_cb(
            self.as_ptr(),
            Some(raw_stateless_cookie_verify::<F>),
        )
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_cookie_generate_cb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_cookie_generate_cb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1544, End Line: 1552
/// Sets the callback for generating a DTLSv1 cookie
///
/// The callback will be called with the SSL context and a slice into which the cookie
/// should be written. The callback should return the number of bytes written.
#[corresponds(SSL_CTX_set_cookie_generate_cb)]
#[cfg(not(boringssl))]
pub fn set_cookie_generate_cb<F>(&mut self, callback: F)
where
    F: Fn(&mut SslRef, &mut [u8]) -> Result<usize, ErrorStack> + 'static + Sync + Send,
{
    unsafe {
        self.set_ex_data(SslContext::cached_ex_index::<F>(), callback);
        ffi::SSL_CTX_set_cookie_generate_cb(
            self.as_ptr(),
            Some(raw_cookie_generate::<F>),
        );
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_cookie_verify_cb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_cookie_verify_cb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1560, End Line: 1568
/// Sets the callback for verifying a DTLSv1 cookie
///
/// The callback will be called with the SSL context and the cookie supplied by the
/// client. It should return true if and only if the cookie is valid.
#[corresponds(SSL_CTX_set_cookie_verify_cb)]
#[cfg(not(boringssl))]
pub fn set_cookie_verify_cb<F>(&mut self, callback: F)
where
    F: Fn(&mut SslRef, &[u8]) -> bool + 'static + Sync + Send,
{
    unsafe {
        self.set_ex_data(SslContext::cached_ex_index::<F>(), callback);
        ffi::SSL_CTX_set_cookie_verify_cb(self.as_ptr(), Some(raw_cookie_verify::<F>));
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: set_ex_data_inner, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_ex_data_inner:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1580, End Line: 1592
fn set_ex_data_inner<T>(&mut self, index: Index<SslContext, T>, data: T) -> *mut c_void {
    match self.ex_data_mut(index) {
        Some(v) => {
            *v = data;
            (v as *mut T).cast()
        }
        _ => {
            unsafe {
                let data = Box::into_raw(Box::new(data)) as *mut c_void;
                ffi::SSL_CTX_set_ex_data(self.as_ptr(), index.as_raw(), data);
                data
            }
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: ex_data_mut, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in ex_data_mut:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1594, End Line: 1603
fn ex_data_mut<T>(&mut self, index: Index<SslContext, T>) -> Option<&mut T> {
    unsafe {
        let data = ffi::SSL_CTX_get_ex_data(self.as_ptr(), index.as_raw());
        if data.is_null() { None } else { Some(&mut *data.cast()) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: add_custom_ext, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in add_custom_ext:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1610, End Line: 1657
/// Adds a custom extension for a TLS/DTLS client or server for all supported protocol versions.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_CTX_add_custom_ext)]
#[cfg(ossl111)]
pub fn add_custom_ext<AddFn, ParseFn, T>(
    &mut self,
    ext_type: u16,
    context: ExtensionContext,
    add_cb: AddFn,
    parse_cb: ParseFn,
) -> Result<(), ErrorStack>
where
    AddFn: Fn(
            &mut SslRef,
            ExtensionContext,
            Option<(usize, &X509Ref)>,
        ) -> Result<Option<T>, SslAlert> + 'static + Sync + Send,
    T: AsRef<[u8]> + 'static + Sync + Send,
    ParseFn: Fn(
            &mut SslRef,
            ExtensionContext,
            &[u8],
            Option<(usize, &X509Ref)>,
        ) -> Result<(), SslAlert> + 'static + Sync + Send,
{
    let ret = unsafe {
        self.set_ex_data(SslContext::cached_ex_index::<AddFn>(), add_cb);
        self.set_ex_data(SslContext::cached_ex_index::<ParseFn>(), parse_cb);
        ffi::SSL_CTX_add_custom_ext(
            self.as_ptr(),
            ext_type as c_uint,
            context.bits(),
            Some(raw_custom_ext_add::<AddFn, T>),
            Some(raw_custom_ext_free::<T>),
            ptr::null_mut(),
            Some(raw_custom_ext_parse::<ParseFn>),
            ptr::null_mut(),
        )
    };
    if ret == 1 { Ok(()) } else { Err(ErrorStack::get()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_max_early_data, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_max_early_data:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1666, End Line: 1672
/// Sets the maximum amount of early data that will be accepted on incoming connections.
///
/// Defaults to 0.
///
/// Requires OpenSSL 1.1.1 or LibreSSL 3.4.0 or newer.
#[corresponds(SSL_CTX_set_max_early_data)]
#[cfg(any(ossl111, libressl340))]
pub fn set_max_early_data(&mut self, bytes: u32) -> Result<(), ErrorStack> {
    if unsafe { ffi::SSL_CTX_set_max_early_data(self.as_ptr(), bytes) } == 1 {
        Ok(())
    } else {
        Err(ErrorStack::get())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_client_hello_callback, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_client_hello_callback:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1679, End Line: 1694
/// Sets a callback which will be invoked just after the client's hello message is received.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_CTX_set_client_hello_cb)]
#[cfg(ossl111)]
pub fn set_client_hello_callback<F>(&mut self, callback: F)
where
    F: Fn(&mut SslRef, &mut SslAlert) -> Result<ClientHelloResponse, ErrorStack>
        + 'static + Sync + Send,
{
    unsafe {
        let ptr = self.set_ex_data_inner(SslContext::cached_ex_index::<F>(), callback);
        ffi::SSL_CTX_set_client_hello_cb(
            self.as_ptr(),
            Some(callbacks::raw_client_hello::<F>),
            ptr,
        );
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_session_cache_size, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_session_cache_size:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1701, End Line: 1705
/// Sets the context's session cache size limit, returning the previous limit.
///
/// A value of 0 means that the cache size is unbounded.
#[corresponds(SSL_CTX_sess_set_cache_size)]
#[allow(clippy::useless_conversion)]
pub fn set_session_cache_size(&mut self, size: i32) -> i64 {
    unsafe {
        ffi::SSL_CTX_sess_set_cache_size(self.as_ptr(), size as SslCacheSize)
            as SslCacheTy
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_sigalgs_list, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_sigalgs_list:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1712, End Line: 1718
/// Sets the context's supported signature algorithms.
///
/// Requires OpenSSL 1.0.2 or newer.
#[corresponds(SSL_CTX_set1_sigalgs_list)]
#[cfg(ossl102)]
pub fn set_sigalgs_list(&mut self, sigalgs: &str) -> Result<(), ErrorStack> {
    let sigalgs = CString::new(sigalgs).unwrap();
    unsafe {
        cvt(ffi::SSL_CTX_set1_sigalgs_list(self.as_ptr(), sigalgs.as_ptr()) as c_int)
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_groups_list, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_groups_list:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1725, End Line: 1730
/// Sets the context's supported elliptic curve groups.
///
/// Requires BoringSSL or OpenSSL 1.1.1 or LibreSSL 2.5.1 or newer.
#[corresponds(SSL_CTX_set1_groups_list)]
#[cfg(any(ossl111, boringssl, libressl251))]
pub fn set_groups_list(&mut self, groups: &str) -> Result<(), ErrorStack> {
    let groups = CString::new(groups).unwrap();
    unsafe {
        cvt(ffi::SSL_CTX_set1_groups_list(self.as_ptr(), groups.as_ptr()) as c_int)
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_num_tickets, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_num_tickets:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1738, End Line: 1740
/// Sets the number of TLS 1.3 session tickets that will be sent to a client after a full
/// handshake.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_CTX_set_num_tickets)]
#[cfg(ossl111)]
pub fn set_num_tickets(&mut self, num_tickets: usize) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::SSL_CTX_set_num_tickets(self.as_ptr(), num_tickets)).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_security_level, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_security_level:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1748, End Line: 1750
/// Set the context's security level to a value between 0 and 5, inclusive.
/// A security value of 0 allows allows all parameters and algorithms.
///
/// Requires OpenSSL 1.1.0 or newer.
#[corresponds(SSL_CTX_set_security_level)]
#[cfg(any(ossl110, libressl360))]
pub fn set_security_level(&mut self, level: u32) {
    unsafe { ffi::SSL_CTX_set_security_level(self.as_ptr(), level as c_int) }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: new_ex_index, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in new_ex_index:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1809, End Line: 1821
/// Returns a new extra data index.
///
/// Each invocation of this function is guaranteed to return a distinct index. These can be used
/// to store data in the context that can be retrieved later by callbacks, for example.
#[corresponds(SSL_CTX_get_ex_new_index)]
pub fn new_ex_index<T>() -> Result<Index<SslContext, T>, ErrorStack>
where
    T: 'static + Sync + Send,
{
    unsafe {
        ffi::init();
        #[cfg(boringssl)]
        let idx = cvt_n(get_new_idx(Some(free_data_box::<T>)))?;
        #[cfg(not(boringssl))]
        let idx = cvt_n(get_new_idx(free_data_box::<T>))?;
        Ok(Index::from_raw(idx))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: cached_ex_index, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in cached_ex_index:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1824, End Line: 1836
fn cached_ex_index<T>() -> Index<SslContext, T>
where
    T: 'static + Sync + Send,
{
    unsafe {
        let idx = *INDEXES
            .lock()
            .unwrap_or_else(|e| e.into_inner())
            .entry(TypeId::of::<T>())
            .or_insert_with(|| SslContext::new_ex_index::<T>().unwrap().as_raw());
        Index::from_raw(idx)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: certificate, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in certificate:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1845, End Line: 1850
/// Returns the certificate associated with this `SslContext`, if present.
///
/// Requires OpenSSL 1.0.2 or LibreSSL 2.7.0 or newer.
#[corresponds(SSL_CTX_get0_certificate)]
#[cfg(any(ossl102, libressl270))]
pub fn certificate(&self) -> Option<&X509Ref> {
    unsafe {
        let ptr = ffi::SSL_CTX_get0_certificate(self.as_ptr());
        X509Ref::from_const_ptr_opt(ptr)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: extra_chain_certs, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in extra_chain_certs:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1872, End Line: 1878
/// Returns a shared reference to the stack of certificates making up the chain from the leaf.
#[corresponds(SSL_CTX_get_extra_chain_certs)]
pub fn extra_chain_certs(&self) -> &StackRef<X509> {
    unsafe {
        let mut chain = ptr::null_mut();
        ffi::SSL_CTX_get_extra_chain_certs(self.as_ptr(), &mut chain);
        StackRef::from_const_ptr_opt(chain).expect("extra chain certs must not be null")
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: ex_data, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in ex_data:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1882, End Line: 1891
/// Returns a reference to the extra data at the specified index.
#[corresponds(SSL_CTX_get_ex_data)]
pub fn ex_data<T>(&self, index: Index<SslContext, T>) -> Option<&T> {
    unsafe {
        let data = ffi::SSL_CTX_get_ex_data(self.as_ptr(), index.as_raw());
        if data.is_null() { None } else { Some(&*(data as *const T)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: max_early_data, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in max_early_data:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1898, End Line: 1900
/// Gets the maximum amount of early data that will be accepted on incoming connections.
///
/// Requires OpenSSL 1.1.1 or LibreSSL 3.4.0 or newer.
#[corresponds(SSL_CTX_get_max_early_data)]
#[cfg(any(ossl111, libressl340))]
pub fn max_early_data(&self) -> u32 {
    unsafe { ffi::SSL_CTX_get_max_early_data(self.as_ptr()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: session_cache_size, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in session_cache_size:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1933, End Line: 1935
/// Returns the context's session cache size limit.
///
/// A value of 0 means that the cache size is unbounded.
#[corresponds(SSL_CTX_sess_get_cache_size)]
#[allow(clippy::unnecessary_cast)]
pub fn session_cache_size(&self) -> i64 {
    unsafe { ffi::SSL_CTX_sess_get_cache_size(self.as_ptr()) as i64 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: num_tickets, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in num_tickets:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1952, End Line: 1954
/// Gets the number of TLS 1.3 session tickets that will be sent to a client after a full
/// handshake.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_CTX_get_num_tickets)]
#[cfg(ossl111)]
pub fn num_tickets(&self) -> usize {
    unsafe { ffi::SSL_CTX_get_num_tickets(self.as_ptr()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: security_level, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in security_level:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 1962, End Line: 1964
/// Get the context's security level, which controls the allowed parameters
/// and algorithms.
///
/// Requires OpenSSL 1.1.0 or newer.
#[corresponds(SSL_CTX_get_security_level)]
#[cfg(any(ossl110, libressl360))]
pub fn security_level(&self) -> u32 {
    unsafe { ffi::SSL_CTX_get_security_level(self.as_ptr()) as u32 }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: standard_name, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in standard_name:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2036, End Line: 2045
/// Returns the RFC-standard name of the cipher, if one exists.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_CIPHER_standard_name)]
#[cfg(ossl111)]
pub fn standard_name(&self) -> Option<&'static str> {
    unsafe {
        let ptr = ffi::SSL_CIPHER_standard_name(self.as_ptr());
        if ptr.is_null() { None } else { Some(CStr::from_ptr(ptr).to_str().unwrap()) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: handshake_digest, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in handshake_digest:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2088, End Line: 2097
/// Returns the handshake digest of the cipher.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_CIPHER_get_handshake_digest)]
#[cfg(ossl111)]
pub fn handshake_digest(&self) -> Option<MessageDigest> {
    unsafe {
        let ptr = ffi::SSL_CIPHER_get_handshake_digest(self.as_ptr());
        if ptr.is_null() { None } else { Some(MessageDigest::from_ptr(ptr)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: cipher_nid, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in cipher_nid:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2104, End Line: 2111
/// Returns the NID corresponding to the cipher.
///
/// Requires OpenSSL 1.1.0 or LibreSSL 2.7.0 or newer.
#[corresponds(SSL_CIPHER_get_cipher_nid)]
#[cfg(any(ossl110, libressl270))]
pub fn cipher_nid(&self) -> Option<Nid> {
    let n = unsafe { ffi::SSL_CIPHER_get_cipher_nid(self.as_ptr()) };
    if n == 0 { None } else { Some(Nid::from_raw(n)) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: master_key_len, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in master_key_len:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2183, End Line: 2185
/// Returns the length of the master key.
#[corresponds(SSL_SESSION_get_master_key)]
pub fn master_key_len(&self) -> usize {
    unsafe { SSL_SESSION_get_master_key(self.as_ptr(), ptr::null_mut(), 0) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: master_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in master_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2191, End Line: 2193
/// Copies the master key into the provided buffer.
///
/// Returns the number of bytes written, or the size of the master key if the buffer is empty.
#[corresponds(SSL_SESSION_get_master_key)]
pub fn master_key(&self, buf: &mut [u8]) -> usize {
    unsafe { SSL_SESSION_get_master_key(self.as_ptr(), buf.as_mut_ptr(), buf.len()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: timeout, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in timeout:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2216, End Line: 2218
/// Returns the sessions timeout, in seconds.
///
/// A session older than this time should not be used for session resumption.
#[corresponds(SSL_SESSION_get_timeout)]
#[allow(clippy::useless_conversion)]
pub fn timeout(&self) -> i64 {
    unsafe { ffi::SSL_SESSION_get_timeout(self.as_ptr()).into() }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: protocol_version, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in protocol_version:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2225, End Line: 2230
/// Returns the session's TLS protocol version.
///
/// Requires OpenSSL 1.1.0 or LibreSSL 2.7.0 or newer.
#[corresponds(SSL_SESSION_get_protocol_version)]
#[cfg(any(ossl110, libressl270))]
pub fn protocol_version(&self) -> SslVersion {
    unsafe {
        let version = ffi::SSL_SESSION_get_protocol_version(self.as_ptr());
        SslVersion(version)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_raw_rbio, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in get_raw_rbio:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2365, End Line: 2367
fn get_raw_rbio(&self) -> *mut ffi::BIO {
    unsafe { ffi::SSL_get_rbio(self.as_ptr()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_error, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in get_error:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2369, End Line: 2371
fn get_error(&self, ret: c_int) -> ErrorCode {
    unsafe { ErrorCode::from_raw(ffi::SSL_get_error(self.as_ptr(), ret)) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_connect_state, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_connect_state:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2375, End Line: 2377
/// Configure as an outgoing stream from a client.
#[corresponds(SSL_set_connect_state)]
pub fn set_connect_state(&mut self) {
    unsafe { ffi::SSL_set_connect_state(self.as_ptr()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_accept_state, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_accept_state:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2381, End Line: 2383
/// Configure as an incoming stream to a server.
#[corresponds(SSL_set_accept_state)]
pub fn set_accept_state(&mut self) {
    unsafe { ffi::SSL_set_accept_state(self.as_ptr()) }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: current_cipher, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in current_cipher:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2504, End Line: 2510
/// Returns the current cipher if the session is active.
#[corresponds(SSL_get_current_cipher)]
pub fn current_cipher(&self) -> Option<&SslCipherRef> {
    unsafe {
        let ptr = ffi::SSL_get_current_cipher(self.as_ptr());
        SslCipherRef::from_const_ptr_opt(ptr)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: state_string, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in state_string:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2514, End Line: 2521
/// Returns a short string describing the state of the session.
#[corresponds(SSL_state_string)]
pub fn state_string(&self) -> &'static str {
    let state = unsafe {
        let ptr = ffi::SSL_state_string(self.as_ptr());
        CStr::from_ptr(ptr as *const _)
    };
    str::from_utf8(state.to_bytes()).unwrap()
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: state_string_long, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in state_string_long:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2525, End Line: 2532
/// Returns a longer string describing the state of the session.
#[corresponds(SSL_state_string_long)]
pub fn state_string_long(&self) -> &'static str {
    let state = unsafe {
        let ptr = ffi::SSL_state_string_long(self.as_ptr());
        CStr::from_ptr(ptr as *const _)
    };
    str::from_utf8(state.to_bytes()).unwrap()
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_hostname, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_hostname:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2538, End Line: 2544
/// Sets the host name to be sent to the server for Server Name Indication (SNI).
///
/// It has no effect for a server-side connection.
#[corresponds(SSL_set_tlsext_host_name)]
pub fn set_hostname(&mut self, hostname: &str) -> Result<(), ErrorStack> {
    let cstr = CString::new(hostname).unwrap();
    unsafe {
        cvt(
                ffi::SSL_set_tlsext_host_name(self.as_ptr(), cstr.as_ptr() as *mut _)
                    as c_int,
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: peer_certificate, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in peer_certificate:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2548, End Line: 2553
/// Returns the peer's certificate, if present.
#[corresponds(SSL_get_peer_certificate)]
pub fn peer_certificate(&self) -> Option<X509> {
    unsafe {
        let ptr = SSL_get1_peer_certificate(self.as_ptr());
        X509::from_ptr_opt(ptr)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: peer_cert_chain, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in peer_cert_chain:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2560, End Line: 2565
/// Returns the certificate chain of the peer, if present.
///
/// On the client side, the chain includes the leaf certificate, but on the server side it does
/// not. Fun!
#[corresponds(SSL_get_peer_cert_chain)]
pub fn peer_cert_chain(&self) -> Option<&StackRef<X509>> {
    unsafe {
        let ptr = ffi::SSL_get_peer_cert_chain(self.as_ptr());
        StackRef::from_const_ptr_opt(ptr)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: verified_chain, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in verified_chain:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2578, End Line: 2583
/// Returns the verified certificate chain of the peer, including the leaf certificate.
///
/// If verification was not successful (i.e. [`verify_result`] does not return
/// [`X509VerifyResult::OK`]), this chain may be incomplete or invalid.
///
/// Requires OpenSSL 1.1.0 or newer.
///
/// [`verify_result`]: #method.verify_result
/// [`X509VerifyResult::OK`]: ../x509/struct.X509VerifyResult.html#associatedconstant.OK
#[corresponds(SSL_get0_verified_chain)]
#[cfg(ossl110)]
pub fn verified_chain(&self) -> Option<&StackRef<X509>> {
    unsafe {
        let ptr = ffi::SSL_get0_verified_chain(self.as_ptr());
        StackRef::from_const_ptr_opt(ptr)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: version2, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in version2:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2612, End Line: 2621
/// Returns the protocol version of the session.
#[corresponds(SSL_version)]
pub fn version2(&self) -> Option<SslVersion> {
    unsafe {
        let r = ffi::SSL_version(self.as_ptr());
        if r == 0 { None } else { Some(SslVersion(r)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: version_str, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in version_str:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2625, End Line: 2632
/// Returns a string describing the protocol version of the session.
#[corresponds(SSL_get_version)]
pub fn version_str(&self) -> &'static str {
    let version = unsafe {
        let ptr = ffi::SSL_get_version(self.as_ptr());
        CStr::from_ptr(ptr as *const _)
    };
    str::from_utf8(version.to_bytes()).unwrap()
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: true, name: selected_alpn_protocol, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in selected_alpn_protocol:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2642, End Line: 2656
/// Returns the protocol selected via Application Layer Protocol Negotiation (ALPN).
///
/// The protocol's name is returned is an opaque sequence of bytes. It is up to the client
/// to interpret it.
///
/// Requires BoringSSL or OpenSSL 1.0.2 or LibreSSL 2.6.1 or newer.
#[corresponds(SSL_get0_alpn_selected)]
#[cfg(any(ossl102, libressl261, boringssl))]
pub fn selected_alpn_protocol(&self) -> Option<&[u8]> {
    unsafe {
        let mut data: *const c_uchar = ptr::null();
        let mut len: c_uint = 0;
        ffi::SSL_get0_alpn_selected(self.as_ptr(), &mut data, &mut len);
        if data.is_null() {
            None
        } else {
            Some(slice::from_raw_parts(data, len as usize))
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: srtp_profiles, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in srtp_profiles:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2686, End Line: 2692
/// Gets all SRTP profiles that are enabled for handshake via set_tlsext_use_srtp
///
/// DTLS extension "use_srtp" as defined in RFC5764 has to be enabled.
///
/// This corresponds to [`SSL_get_srtp_profiles`].
///
/// [`SSL_get_srtp_profiles`]: https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_tlsext_use_srtp.html
#[corresponds(SSL_get_srtp_profiles)]
pub fn srtp_profiles(&self) -> Option<&StackRef<SrtpProtectionProfile>> {
    unsafe {
        let chain = ffi::SSL_get_srtp_profiles(self.as_ptr());
        StackRef::from_const_ptr_opt(chain)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: selected_srtp_profile, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in selected_srtp_profile:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2698, End Line: 2704
/// Gets the SRTP profile selected by handshake.
///
/// DTLS extension "use_srtp" as defined in RFC5764 has to be enabled.
#[corresponds(SSL_get_selected_srtp_profile)]
pub fn selected_srtp_profile(&self) -> Option<&SrtpProtectionProfileRef> {
    unsafe {
        let profile = ffi::SSL_get_selected_srtp_profile(self.as_ptr());
        SrtpProtectionProfileRef::from_const_ptr_opt(profile)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: pending, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in pending:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2711, End Line: 2713
/// Returns the number of bytes remaining in the currently processed TLS record.
///
/// If this is greater than 0, the next call to `read` will not call down to the underlying
/// stream.
#[corresponds(SSL_pending)]
pub fn pending(&self) -> usize {
    unsafe { ffi::SSL_pending(self.as_ptr()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: servername_raw, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in servername_raw:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2742, End Line: 2751
/// Returns the servername sent by the client via Server Name Indication (SNI).
///
/// It is only useful on the server side.
///
/// # Note
///
/// Unlike `servername`, this method does not require the name be valid UTF-8.
#[corresponds(SSL_get_servername)]
pub fn servername_raw(&self, type_: NameType) -> Option<&[u8]> {
    unsafe {
        let name = ffi::SSL_get_servername(self.as_ptr(), type_.0);
        if name.is_null() {
            None
        } else {
            Some(CStr::from_ptr(name as *const _).to_bytes())
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_ssl_context, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_ssl_context:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2757, End Line: 2759
/// Changes the context corresponding to the current connection.
///
/// It is most commonly used in the Server Name Indication (SNI) callback.
#[corresponds(SSL_set_SSL_CTX)]
pub fn set_ssl_context(&mut self, ctx: &SslContextRef) -> Result<(), ErrorStack> {
    unsafe { cvt_p(ffi::SSL_set_SSL_CTX(self.as_ptr(), ctx.as_ptr())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: ssl_context, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in ssl_context:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2763, End Line: 2768
/// Returns the context corresponding to the current connection.
#[corresponds(SSL_get_SSL_CTX)]
pub fn ssl_context(&self) -> &SslContextRef {
    unsafe {
        let ssl_ctx = ffi::SSL_get_SSL_CTX(self.as_ptr());
        SslContextRef::from_ptr(ssl_ctx)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: param_mut, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in param_mut:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2775, End Line: 2777
/// Returns a mutable reference to the X509 verification configuration.
///
/// Requires BoringSSL or OpenSSL 1.0.2 or newer.
#[corresponds(SSL_get0_param)]
#[cfg(any(ossl102, boringssl, libressl261))]
pub fn param_mut(&mut self) -> &mut X509VerifyParamRef {
    unsafe { X509VerifyParamRef::from_ptr_mut(ffi::SSL_get0_param(self.as_ptr())) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: verify_result, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in verify_result:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2781, End Line: 2783
/// Returns the certificate verification result.
#[corresponds(SSL_get_verify_result)]
pub fn verify_result(&self) -> X509VerifyResult {
    unsafe {
        X509VerifyResult::from_raw(ffi::SSL_get_verify_result(self.as_ptr()) as c_int)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: session, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in session:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2787, End Line: 2792
/// Returns a shared reference to the SSL session.
#[corresponds(SSL_get_session)]
pub fn session(&self) -> Option<&SslSessionRef> {
    unsafe {
        let p = ffi::SSL_get_session(self.as_ptr());
        SslSessionRef::from_const_ptr_opt(p)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: client_random, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in client_random:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2802, End Line: 2806
/// Copies the `client_random` value sent by the client in the TLS handshake into a buffer.
///
/// Returns the number of bytes copied, or if the buffer is empty, the size of the `client_random`
/// value.
///
/// Requires OpenSSL 1.1.0 or LibreSSL 2.7.0 or newer.
#[corresponds(SSL_get_client_random)]
#[cfg(any(ossl110, libressl270))]
pub fn client_random(&self, buf: &mut [u8]) -> usize {
    unsafe {
        ffi::SSL_get_client_random(
            self.as_ptr(),
            buf.as_mut_ptr() as *mut c_uchar,
            buf.len(),
        )
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: server_random, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in server_random:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2816, End Line: 2820
/// Copies the `server_random` value sent by the server in the TLS handshake into a buffer.
///
/// Returns the number of bytes copied, or if the buffer is empty, the size of the `server_random`
/// value.
///
/// Requires OpenSSL 1.1.0 or LibreSSL 2.7.0 or newer.
#[corresponds(SSL_get_server_random)]
#[cfg(any(ossl110, libressl270))]
pub fn server_random(&self, buf: &mut [u8]) -> usize {
    unsafe {
        ffi::SSL_get_server_random(
            self.as_ptr(),
            buf.as_mut_ptr() as *mut c_uchar,
            buf.len(),
        )
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: export_keying_material, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in export_keying_material:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2824, End Line: 2847
/// Derives keying material for application use in accordance to RFC 5705.
#[corresponds(SSL_export_keying_material)]
pub fn export_keying_material(
    &self,
    out: &mut [u8],
    label: &str,
    context: Option<&[u8]>,
) -> Result<(), ErrorStack> {
    unsafe {
        let (context, contextlen, use_context) = match context {
            Some(context) => (context.as_ptr() as *const c_uchar, context.len(), 1),
            None => (ptr::null(), 0, 0),
        };
        cvt(
                ffi::SSL_export_keying_material(
                    self.as_ptr(),
                    out.as_mut_ptr() as *mut c_uchar,
                    out.len(),
                    label.as_ptr() as *const c_char,
                    label.len(),
                    context,
                    contextlen,
                    use_context,
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: export_keying_material_early, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in export_keying_material_early:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2857, End Line: 2875
/// Derives keying material for application use in accordance to RFC 5705.
///
/// This function is only usable with TLSv1.3, wherein there is no distinction between an empty context and no
/// context. Therefore, unlike `export_keying_material`, `context` must always be supplied.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_export_keying_material_early)]
#[cfg(ossl111)]
pub fn export_keying_material_early(
    &self,
    out: &mut [u8],
    label: &str,
    context: &[u8],
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(
                ffi::SSL_export_keying_material_early(
                    self.as_ptr(),
                    out.as_mut_ptr() as *mut c_uchar,
                    out.len(),
                    label.as_ptr() as *const c_char,
                    label.len(),
                    context.as_ptr() as *const c_uchar,
                    context.len(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: session_reused, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in session_reused:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2894, End Line: 2896
/// Determines if the session provided to `set_session` was successfully reused.
#[corresponds(SSL_session_reused)]
pub fn session_reused(&self) -> bool {
    unsafe { ffi::SSL_session_reused(self.as_ptr()) != 0 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_status_type, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_status_type:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2900, End Line: 2904
/// Sets the status response a client wishes the server to reply with.
#[corresponds(SSL_set_tlsext_status_type)]
pub fn set_status_type(&mut self, type_: StatusType) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::SSL_set_tlsext_status_type(self.as_ptr(), type_.as_raw()) as c_int)
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: extms_support, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in extms_support:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2911, End Line: 2918
/// Determines if current session used Extended Master Secret
///
/// Returns `None` if the handshake is still in-progress.
#[corresponds(SSL_get_extms_support)]
#[cfg(ossl110)]
pub fn extms_support(&self) -> Option<bool> {
    unsafe {
        match ffi::SSL_get_extms_support(self.as_ptr()) {
            -1 => None,
            ret => Some(ret != 0),
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: true, name: ocsp_status, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in ocsp_status:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2923, End Line: 2934
/// Returns the server's OCSP response, if present.
#[corresponds(SSL_get_tlsext_status_ocsp_resp)]
#[cfg(not(boringssl))]
pub fn ocsp_status(&self) -> Option<&[u8]> {
    unsafe {
        let mut p = ptr::null_mut();
        let len = ffi::SSL_get_tlsext_status_ocsp_resp(self.as_ptr(), &mut p);
        if len < 0 {
            None
        } else {
            Some(slice::from_raw_parts(p as *const u8, len as usize))
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: set_ocsp_status, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_ocsp_status:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2939, End Line: 2955
/// Sets the OCSP response to be returned to the client.
#[corresponds(SSL_set_tlsext_status_oscp_resp)]
#[cfg(not(boringssl))]
pub fn set_ocsp_status(&mut self, response: &[u8]) -> Result<(), ErrorStack> {
    unsafe {
        assert!(response.len() <= c_int::MAX as usize);
        let p = cvt_p(ffi::OPENSSL_malloc(response.len() as _))?;
        ptr::copy_nonoverlapping(response.as_ptr(), p as *mut u8, response.len());
        cvt(
                ffi::SSL_set_tlsext_status_ocsp_resp(
                    self.as_ptr(),
                    p as *mut c_uchar,
                    response.len() as c_long,
                ) as c_int,
            )
            .map(|_| ())
            .map_err(|e| {
                ffi::OPENSSL_free(p);
                e
            })
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: is_server, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in is_server:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 2959, End Line: 2961
/// Determines if this `Ssl` is configured for server-side or client-side use.
#[corresponds(SSL_is_server)]
pub fn is_server(&self) -> bool {
    unsafe { SSL_is_server(self.as_ptr()) != 0 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: finished, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in finished:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3036, End Line: 3038
/// Copies the contents of the last Finished message sent to the peer into the provided buffer.
///
/// The total size of the message is returned, so this can be used to determine the size of the
/// buffer required.
#[corresponds(SSL_get_finished)]
pub fn finished(&self, buf: &mut [u8]) -> usize {
    unsafe {
        ffi::SSL_get_finished(self.as_ptr(), buf.as_mut_ptr() as *mut c_void, buf.len())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: peer_finished, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in peer_finished:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3046, End Line: 3050
/// Copies the contents of the last Finished message received from the peer into the provided
/// buffer.
///
/// The total size of the message is returned, so this can be used to determine the size of the
/// buffer required.
#[corresponds(SSL_get_peer_finished)]
pub fn peer_finished(&self, buf: &mut [u8]) -> usize {
    unsafe {
        ffi::SSL_get_peer_finished(
            self.as_ptr(),
            buf.as_mut_ptr() as *mut c_void,
            buf.len(),
        )
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: is_init_finished, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in is_init_finished:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3055, End Line: 3057
/// Determines if the initial handshake has been completed.
#[corresponds(SSL_is_init_finished)]
#[cfg(ossl110)]
pub fn is_init_finished(&self) -> bool {
    unsafe { ffi::SSL_is_init_finished(self.as_ptr()) != 0 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: client_hello_isv2, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in client_hello_isv2:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3066, End Line: 3068
/// Determines if the client's hello message is in the SSLv2 format.
///
/// This can only be used inside of the client hello callback. Otherwise, `false` is returned.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_client_hello_isv2)]
#[cfg(ossl111)]
pub fn client_hello_isv2(&self) -> bool {
    unsafe { ffi::SSL_client_hello_isv2(self.as_ptr()) != 0 }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: client_hello_legacy_version, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in client_hello_legacy_version:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3077, End Line: 3086
/// Returns the legacy version field of the client's hello message.
///
/// This can only be used inside of the client hello callback. Otherwise, `None` is returned.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_client_hello_get0_legacy_version)]
#[cfg(ossl111)]
pub fn client_hello_legacy_version(&self) -> Option<SslVersion> {
    unsafe {
        let version = ffi::SSL_client_hello_get0_legacy_version(self.as_ptr());
        if version == 0 { None } else { Some(SslVersion(version as c_int)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: true, name: client_hello_random, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in client_hello_random:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3095, End Line: 3105
/// Returns the random field of the client's hello message.
///
/// This can only be used inside of the client hello callback. Otherwise, `None` is returned.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_client_hello_get0_random)]
#[cfg(ossl111)]
pub fn client_hello_random(&self) -> Option<&[u8]> {
    unsafe {
        let mut ptr = ptr::null();
        let len = ffi::SSL_client_hello_get0_random(self.as_ptr(), &mut ptr);
        if len == 0 { None } else { Some(slice::from_raw_parts(ptr, len)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: true, name: client_hello_session_id, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in client_hello_session_id:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3114, End Line: 3124
/// Returns the session ID field of the client's hello message.
///
/// This can only be used inside of the client hello callback. Otherwise, `None` is returned.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_client_hello_get0_session_id)]
#[cfg(ossl111)]
pub fn client_hello_session_id(&self) -> Option<&[u8]> {
    unsafe {
        let mut ptr = ptr::null();
        let len = ffi::SSL_client_hello_get0_session_id(self.as_ptr(), &mut ptr);
        if len == 0 { None } else { Some(slice::from_raw_parts(ptr, len)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: true, name: client_hello_ciphers, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in client_hello_ciphers:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3133, End Line: 3143
/// Returns the ciphers field of the client's hello message.
///
/// This can only be used inside of the client hello callback. Otherwise, `None` is returned.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_client_hello_get0_ciphers)]
#[cfg(ossl111)]
pub fn client_hello_ciphers(&self) -> Option<&[u8]> {
    unsafe {
        let mut ptr = ptr::null();
        let len = ffi::SSL_client_hello_get0_ciphers(self.as_ptr(), &mut ptr);
        if len == 0 { None } else { Some(slice::from_raw_parts(ptr, len)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, complex: true, name: bytes_to_cipher_list, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in bytes_to_cipher_list:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3151, End Line: 3178
/// Decodes a slice of wire-format cipher suite specification bytes. Unsupported cipher suites
/// are ignored.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_bytes_to_cipher_list)]
#[cfg(ossl111)]
pub fn bytes_to_cipher_list(
    &self,
    bytes: &[u8],
    isv2format: bool,
) -> Result<CipherLists, ErrorStack> {
    unsafe {
        let ptr = bytes.as_ptr();
        let len = bytes.len();
        let mut sk = ptr::null_mut();
        let mut scsvs = ptr::null_mut();
        let res = ffi::SSL_bytes_to_cipher_list(
            self.as_ptr(),
            ptr,
            len,
            isv2format as c_int,
            &mut sk,
            &mut scsvs,
        );
        if res == 1 {
            Ok(CipherLists {
                suites: Stack::from_ptr(sk),
                signalling_suites: Stack::from_ptr(scsvs),
            })
        } else {
            Err(ErrorStack::get())
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: true, name: client_hello_compression_methods, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in client_hello_compression_methods:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3187, End Line: 3197
/// Returns the compression methods field of the client's hello message.
///
/// This can only be used inside of the client hello callback. Otherwise, `None` is returned.
///
/// Requires OpenSSL 1.1.1 or newer.
#[corresponds(SSL_client_hello_get0_compression_methods)]
#[cfg(ossl111)]
pub fn client_hello_compression_methods(&self) -> Option<&[u8]> {
    unsafe {
        let mut ptr = ptr::null();
        let len = ffi::SSL_client_hello_get0_compression_methods(
            self.as_ptr(),
            &mut ptr,
        );
        if len == 0 { None } else { Some(slice::from_raw_parts(ptr, len)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_mtu, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_mtu:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3201, End Line: 3203
/// Sets the MTU used for DTLS connections.
#[corresponds(SSL_set_mtu)]
pub fn set_mtu(&mut self, mtu: u32) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::SSL_set_mtu(self.as_ptr(), mtu as MtuTy) as c_int).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: psk_identity_hint, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in psk_identity_hint:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3210, End Line: 3219
/// Returns the PSK identity hint used during connection setup.
///
/// May return `None` if no PSK identity hint was used during the connection setup.
#[corresponds(SSL_get_psk_identity_hint)]
#[cfg(not(osslconf = "OPENSSL_NO_PSK"))]
pub fn psk_identity_hint(&self) -> Option<&[u8]> {
    unsafe {
        let ptr = ffi::SSL_get_psk_identity_hint(self.as_ptr());
        if ptr.is_null() { None } else { Some(CStr::from_ptr(ptr).to_bytes()) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: psk_identity, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in psk_identity:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3224, End Line: 3233
/// Returns the PSK identity used during connection setup.
#[corresponds(SSL_get_psk_identity)]
#[cfg(not(osslconf = "OPENSSL_NO_PSK"))]
pub fn psk_identity(&self) -> Option<&[u8]> {
    unsafe {
        let ptr = ffi::SSL_get_psk_identity(self.as_ptr());
        if ptr.is_null() { None } else { Some(CStr::from_ptr(ptr).to_bytes()) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: add_chain_cert, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in add_chain_cert:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3237, End Line: 3243
#[corresponds(SSL_add0_chain_cert)]
#[cfg(ossl102)]
pub fn add_chain_cert(&mut self, chain: X509) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::SSL_add0_chain_cert(self.as_ptr(), chain.as_ptr()) as c_int)
            .map(|_| ())?;
        mem::forget(chain);
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_method, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_method:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3247, End Line: 3252
/// Sets a new default TLS/SSL method for SSL objects
#[cfg(not(boringssl))]
pub fn set_method(&mut self, method: SslMethod) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::SSL_set_ssl_method(self.as_ptr(), method.as_ptr()))?;
    };
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: peer_tmp_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in peer_tmp_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3462, End Line: 3470
/// Get the temporary key provided by the peer that is used during key
/// exchange.
#[corresponds(SSL_get_peer_tmp_key)]
#[cfg(ossl300)]
pub fn peer_tmp_key(&self) -> Result<PKey<Public>, ErrorStack> {
    unsafe {
        let mut key = ptr::null_mut();
        match cvt_long(ffi::SSL_get_peer_tmp_key(self.as_ptr(), &mut key)) {
            Ok(_) => Ok(PKey::<Public>::from_ptr(key)),
            Err(e) => Err(e),
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: tmp_key, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in tmp_key:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3478, End Line: 3486
/// Returns the temporary key from the local end of the connection that is
/// used during key exchange.
#[corresponds(SSL_get_tmp_key)]
#[cfg(ossl300)]
pub fn tmp_key(&self) -> Result<PKey<Private>, ErrorStack> {
    unsafe {
        let mut key = ptr::null_mut();
        match cvt_long(ffi::SSL_get_tmp_key(self.as_ptr(), &mut key)) {
            Ok(_) => Ok(PKey::<Private>::from_ptr(key)),
            Err(e) => Err(e),
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: read_early_data, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in read_early_data:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3625, End Line: 3641
/// Read application data transmitted by a client before handshake completion.
///
/// Useful for reducing latency, but vulnerable to replay attacks. Call
/// [`SslRef::set_accept_state`] first.
///
/// Returns `Ok(0)` if all early data has been read.
///
/// Requires OpenSSL 1.1.1 or LibreSSL 3.4.0 or newer.
#[corresponds(SSL_read_early_data)]
#[cfg(any(ossl111, libressl340))]
pub fn read_early_data(&mut self, buf: &mut [u8]) -> Result<usize, Error> {
    let mut read = 0;
    let ret = unsafe {
        ffi::SSL_read_early_data(
            self.ssl.as_ptr(),
            buf.as_ptr() as *mut c_void,
            buf.len(),
            &mut read,
        )
    };
    match ret {
        ffi::SSL_READ_EARLY_DATA_ERROR => Err(self.make_error(ret)),
        ffi::SSL_READ_EARLY_DATA_SUCCESS => Ok(read),
        ffi::SSL_READ_EARLY_DATA_FINISH => Ok(0),
        _ => unreachable!(),
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: write_early_data, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in write_early_data:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3651, End Line: 3666
/// Send data to the server without blocking on handshake completion.
///
/// Useful for reducing latency, but vulnerable to replay attacks. Call
/// [`SslRef::set_connect_state`] first.
///
/// Requires OpenSSL 1.1.1 or LibreSSL 3.4.0 or newer.
#[corresponds(SSL_write_early_data)]
#[cfg(any(ossl111, libressl340))]
pub fn write_early_data(&mut self, buf: &[u8]) -> Result<usize, Error> {
    let mut written = 0;
    let ret = unsafe {
        ffi::SSL_write_early_data(
            self.ssl.as_ptr(),
            buf.as_ptr() as *const c_void,
            buf.len(),
            &mut written,
        )
    };
    if ret > 0 { Ok(written) } else { Err(self.make_error(ret)) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: do_handshake, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in do_handshake:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3704, End Line: 3711
/// Initiates the handshake.
///
/// This will fail if `set_accept_state` or `set_connect_state` was not called first.
#[corresponds(SSL_do_handshake)]
pub fn do_handshake(&mut self) -> Result<(), Error> {
    let ret = unsafe { ffi::SSL_do_handshake(self.ssl.as_ptr()) };
    if ret > 0 { Ok(()) } else { Err(self.make_error(ret)) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: stateless, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in stateless:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3725, End Line: 3732
/// Perform a stateless server-side handshake.
///
/// Requires that cookie generation and verification callbacks were
/// set on the SSL context.
///
/// Returns `Ok(true)` if a complete ClientHello containing a valid cookie
/// was read, in which case the handshake should be continued via
/// `accept`. If a HelloRetryRequest containing a fresh cookie was
/// transmitted, `Ok(false)` is returned instead. If the handshake cannot
/// proceed at all, `Err` is returned.
#[corresponds(SSL_stateless)]
#[cfg(ossl111)]
pub fn stateless(&mut self) -> Result<bool, ErrorStack> {
    match unsafe { ffi::SSL_stateless(self.ssl.as_ptr()) } {
        1 => Ok(true),
        0 => Ok(false),
        -1 => Err(ErrorStack::get()),
        _ => unreachable!(),
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: ssl_read, with_SAFETY_comment: true, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: get_shutdown, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in get_shutdown:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3916, End Line: 3921
/// Returns the session's shutdown state.
#[corresponds(SSL_get_shutdown)]
pub fn get_shutdown(&mut self) -> ShutdownState {
    unsafe {
        let bits = ffi::SSL_get_shutdown(self.ssl.as_ptr());
        ShutdownState::from_bits_retain(bits)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_shutdown, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in set_shutdown:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3928, End Line: 3930
/// Sets the session's shutdown state.
///
/// This can be used to tell OpenSSL that the session should be cached even if a full two-way
/// shutdown was not completed.
#[corresponds(SSL_set_shutdown)]
pub fn set_shutdown(&mut self, state: ShutdownState) {
    unsafe { ffi::SSL_set_shutdown(self.ssl.as_ptr(), state.bits()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: check_panic, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in check_panic:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3959, End Line: 3963
fn check_panic(&mut self) {
    if let Some(err) = unsafe { bio::take_panic::<S>(self.ssl.get_raw_rbio()) } {
        resume_unwind(err)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_bio_error, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs 

Found method with unsafe block in get_bio_error:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\mod.rs
Start Line: 3965, End Line: 3967
fn get_bio_error(&mut self) -> Option<io::Error> {
    unsafe { bio::take_error::<S>(self.ssl.get_raw_rbio()) }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\test\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\ssl\test\server.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: next_back, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs 

Found method with unsafe block in next_back:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\stack.rs
Start Line: 169, End Line: 175
fn next_back(&mut self) -> Option<T> {
    unsafe {
        self.idxs
            .next_back()
            .map(|i| T::from_ptr(OPENSSL_sk_value(self.stack as *mut _, i) as *mut _))
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\string.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia_128_cbc, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs 

Found method with unsafe block in camellia_128_cbc:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Start Line: 306, End Line: 308
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia_128_cbc() -> Cipher {
    unsafe { Cipher(ffi::EVP_camellia_128_cbc()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia_128_ecb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs 

Found method with unsafe block in camellia_128_ecb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Start Line: 311, End Line: 313
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia_128_ecb() -> Cipher {
    unsafe { Cipher(ffi::EVP_camellia_128_ecb()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia_128_ofb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs 

Found method with unsafe block in camellia_128_ofb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Start Line: 316, End Line: 318
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia_128_ofb() -> Cipher {
    unsafe { Cipher(ffi::EVP_camellia_128_ofb()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia_128_cfb128, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs 

Found method with unsafe block in camellia_128_cfb128:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Start Line: 321, End Line: 323
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia_128_cfb128() -> Cipher {
    unsafe { Cipher(ffi::EVP_camellia_128_cfb128()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia_192_cbc, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs 

Found method with unsafe block in camellia_192_cbc:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Start Line: 326, End Line: 328
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia_192_cbc() -> Cipher {
    unsafe { Cipher(ffi::EVP_camellia_192_cbc()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia_192_ecb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs 

Found method with unsafe block in camellia_192_ecb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Start Line: 331, End Line: 333
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia_192_ecb() -> Cipher {
    unsafe { Cipher(ffi::EVP_camellia_192_ecb()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia_192_ofb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs 

Found method with unsafe block in camellia_192_ofb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Start Line: 336, End Line: 338
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia_192_ofb() -> Cipher {
    unsafe { Cipher(ffi::EVP_camellia_192_ofb()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia_192_cfb128, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs 

Found method with unsafe block in camellia_192_cfb128:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Start Line: 341, End Line: 343
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia_192_cfb128() -> Cipher {
    unsafe { Cipher(ffi::EVP_camellia_192_cfb128()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia_256_cbc, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs 

Found method with unsafe block in camellia_256_cbc:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Start Line: 346, End Line: 348
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia_256_cbc() -> Cipher {
    unsafe { Cipher(ffi::EVP_camellia_256_cbc()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia_256_ecb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs 

Found method with unsafe block in camellia_256_ecb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Start Line: 351, End Line: 353
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia_256_ecb() -> Cipher {
    unsafe { Cipher(ffi::EVP_camellia_256_ecb()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia_256_ofb, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs 

Found method with unsafe block in camellia_256_ofb:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Start Line: 356, End Line: 358
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia_256_ofb() -> Cipher {
    unsafe { Cipher(ffi::EVP_camellia_256_ofb()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: camellia_256_cfb128, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs 

Found method with unsafe block in camellia_256_cfb128:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Start Line: 361, End Line: 363
#[cfg(not(osslconf = "OPENSSL_NO_CAMELLIA"))]
pub fn camellia_256_cfb128() -> Cipher {
    unsafe { Cipher(ffi::EVP_camellia_256_cfb128()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: key_len, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs 

Found method with unsafe block in key_len:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Start Line: 478, End Line: 480
/// Returns the length of keys used with this cipher.
#[allow(clippy::trivially_copy_pass_by_ref)]
pub fn key_len(&self) -> usize {
    unsafe { EVP_CIPHER_key_length(self.0) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: iv_len, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs 

Found method with unsafe block in iv_len:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\symm.rs
Start Line: 485, End Line: 494
/// Returns the length of the IV used with this cipher, or `None` if the
/// cipher does not use an IV.
#[allow(clippy::trivially_copy_pass_by_ref)]
pub fn iv_len(&self) -> Option<usize> {
    unsafe {
        let len = EVP_CIPHER_iv_length(self.0) as usize;
        if len == 0 { None } else { Some(len) }
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\util.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\version.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: number, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\version.rs 

Found function with unsafe block in number:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\version.rs
Start Line: 48, End Line: 50
/// OPENSSL_VERSION_NUMBER is a numeric release version identifier:
///
/// `MNNFFPPS: major minor fix patch status`
///
/// The status nibble has one of the values 0 for development, 1 to e for betas 1 to 14, and f for release.
///
/// for example
///
/// `0x000906000 == 0.9.6 dev`
/// `0x000906023 == 0.9.6b beta 3`
/// `0x00090605f == 0.9.6e release`
#[corresponds(OpenSSL_version_num)]
pub fn number() -> i64 {
    unsafe { OpenSSL_version_num() as i64 }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: c_flags, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\version.rs 

Found function with unsafe block in c_flags:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\version.rs
Start Line: 65, End Line: 71
/// The compiler flags set for the compilation process in the form "compiler: ..." if available or
/// "compiler: information not available" otherwise.
#[corresponds(OpenSSL_version)]
pub fn c_flags() -> &'static str {
    unsafe { CStr::from_ptr(OpenSSL_version(OPENSSL_CFLAGS)).to_str().unwrap() }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: built_on, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\version.rs 

Found function with unsafe block in built_on:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\version.rs
Start Line: 75, End Line: 81
/// The date of the build process in the form "built on: ..." if available or "built on: date not available" otherwise.
#[corresponds(OpenSSL_version)]
pub fn built_on() -> &'static str {
    unsafe { CStr::from_ptr(OpenSSL_version(OPENSSL_BUILT_ON)).to_str().unwrap() }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: platform, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\version.rs 

Found function with unsafe block in platform:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\version.rs
Start Line: 85, End Line: 91
/// The "Configure" target of the library build in the form "platform: ..." if available or "platform: information not available" otherwise.
#[corresponds(OpenSSL_version)]
pub fn platform() -> &'static str {
    unsafe { CStr::from_ptr(OpenSSL_version(OPENSSL_PLATFORM)).to_str().unwrap() }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\extension.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: ssl_idx, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in ssl_idx:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 78, End Line: 80
/// Returns the index which can be used to obtain a reference to the `Ssl` associated with a
/// context.
#[corresponds(SSL_get_ex_data_X509_STORE_CTX_idx)]
pub fn ssl_idx() -> Result<Index<X509StoreContext, SslRef>, ErrorStack> {
    unsafe {
        cvt_n(ffi::SSL_get_ex_data_X509_STORE_CTX_idx()).map(|idx| Index::from_raw(idx))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: verify_cert, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in verify_cert:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 167, End Line: 169
/// Verifies the stored certificate.
///
/// Returns `true` if verification succeeds. The `error` method will return the specific
/// validation error if the certificate was not valid.
///
/// This will only work inside of a call to `init`.
#[corresponds(X509_verify_cert)]
pub fn verify_cert(&mut self) -> Result<bool, ErrorStack> {
    unsafe { cvt_n(ffi::X509_verify_cert(self.as_ptr())).map(|n| n != 0) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_error, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in set_error:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 173, End Line: 177
/// Set the error code of the context.
#[corresponds(X509_STORE_CTX_set_error)]
pub fn set_error(&mut self, result: X509VerifyResult) {
    unsafe {
        ffi::X509_STORE_CTX_set_error(self.as_ptr(), result.as_raw());
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: current_cert, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in current_cert:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 182, End Line: 187
/// Returns a reference to the certificate which caused the error or None if
/// no certificate is relevant to the error.
#[corresponds(X509_STORE_CTX_get_current_cert)]
pub fn current_cert(&self) -> Option<&X509Ref> {
    unsafe {
        let ptr = ffi::X509_STORE_CTX_get_current_cert(self.as_ptr());
        X509Ref::from_const_ptr_opt(ptr)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: error_depth, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in error_depth:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 194, End Line: 196
/// Returns a non-negative integer representing the depth in the certificate
/// chain where the error occurred. If it is zero it occurred in the end
/// entity certificate, one if it is the certificate which signed the end
/// entity certificate and so on.
#[corresponds(X509_STORE_CTX_get_error_depth)]
pub fn error_depth(&self) -> u32 {
    unsafe { ffi::X509_STORE_CTX_get_error_depth(self.as_ptr()) as u32 }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: chain, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in chain:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 200, End Line: 210
/// Returns a reference to a complete valid `X509` certificate chain.
#[corresponds(X509_STORE_CTX_get0_chain)]
pub fn chain(&self) -> Option<&StackRef<X509>> {
    unsafe {
        let chain = X509_STORE_CTX_get0_chain(self.as_ptr());
        if chain.is_null() { None } else { Some(StackRef::from_ptr(chain)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_not_after, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in set_not_after:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 228, End Line: 230
/// Sets the notAfter constraint on the certificate.
#[corresponds(X509_set1_notAfter)]
pub fn set_not_after(&mut self, not_after: &Asn1TimeRef) -> Result<(), ErrorStack> {
    unsafe { cvt(X509_set1_notAfter(self.0.as_ptr(), not_after.as_ptr())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_not_before, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in set_not_before:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 234, End Line: 236
/// Sets the notBefore constraint on the certificate.
#[corresponds(X509_set1_notBefore)]
pub fn set_not_before(&mut self, not_before: &Asn1TimeRef) -> Result<(), ErrorStack> {
    unsafe { cvt(X509_set1_notBefore(self.0.as_ptr(), not_before.as_ptr())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_version, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in set_version:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 244, End Line: 246
/// Sets the version of the certificate.
///
/// Note that the version is zero-indexed; that is, a certificate corresponding to version 3 of
/// the X.509 standard should pass `2` to this method.
#[corresponds(X509_set_version)]
#[allow(clippy::useless_conversion)]
pub fn set_version(&mut self, version: i32) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::X509_set_version(self.0.as_ptr(), version as c_long)).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_serial_number, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in set_serial_number:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 250, End Line: 258
/// Sets the serial number of the certificate.
#[corresponds(X509_set_serialNumber)]
pub fn set_serial_number(
    &mut self,
    serial_number: &Asn1IntegerRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::X509_set_serialNumber(self.0.as_ptr(), serial_number.as_ptr()))
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_issuer_name, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in set_issuer_name:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 262, End Line: 270
/// Sets the issuer name of the certificate.
#[corresponds(X509_set_issuer_name)]
pub fn set_issuer_name(&mut self, issuer_name: &X509NameRef) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::X509_set_issuer_name(self.0.as_ptr(), issuer_name.as_ptr())).map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_subject_name, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in set_subject_name:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 291, End Line: 299
/// Sets the subject name of the certificate.
///
/// When building certificates, the `C`, `ST`, and `O` options are common when using the openssl command line tools.
/// The `CN` field is used for the common name, such as a DNS name.
///
/// ```
/// use openssl::x509::{X509, X509NameBuilder};
///
/// let mut x509_name = openssl::x509::X509NameBuilder::new().unwrap();
/// x509_name.append_entry_by_text("C", "US").unwrap();
/// x509_name.append_entry_by_text("ST", "CA").unwrap();
/// x509_name.append_entry_by_text("O", "Some organization").unwrap();
/// x509_name.append_entry_by_text("CN", "www.example.com").unwrap();
/// let x509_name = x509_name.build();
///
/// let mut x509 = openssl::x509::X509::builder().unwrap();
/// x509.set_subject_name(&x509_name).unwrap();
/// ```
#[corresponds(X509_set_subject_name)]
pub fn set_subject_name(
    &mut self,
    subject_name: &X509NameRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::X509_set_subject_name(self.0.as_ptr(), subject_name.as_ptr()))
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_pubkey, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in set_pubkey:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 303, End Line: 308
/// Sets the public key associated with the certificate.
#[corresponds(X509_set_pubkey)]
pub fn set_pubkey<T>(&mut self, key: &PKeyRef<T>) -> Result<(), ErrorStack>
where
    T: HasPublic,
{
    unsafe { cvt(ffi::X509_set_pubkey(self.0.as_ptr(), key.as_ptr())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, complex: true, name: x509v3_context, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in x509v3_context:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 314, End Line: 343
/// Returns a context object which is needed to create certain X509 extension values.
///
/// Set `issuer` to `None` if the certificate will be self-signed.
#[corresponds(X509V3_set_ctx)]
pub fn x509v3_context<'a>(
    &'a self,
    issuer: Option<&'a X509Ref>,
    conf: Option<&'a ConfRef>,
) -> X509v3Context<'a> {
    unsafe {
        let mut ctx = mem::zeroed();
        let issuer = match issuer {
            Some(issuer) => issuer.as_ptr(),
            None => self.0.as_ptr(),
        };
        let subject = self.0.as_ptr();
        ffi::X509V3_set_ctx(
            &mut ctx,
            issuer,
            subject,
            ptr::null_mut(),
            ptr::null_mut(),
            0,
        );
        if let Some(conf) = conf {
            ffi::X509V3_set_nconf(&mut ctx, conf.as_ptr());
        }
        X509v3Context(ctx, PhantomData)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: append_extension2, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in append_extension2:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 354, End Line: 359
/// Adds an X509 extension value to the certificate.
#[corresponds(X509_add_ext)]
pub fn append_extension2(
    &mut self,
    extension: &X509ExtensionRef,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::X509_add_ext(self.0.as_ptr(), extension.as_ptr(), -1))?;
        Ok(())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: subject_name, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in subject_name:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 389, End Line: 394
/// Returns this certificate's subject name.
#[corresponds(X509_get_subject_name)]
pub fn subject_name(&self) -> &X509NameRef {
    unsafe {
        let name = ffi::X509_get_subject_name(self.as_ptr());
        X509NameRef::from_const_ptr_opt(name).expect("subject name must not be null")
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: subject_name_hash, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in subject_name_hash:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 398, End Line: 403
/// Returns the hash of the certificates subject
#[corresponds(X509_subject_name_hash)]
pub fn subject_name_hash(&self) -> u32 {
    #[allow(clippy::unnecessary_cast)]
    unsafe { ffi::X509_subject_name_hash(self.as_ptr()) as u32 }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: issuer_name, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in issuer_name:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 407, End Line: 412
/// Returns this certificate's issuer name.
#[corresponds(X509_get_issuer_name)]
pub fn issuer_name(&self) -> &X509NameRef {
    unsafe {
        let name = ffi::X509_get_issuer_name(self.as_ptr());
        X509NameRef::from_const_ptr_opt(name).expect("issuer name must not be null")
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: issuer_name_hash, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in issuer_name_hash:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 416, End Line: 421
/// Returns the hash of the certificates issuer
#[corresponds(X509_issuer_name_hash)]
pub fn issuer_name_hash(&self) -> u32 {
    #[allow(clippy::unnecessary_cast)]
    unsafe { ffi::X509_issuer_name_hash(self.as_ptr()) as u32 }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: subject_alt_names, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in subject_alt_names:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 425, End Line: 435
/// Returns this certificate's subject alternative name entries, if they exist.
#[corresponds(X509_get_ext_d2i)]
pub fn subject_alt_names(&self) -> Option<Stack<GeneralName>> {
    unsafe {
        let stack = ffi::X509_get_ext_d2i(
            self.as_ptr(),
            ffi::NID_subject_alt_name,
            ptr::null_mut(),
            ptr::null_mut(),
        );
        Stack::from_ptr_opt(stack as *mut _)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: crl_distribution_points, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in crl_distribution_points:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 439, End Line: 449
/// Returns this certificate's CRL distribution points, if they exist.
#[corresponds(X509_get_ext_d2i)]
pub fn crl_distribution_points(&self) -> Option<Stack<DistPoint>> {
    unsafe {
        let stack = ffi::X509_get_ext_d2i(
            self.as_ptr(),
            ffi::NID_crl_distribution_points,
            ptr::null_mut(),
            ptr::null_mut(),
        );
        Stack::from_ptr_opt(stack as *mut _)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: issuer_alt_names, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in issuer_alt_names:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 453, End Line: 463
/// Returns this certificate's issuer alternative name entries, if they exist.
#[corresponds(X509_get_ext_d2i)]
pub fn issuer_alt_names(&self) -> Option<Stack<GeneralName>> {
    unsafe {
        let stack = ffi::X509_get_ext_d2i(
            self.as_ptr(),
            ffi::NID_issuer_alt_name,
            ptr::null_mut(),
            ptr::null_mut(),
        );
        Stack::from_ptr_opt(stack as *mut _)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: authority_info, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in authority_info:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 469, End Line: 479
/// Returns this certificate's [`authority information access`] entries, if they exist.
///
/// [`authority information access`]: https://tools.ietf.org/html/rfc5280#section-4.2.2.1
#[corresponds(X509_get_ext_d2i)]
pub fn authority_info(&self) -> Option<Stack<AccessDescription>> {
    unsafe {
        let stack = ffi::X509_get_ext_d2i(
            self.as_ptr(),
            ffi::NID_info_access,
            ptr::null_mut(),
            ptr::null_mut(),
        );
        Stack::from_ptr_opt(stack as *mut _)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: subject_key_id, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in subject_key_id:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 492, End Line: 497
/// Returns this certificate's subject key id, if it exists.
#[corresponds(X509_get0_subject_key_id)]
#[cfg(any(ossl110, boringssl))]
pub fn subject_key_id(&self) -> Option<&Asn1OctetStringRef> {
    unsafe {
        let data = ffi::X509_get0_subject_key_id(self.as_ptr());
        Asn1OctetStringRef::from_const_ptr_opt(data)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: authority_key_id, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in authority_key_id:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 502, End Line: 507
/// Returns this certificate's authority key id, if it exists.
#[corresponds(X509_get0_authority_key_id)]
#[cfg(any(ossl110, boringssl))]
pub fn authority_key_id(&self) -> Option<&Asn1OctetStringRef> {
    unsafe {
        let data = ffi::X509_get0_authority_key_id(self.as_ptr());
        Asn1OctetStringRef::from_const_ptr_opt(data)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: authority_issuer, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in authority_issuer:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 512, End Line: 517
/// Returns this certificate's authority issuer name entries, if they exist.
#[corresponds(X509_get0_authority_issuer)]
#[cfg(ossl111d)]
pub fn authority_issuer(&self) -> Option<&StackRef<GeneralName>> {
    unsafe {
        let stack = ffi::X509_get0_authority_issuer(self.as_ptr());
        StackRef::from_const_ptr_opt(stack)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: authority_serial, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in authority_serial:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 522, End Line: 527
/// Returns this certificate's authority serial number, if it exists.
#[corresponds(X509_get0_authority_serial)]
#[cfg(ossl111d)]
pub fn authority_serial(&self) -> Option<&Asn1IntegerRef> {
    unsafe {
        let r = ffi::X509_get0_authority_serial(self.as_ptr());
        Asn1IntegerRef::from_const_ptr_opt(r)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: not_after, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in not_after:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 565, End Line: 570
/// Returns the certificate's Not After validity period.
#[corresponds(X509_getm_notAfter)]
pub fn not_after(&self) -> &Asn1TimeRef {
    unsafe {
        let date = X509_getm_notAfter(self.as_ptr());
        Asn1TimeRef::from_const_ptr_opt(date).expect("not_after must not be null")
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: not_before, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in not_before:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 574, End Line: 579
/// Returns the certificate's Not Before validity period.
#[corresponds(X509_getm_notBefore)]
pub fn not_before(&self) -> &Asn1TimeRef {
    unsafe {
        let date = X509_getm_notBefore(self.as_ptr());
        Asn1TimeRef::from_const_ptr_opt(date).expect("not_before must not be null")
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: signature_algorithm, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in signature_algorithm:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 593, End Line: 600
/// Returns the certificate's signature algorithm.
#[corresponds(X509_get0_signature)]
pub fn signature_algorithm(&self) -> &X509AlgorithmRef {
    unsafe {
        let mut algor = ptr::null();
        X509_get0_signature(ptr::null_mut(), &mut algor, self.as_ptr());
        X509AlgorithmRef::from_const_ptr_opt(algor)
            .expect("signature algorithm must not be null")
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: ocsp_responders, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in ocsp_responders:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 605, End Line: 607
/// Returns the list of OCSP responder URLs specified in the certificate's Authority Information
/// Access field.
#[corresponds(X509_get1_ocsp)]
pub fn ocsp_responders(&self) -> Result<Stack<OpensslString>, ErrorStack> {
    unsafe { cvt_p(ffi::X509_get1_ocsp(self.as_ptr())).map(|p| Stack::from_ptr(p)) }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: issued, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in issued:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 611, End Line: 616
/// Checks that this certificate issued `subject`.
#[corresponds(X509_check_issued)]
pub fn issued(&self, subject: &X509Ref) -> X509VerifyResult {
    unsafe {
        let r = ffi::X509_check_issued(self.as_ptr(), subject.as_ptr());
        X509VerifyResult::from_raw(r)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: serial_number, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in serial_number:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 645, End Line: 650
/// Returns this certificate's serial number.
#[corresponds(X509_get_serialNumber)]
pub fn serial_number(&self) -> &Asn1IntegerRef {
    unsafe {
        let r = ffi::X509_get_serialNumber(self.as_ptr());
        Asn1IntegerRef::from_const_ptr_opt(r).expect("serial number must not be null")
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: true, name: alias, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in alias:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 658, End Line: 668
/// Returns this certificate's "alias". This field is populated by
/// OpenSSL in some situations -- specifically OpenSSL will store a
/// PKCS#12 `friendlyName` in this field. This is not a part of the X.509
/// certificate itself, OpenSSL merely attaches it to this structure in
/// memory.
#[corresponds(X509_alias_get0)]
pub fn alias(&self) -> Option<&[u8]> {
    unsafe {
        let mut len = 0;
        let ptr = ffi::X509_alias_get0(self.as_ptr(), &mut len);
        if ptr.is_null() { None } else { Some(slice::from_raw_parts(ptr, len as usize)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: false, name: stack_from_pem, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in stack_from_pem:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 766, End Line: 794
/// Deserializes a list of PEM-formatted certificates.
#[corresponds(PEM_read_bio_X509)]
pub fn stack_from_pem(pem: &[u8]) -> Result<Vec<X509>, ErrorStack> {
    unsafe {
        ffi::init();
        let bio = MemBioSlice::new(pem)?;
        let mut certs = vec![];
        loop {
            let r = ffi::PEM_read_bio_X509(
                bio.as_ptr(),
                ptr::null_mut(),
                None,
                ptr::null_mut(),
            );
            if r.is_null() {
                let e = ErrorStack::get();
                if let Some(err) = e.errors().last() {
                    if err.library_code() == ffi::ERR_LIB_PEM as libc::c_int
                        && err.reason_code() == ffi::PEM_R_NO_START_LINE as libc::c_int
                    {
                        break;
                    }
                }
                return Err(e);
            } else {
                certs.push(X509(r));
            }
        }
        Ok(certs)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, complex: false, name: new_nid, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in new_nid:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 967, End Line: 999
/// Constructs an X509 extension value. See `man x509v3_config` for information on supported
/// extensions and their value formats.
///
/// Some extension types, such as `nid::SUBJECT_ALTERNATIVE_NAME`, require an `X509v3Context` to
/// be provided.
///
/// DO NOT CALL THIS WITH UNTRUSTED `value`: `value` is an OpenSSL
/// mini-language that can read arbitrary files.
///
/// See the extension module for builder types which will construct certain common extensions.
///
/// This function is deprecated, `X509Extension::new_from_der` or the
/// types in `x509::extension` should be used in its place.
#[deprecated(
    note = "Use x509::extension types or new_from_der instead",
    since = "0.10.51"
)]
pub fn new_nid(
    conf: Option<&ConfRef>,
    context: Option<&X509v3Context<'_>>,
    name: Nid,
    value: &str,
) -> Result<X509Extension, ErrorStack> {
    let value = CString::new(value).unwrap();
    let mut ctx;
    unsafe {
        ffi::init();
        let conf = conf.map_or(ptr::null_mut(), ConfRef::as_ptr);
        let context_ptr = match context {
            Some(c) => c.as_ptr(),
            None => {
                ctx = mem::zeroed();
                ffi::X509V3_set_ctx(
                    &mut ctx,
                    ptr::null_mut(),
                    ptr::null_mut(),
                    ptr::null_mut(),
                    ptr::null_mut(),
                    0,
                );
                &mut ctx
            }
        };
        let name = name.as_raw();
        let value = value.as_ptr() as *mut _;
        cvt_p(ffi::X509V3_EXT_nconf_nid(conf, context_ptr, name, value))
            .map(X509Extension)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: new_from_der, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in new_from_der:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 1010, End Line: 1024
/// Constructs a new X509 extension value from its OID, whether it's
/// critical, and its DER contents.
///
/// The extent structure of the DER value will vary based on the
/// extension type, and can generally be found in the RFC defining the
/// extension.
///
/// For common extension types, there are Rust APIs provided in
/// `openssl::x509::extensions` which are more ergonomic.
pub fn new_from_der(
    oid: &Asn1ObjectRef,
    critical: bool,
    der_contents: &Asn1OctetStringRef,
) -> Result<X509Extension, ErrorStack> {
    unsafe {
        cvt_p(
                ffi::X509_EXTENSION_create_by_OBJ(
                    ptr::null_mut(),
                    oid.as_ptr(),
                    critical as _,
                    der_contents.as_ptr(),
                ),
            )
            .map(X509Extension)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: append_entry, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in append_entry:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 1076, End Line: 1086
/// Add a name entry
#[corresponds(X509_NAME_add_entry)]
#[cfg(any(ossl101, libressl350))]
pub fn append_entry(
    &mut self,
    ne: &X509NameEntryRef,
) -> std::result::Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::X509_NAME_add_entry(self.0.as_ptr(), ne.as_ptr(), -1, 0)).map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: append_entry_by_text, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in append_entry_by_text:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 1093, End Line: 1108
/// Add a field entry by str.
///
/// This corresponds to [`X509_NAME_add_entry_by_txt`].
///
/// [`X509_NAME_add_entry_by_txt`]: https://www.openssl.org/docs/manmaster/crypto/X509_NAME_add_entry_by_txt.html
pub fn append_entry_by_text(
    &mut self,
    field: &str,
    value: &str,
) -> Result<(), ErrorStack> {
    unsafe {
        let field = CString::new(field).unwrap();
        assert!(value.len() <= crate ::SLenType::MAX as usize);
        cvt(
                ffi::X509_NAME_add_entry_by_txt(
                    self.0.as_ptr(),
                    field.as_ptr() as *mut _,
                    ffi::MBSTRING_UTF8,
                    value.as_ptr(),
                    value.len() as crate::SLenType,
                    -1,
                    0,
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: append_entry_by_text_with_type, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in append_entry_by_text_with_type:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 1115, End Line: 1135
/// Add a field entry by str with a specific type.
///
/// This corresponds to [`X509_NAME_add_entry_by_txt`].
///
/// [`X509_NAME_add_entry_by_txt`]: https://www.openssl.org/docs/manmaster/crypto/X509_NAME_add_entry_by_txt.html
pub fn append_entry_by_text_with_type(
    &mut self,
    field: &str,
    value: &str,
    ty: Asn1Type,
) -> Result<(), ErrorStack> {
    unsafe {
        let field = CString::new(field).unwrap();
        assert!(value.len() <= crate ::SLenType::MAX as usize);
        cvt(
                ffi::X509_NAME_add_entry_by_txt(
                    self.0.as_ptr(),
                    field.as_ptr() as *mut _,
                    ty.as_raw(),
                    value.as_ptr(),
                    value.len() as crate::SLenType,
                    -1,
                    0,
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: append_entry_by_nid, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in append_entry_by_nid:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 1142, End Line: 1156
/// Add a field entry by NID.
///
/// This corresponds to [`X509_NAME_add_entry_by_NID`].
///
/// [`X509_NAME_add_entry_by_NID`]: https://www.openssl.org/docs/manmaster/crypto/X509_NAME_add_entry_by_NID.html
pub fn append_entry_by_nid(
    &mut self,
    field: Nid,
    value: &str,
) -> Result<(), ErrorStack> {
    unsafe {
        assert!(value.len() <= crate ::SLenType::MAX as usize);
        cvt(
                ffi::X509_NAME_add_entry_by_NID(
                    self.0.as_ptr(),
                    field.as_raw(),
                    ffi::MBSTRING_UTF8,
                    value.as_ptr() as *mut _,
                    value.len() as crate::SLenType,
                    -1,
                    0,
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: append_entry_by_nid_with_type, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in append_entry_by_nid_with_type:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 1163, End Line: 1182
/// Add a field entry by NID with a specific type.
///
/// This corresponds to [`X509_NAME_add_entry_by_NID`].
///
/// [`X509_NAME_add_entry_by_NID`]: https://www.openssl.org/docs/manmaster/crypto/X509_NAME_add_entry_by_NID.html
pub fn append_entry_by_nid_with_type(
    &mut self,
    field: Nid,
    value: &str,
    ty: Asn1Type,
) -> Result<(), ErrorStack> {
    unsafe {
        assert!(value.len() <= crate ::SLenType::MAX as usize);
        cvt(
                ffi::X509_NAME_add_entry_by_NID(
                    self.0.as_ptr(),
                    field.as_raw(),
                    ty.as_raw(),
                    value.as_ptr() as *mut _,
                    value.len() as crate::SLenType,
                    -1,
                    0,
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: load_client_ca_file, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in load_client_ca_file:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 1212, End Line: 1215
/// Loads subject names from a file containing PEM-formatted certificates.
///
/// This is commonly used in conjunction with `SslContextBuilder::set_client_ca_list`.
pub fn load_client_ca_file<P: AsRef<Path>>(
    file: P,
) -> Result<Stack<X509Name>, ErrorStack> {
    let file = CString::new(file.as_ref().as_os_str().to_str().unwrap()).unwrap();
    unsafe {
        cvt_p(ffi::SSL_load_client_CA_file(file.as_ptr())).map(|p| Stack::from_ptr(p))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: try_cmp, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in try_cmp:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 1259, End Line: 1265
/// Compare two names, like [`Ord`] but it may fail.
///
/// With OpenSSL versions from 3.0.0 this may return an error if the underlying `X509_NAME_cmp`
/// call fails.
/// For OpenSSL versions before 3.0.0 it will never return an error, but due to a bug it may
/// spuriously return `Ordering::Less` if the `X509_NAME_cmp` call fails.
#[corresponds(X509_NAME_cmp)]
pub fn try_cmp(&self, other: &X509NameRef) -> Result<Ordering, ErrorStack> {
    let cmp = unsafe { ffi::X509_NAME_cmp(self.as_ptr(), other.as_ptr()) };
    if cfg!(ossl300) && cmp == -2 {
        return Err(ErrorStack::get());
    }
    Ok(cmp.cmp(&0))
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: add_extensions, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in add_extensions:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 1455, End Line: 1466
/// Permits any number of extension fields to be added to the certificate.
pub fn add_extensions(
    &mut self,
    extensions: &StackRef<X509Extension>,
) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::X509_REQ_add_extensions(self.0.as_ptr(), extensions.as_ptr()))
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: extensions, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in extensions:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 1615, End Line: 1620
/// Returns the extensions of the certificate request.
///
/// This corresponds to [`X509_REQ_get_extensions"]
pub fn extensions(&self) -> Result<Stack<X509Extension>, ErrorStack> {
    unsafe {
        let extensions = cvt_p(ffi::X509_REQ_get_extensions(self.as_ptr()))?;
        Ok(Stack::from_ptr(extensions))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: revocation_date, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in revocation_date:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 1692, End Line: 1698
/// Get the date that the certificate was revoked
#[corresponds(X509_REVOKED_get0_revocationDate)]
pub fn revocation_date(&self) -> &Asn1TimeRef {
    unsafe {
        let r = X509_REVOKED_get0_revocationDate(self.as_ptr() as *const _);
        assert!(! r.is_null());
        Asn1TimeRef::from_ptr(r as *mut _)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: get_revoked, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in get_revoked:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 1868, End Line: 1877
/// Get the stack of revocation entries
pub fn get_revoked(&self) -> Option<&StackRef<X509Revoked>> {
    unsafe {
        let revoked = X509_CRL_get_REVOKED(self.as_ptr());
        if revoked.is_null() { None } else { Some(StackRef::from_ptr(revoked)) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: last_update, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in last_update:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 1881, End Line: 1887
/// Returns the CRL's `lastUpdate` time.
#[corresponds(X509_CRL_get0_lastUpdate)]
pub fn last_update(&self) -> &Asn1TimeRef {
    unsafe {
        let date = X509_CRL_get0_lastUpdate(self.as_ptr());
        assert!(! date.is_null());
        Asn1TimeRef::from_ptr(date as *mut _)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: next_update, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in next_update:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 1893, End Line: 1898
/// Returns the CRL's `nextUpdate` time.
///
/// If the `nextUpdate` field is missing, returns `None`.
#[corresponds(X509_CRL_get0_nextUpdate)]
pub fn next_update(&self) -> Option<&Asn1TimeRef> {
    unsafe {
        let date = X509_CRL_get0_nextUpdate(self.as_ptr());
        Asn1TimeRef::from_const_ptr_opt(date)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: get_by_serial, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in get_by_serial:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 1902, End Line: 1909
/// Get the revocation status of a certificate by its serial number
#[corresponds(X509_CRL_get0_by_serial)]
pub fn get_by_serial<'a>(&'a self, serial: &Asn1IntegerRef) -> CrlStatus<'a> {
    unsafe {
        let mut ret = ptr::null_mut::<ffi::X509_REVOKED>();
        let status = ffi::X509_CRL_get0_by_serial(
            self.as_ptr(),
            &mut ret as *mut _,
            serial.as_ptr(),
        );
        CrlStatus::from_ffi_status(status, ret)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: get_by_cert, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in get_by_cert:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 1913, End Line: 1920
/// Get the revocation status of a certificate
#[corresponds(X509_CRL_get0_by_cert)]
pub fn get_by_cert<'a>(&'a self, cert: &X509) -> CrlStatus<'a> {
    unsafe {
        let mut ret = ptr::null_mut::<ffi::X509_REVOKED>();
        let status = ffi::X509_CRL_get0_by_cert(
            self.as_ptr(),
            &mut ret as *mut _,
            cert.as_ptr(),
        );
        CrlStatus::from_ffi_status(status, ret)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: error_string, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in error_string:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2021, End Line: 2028
/// Return a human readable error string from the verification error.
///
/// This corresponds to [`X509_verify_cert_error_string`].
///
/// [`X509_verify_cert_error_string`]: https://www.openssl.org/docs/manmaster/crypto/X509_verify_cert_error_string.html
#[allow(clippy::trivially_copy_pass_by_ref)]
pub fn error_string(&self) -> &'static str {
    ffi::init();
    unsafe {
        let s = ffi::X509_verify_cert_error_string(self.0 as c_long);
        str::from_utf8(CStr::from_ptr(s).to_bytes()).unwrap()
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: new_dns, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in new_dns:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2075, End Line: 2077
pub(crate) fn new_dns(dns: &[u8]) -> Result<GeneralName, ErrorStack> {
    unsafe { GeneralName::new(ffi::GEN_DNS, Asn1Type::IA5STRING, dns) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: new_uri, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in new_uri:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2079, End Line: 2081
pub(crate) fn new_uri(uri: &[u8]) -> Result<GeneralName, ErrorStack> {
    unsafe { GeneralName::new(ffi::GEN_URI, Asn1Type::IA5STRING, uri) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: new_ip, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: new_ip, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in new_ip:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2083, End Line: 2092
pub(crate) fn new_ip(ip: IpAddr) -> Result<GeneralName, ErrorStack> {
    match ip {
        IpAddr::V4(addr) => {
            unsafe {
                GeneralName::new(ffi::GEN_IPADD, Asn1Type::OCTET_STRING, &addr.octets())
            }
        }
        IpAddr::V6(addr) => {
            unsafe {
                GeneralName::new(ffi::GEN_IPADD, Asn1Type::OCTET_STRING, &addr.octets())
            }
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 7 statements, complex: false, name: new_rid, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in new_rid:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2094, End Line: 2113
pub(crate) fn new_rid(oid: Asn1Object) -> Result<GeneralName, ErrorStack> {
    unsafe {
        ffi::init();
        let gn = cvt_p(ffi::GENERAL_NAME_new())?;
        (*gn).type_ = ffi::GEN_RID;
        #[cfg(boringssl)]
        {
            (*gn).d.registeredID = oid.as_ptr();
        }
        #[cfg(not(boringssl))]
        {
            (*gn).d = oid.as_ptr().cast();
        }
        mem::forget(oid);
        Ok(GeneralName::from_ptr(gn))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 7 statements, complex: true, name: new_other_name, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in new_other_name:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2115, End Line: 2141
pub(crate) fn new_other_name(
    oid: Asn1Object,
    value: &[u8],
) -> Result<GeneralName, ErrorStack> {
    unsafe {
        ffi::init();
        let typ = cvt_p(
            ffi::d2i_ASN1_TYPE(
                ptr::null_mut(),
                &mut value.as_ptr().cast(),
                value.len().try_into().unwrap(),
            ),
        )?;
        let gn = cvt_p(ffi::GENERAL_NAME_new())?;
        (*gn).type_ = ffi::GEN_OTHERNAME;
        if let Err(e) = cvt(
            ffi::GENERAL_NAME_set0_othername(gn, oid.as_ptr().cast(), typ),
        ) {
            ffi::GENERAL_NAME_free(gn);
            return Err(e);
        }
        mem::forget(oid);
        Ok(GeneralName::from_ptr(gn))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 7 statements, complex: true, name: ia5_string, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in ia5_string:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2145, End Line: 2166
fn ia5_string(&self, ffi_type: c_int) -> Option<&str> {
    unsafe {
        if (*self.as_ptr()).type_ != ffi_type {
            return None;
        }
        #[cfg(boringssl)]
        let d = (*self.as_ptr()).d.ptr;
        #[cfg(not(boringssl))]
        let d = (*self.as_ptr()).d;
        let ptr = ASN1_STRING_get0_data(d as *mut _);
        let len = ffi::ASN1_STRING_length(d as *mut _);
        #[allow(clippy::unnecessary_cast)]
        let slice = slice::from_raw_parts(ptr as *const u8, len as usize);
        str::from_utf8(slice).ok()
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: true, name: directory_name, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in directory_name:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2174, End Line: 2187
/// Returns the contents of this `GeneralName` if it is a `directoryName`.
pub fn directory_name(&self) -> Option<&X509NameRef> {
    unsafe {
        if (*self.as_ptr()).type_ != ffi::GEN_DIRNAME {
            return None;
        }
        #[cfg(boringssl)]
        let d = (*self.as_ptr()).d.ptr;
        #[cfg(not(boringssl))]
        let d = (*self.as_ptr()).d;
        Some(X509NameRef::from_const_ptr(d as *const _))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, complex: true, name: ipaddress, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in ipaddress:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2200, End Line: 2216
/// Returns the contents of this `GeneralName` if it is an `iPAddress`.
pub fn ipaddress(&self) -> Option<&[u8]> {
    unsafe {
        if (*self.as_ptr()).type_ != ffi::GEN_IPADD {
            return None;
        }
        #[cfg(boringssl)]
        let d: *const ffi::ASN1_STRING = std::mem::transmute((*self.as_ptr()).d);
        #[cfg(not(boringssl))]
        let d = (*self.as_ptr()).d;
        let ptr = ASN1_STRING_get0_data(d as *mut _);
        let len = ffi::ASN1_STRING_length(d as *mut _);
        #[allow(clippy::unnecessary_cast)]
        Some(slice::from_raw_parts(ptr as *const u8, len as usize))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: distpoint, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in distpoint:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2257, End Line: 2259
/// Returns the name of this distribution point if it exists
pub fn distpoint(&self) -> Option<&DistPointNameRef> {
    unsafe { DistPointNameRef::from_const_ptr_opt((*self.as_ptr()).distpoint) }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: fullname, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in fullname:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2274, End Line: 2281
/// Returns the contents of this DistPointName if it is a fullname.
pub fn fullname(&self) -> Option<&StackRef<GeneralName>> {
    unsafe {
        if (*self.as_ptr()).type_ != 0 {
            return None;
        }
        StackRef::from_const_ptr_opt((*self.as_ptr()).name.fullname)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: method, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in method:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2300, End Line: 2302
/// Returns the access method OID.
pub fn method(&self) -> &Asn1ObjectRef {
    unsafe { Asn1ObjectRef::from_ptr((*self.as_ptr()).method) }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: x509, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in x509:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2346, End Line: 2351
pub fn x509(&self) -> Option<&X509Ref> {
    unsafe {
        let ptr = X509_OBJECT_get0_X509(self.as_ptr());
        X509Ref::from_const_ptr_opt(ptr)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: get_by_sname, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in get_by_sname:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2550, End Line: 2562
/// Get the internal table index of an X509_PURPOSE for a given short name. Valid short
/// names include
///  - "sslclient",
///  - "sslserver",
///  - "nssslserver",
///  - "smimesign",
///  - "smimeencrypt",
///  - "crlsign",
///  - "any",
///  - "ocsphelper",
///  - "timestampsign"
/// The index can be used with `X509PurposeRef::from_idx()` to get the purpose.
#[allow(clippy::unnecessary_cast)]
pub fn get_by_sname(sname: &str) -> Result<c_int, ErrorStack> {
    unsafe {
        let sname = CString::new(sname).unwrap();
        cfg_if! {
            if #[cfg(any(ossl110, libressl280, boringssl))] { let purpose =
            cvt_n(ffi::X509_PURPOSE_get_by_sname(sname.as_ptr() as * const _)) ?; } else
            { let purpose = cvt_n(ffi::X509_PURPOSE_get_by_sname(sname.as_ptr() as * mut
            _)) ?; }
        }
        Ok(purpose)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: from_idx, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in from_idx:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2566, End Line: 2571
/// Get an `X509PurposeRef` for a given index value. The index can be obtained from e.g.
/// `X509PurposeRef::get_by_sname()`.
#[corresponds(X509_PURPOSE_get0)]
pub fn from_idx(idx: c_int) -> Result<&'static X509PurposeRef, ErrorStack> {
    unsafe {
        let ptr = cvt_p_const(ffi::X509_PURPOSE_get0(idx))?;
        Ok(X509PurposeRef::from_const_ptr(ptr))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: purpose, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs 

Found method with unsafe block in purpose:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\mod.rs
Start Line: 2583, End Line: 2594
/// Get the purpose value from an X509Purpose structure. This value is one of
/// - `X509_PURPOSE_SSL_CLIENT`
/// - `X509_PURPOSE_SSL_SERVER`
/// - `X509_PURPOSE_NS_SSL_SERVER`
/// - `X509_PURPOSE_SMIME_SIGN`
/// - `X509_PURPOSE_SMIME_ENCRYPT`
/// - `X509_PURPOSE_CRL_SIGN`
/// - `X509_PURPOSE_ANY`
/// - `X509_PURPOSE_OCSP_HELPER`
/// - `X509_PURPOSE_TIMESTAMP_SIGN`
pub fn purpose(&self) -> X509PurposeId {
    unsafe {
        cfg_if! {
            if #[cfg(any(ossl110, libressl280, boringssl))] { let x509_purpose = self
            .as_ptr() as * const ffi::X509_PURPOSE; } else { let x509_purpose = self
            .as_ptr() as * mut ffi::X509_PURPOSE; }
        }
        X509PurposeId::from_raw(ffi::X509_PURPOSE_get_id(x509_purpose))
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: add_cert, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs 

Found method with unsafe block in add_cert:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Start Line: 100, End Line: 102
/// Adds a certificate to the certificate store.
#[corresponds(X509_STORE_add_cert)]
pub fn add_cert(&mut self, cert: X509) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::X509_STORE_add_cert(self.as_ptr(), cert.as_ptr())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_default_paths, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs 

Found method with unsafe block in set_default_paths:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Start Line: 110, End Line: 112
/// Load certificates from their default locations.
///
/// These locations are read from the `SSL_CERT_FILE` and `SSL_CERT_DIR`
/// environment variables if present, or defaults specified at OpenSSL
/// build time otherwise.
#[corresponds(X509_STORE_set_default_paths)]
pub fn set_default_paths(&mut self) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::X509_STORE_set_default_paths(self.as_ptr())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: add_lookup, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: add_lookup, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs 

Found method with unsafe block in add_lookup:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Start Line: 116, End Line: 122
/// Adds a lookup method to the store.
#[corresponds(X509_STORE_add_lookup)]
pub fn add_lookup<T>(
    &mut self,
    method: &'static X509LookupMethodRef<T>,
) -> Result<&mut X509LookupRef<T>, ErrorStack> {
    let lookup = unsafe { ffi::X509_STORE_add_lookup(self.as_ptr(), method.as_ptr()) };
    cvt_p(lookup).map(|ptr| unsafe { X509LookupRef::from_ptr_mut(ptr) })
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_purpose, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs 

Found method with unsafe block in set_purpose:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Start Line: 134, End Line: 136
/// Sets the certificate purpose.
/// The purpose value can be obtained by `X509PurposeRef::get_by_sname()`
#[corresponds(X509_STORE_set_purpose)]
pub fn set_purpose(&mut self, purpose: X509PurposeId) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::X509_STORE_set_purpose(self.as_ptr(), purpose.as_raw())).map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_param, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs 

Found method with unsafe block in set_param:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Start Line: 141, End Line: 143
/// Sets certificate chain validation related parameters.
#[corresponds[X509_STORE_set1_param]]
#[cfg(any(ossl102, boringssl, libressl261))]
pub fn set_param(&mut self, param: &X509VerifyParamRef) -> Result<(), ErrorStack> {
    unsafe { cvt(ffi::X509_STORE_set1_param(self.as_ptr(), param.as_ptr())).map(|_| ()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: hash_dir, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs 

Found method with unsafe block in hash_dir:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Start Line: 168, End Line: 170
/// Lookup method that loads certificates and CRLs on demand and caches
/// them in memory once they are loaded. It also checks for newer CRLs upon
/// each lookup, so that newer CRLs are used as soon as they appear in the
/// directory.
#[corresponds(X509_LOOKUP_hash_dir)]
pub fn hash_dir() -> &'static X509LookupMethodRef<HashDir> {
    unsafe { X509LookupMethodRef::from_const_ptr(ffi::X509_LOOKUP_hash_dir()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: add_dir, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs 

Found method with unsafe block in add_dir:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Start Line: 178, End Line: 188
/// Specifies a directory from which certificates and CRLs will be loaded
/// on-demand. Must be used with `X509Lookup::hash_dir`.
#[corresponds(X509_LOOKUP_add_dir)]
pub fn add_dir(&mut self, name: &str, file_type: SslFiletype) -> Result<(), ErrorStack> {
    let name = CString::new(name).unwrap();
    unsafe {
        cvt(ffi::X509_LOOKUP_add_dir(self.as_ptr(), name.as_ptr(), file_type.as_raw()))
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: load_cert_file, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs 

Found method with unsafe block in load_cert_file:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Start Line: 210, End Line: 224
/// Specifies a file from which certificates will be loaded
#[corresponds(X509_load_cert_file)]
pub fn load_cert_file<P: AsRef<Path>>(
    &mut self,
    file: P,
    file_type: SslFiletype,
) -> Result<(), ErrorStack> {
    let file = CString::new(file.as_ref().as_os_str().to_str().unwrap()).unwrap();
    unsafe {
        cvt(ffi::X509_load_cert_file(self.as_ptr(), file.as_ptr(), file_type.as_raw()))
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: load_crl_file, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs 

Found method with unsafe block in load_crl_file:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Start Line: 228, End Line: 241
/// Specifies a file from which certificate revocation lists will be loaded
#[corresponds(X509_load_crl_file)]
pub fn load_crl_file<P: AsRef<Path>>(
    &mut self,
    file: P,
    file_type: SslFiletype,
) -> Result<i32, ErrorStack> {
    let file = CString::new(file.as_ref().as_os_str().to_str().unwrap()).unwrap();
    unsafe {
        cvt(ffi::X509_load_crl_file(self.as_ptr(), file.as_ptr(), file_type.as_raw()))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: all_certificates, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs 

Found method with unsafe block in all_certificates:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\store.rs
Start Line: 281, End Line: 283
/// Returns a stack of all the certificates in this store.
#[corresponds(X509_STORE_get1_all_certs)]
#[cfg(ossl300)]
pub fn all_certificates(&self) -> Stack<X509> {
    unsafe { Stack::from_ptr(ffi::X509_STORE_get1_all_certs(self.as_ptr())) }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\tests.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_hostflags, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs 

Found method with unsafe block in set_hostflags:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Start Line: 92, End Line: 96
/// Set the host flags.
#[corresponds(X509_VERIFY_PARAM_set_hostflags)]
pub fn set_hostflags(&mut self, hostflags: X509CheckFlags) {
    unsafe {
        ffi::X509_VERIFY_PARAM_set_hostflags(self.as_ptr(), hostflags.bits());
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: clear_flags, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs 

Found method with unsafe block in clear_flags:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Start Line: 112, End Line: 120
/// Clear verification flags.
#[corresponds(X509_VERIFY_PARAM_clear_flags)]
pub fn clear_flags(&mut self, flags: X509VerifyFlags) -> Result<(), ErrorStack> {
    unsafe {
        cvt(ffi::X509_VERIFY_PARAM_clear_flags(self.as_ptr(), flags.bits())).map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: flags, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs 

Found method with unsafe block in flags:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Start Line: 124, End Line: 127
/// Gets verification flags.
#[corresponds(X509_VERIFY_PARAM_get_flags)]
pub fn flags(&mut self) -> X509VerifyFlags {
    let bits = unsafe { ffi::X509_VERIFY_PARAM_get_flags(self.as_ptr()) };
    X509VerifyFlags::from_bits_retain(bits)
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_host, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs 

Found method with unsafe block in set_host:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Start Line: 131, End Line: 142
/// Set the expected DNS hostname.
#[corresponds(X509_VERIFY_PARAM_set1_host)]
pub fn set_host(&mut self, host: &str) -> Result<(), ErrorStack> {
    unsafe {
        let raw_host = if host.is_empty() { "\0" } else { host };
        cvt(
                ffi::X509_VERIFY_PARAM_set1_host(
                    self.as_ptr(),
                    raw_host.as_ptr() as *const _,
                    host.len(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: set_email, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs 

Found method with unsafe block in set_email:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Start Line: 146, End Line: 157
/// Set the expected email address.
#[corresponds(X509_VERIFY_PARAM_set1_email)]
pub fn set_email(&mut self, email: &str) -> Result<(), ErrorStack> {
    unsafe {
        let raw_email = if email.is_empty() { "\0" } else { email };
        cvt(
                ffi::X509_VERIFY_PARAM_set1_email(
                    self.as_ptr(),
                    raw_email.as_ptr() as *const _,
                    email.len(),
                ),
            )
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: set_ip, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs 

Found method with unsafe block in set_ip:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Start Line: 161, End Line: 181
/// Set the expected IPv4 or IPv6 address.
#[corresponds(X509_VERIFY_PARAM_set1_ip)]
pub fn set_ip(&mut self, ip: IpAddr) -> Result<(), ErrorStack> {
    unsafe {
        let mut buf = [0; 16];
        let len = match ip {
            IpAddr::V4(addr) => {
                buf[..4].copy_from_slice(&addr.octets());
                4
            }
            IpAddr::V6(addr) => {
                buf.copy_from_slice(&addr.octets());
                16
            }
        };
        cvt(ffi::X509_VERIFY_PARAM_set1_ip(self.as_ptr(), buf.as_ptr() as *const _, len))
            .map(|_| ())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_time, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs 

Found method with unsafe block in set_time:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Start Line: 185, End Line: 187
/// Set the verification time, where time is of type time_t, traditionaly defined as seconds since the epoch
#[corresponds(X509_VERIFY_PARAM_set_time)]
pub fn set_time(&mut self, time: time_t) {
    unsafe { ffi::X509_VERIFY_PARAM_set_time(self.as_ptr(), time) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_depth, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs 

Found method with unsafe block in set_depth:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Start Line: 191, End Line: 193
/// Set the verification depth
#[corresponds(X509_VERIFY_PARAM_set_depth)]
pub fn set_depth(&mut self, depth: c_int) {
    unsafe { ffi::X509_VERIFY_PARAM_set_depth(self.as_ptr(), depth) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_auth_level, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs 

Found method with unsafe block in set_auth_level:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Start Line: 198, End Line: 200
/// Sets the authentication security level to auth_level
#[corresponds(X509_VERIFY_PARAM_set_auth_level)]
#[cfg(ossl110)]
pub fn set_auth_level(&mut self, lvl: c_int) {
    unsafe { ffi::X509_VERIFY_PARAM_set_auth_level(self.as_ptr(), lvl) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: auth_level, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs 

Found method with unsafe block in auth_level:
File: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl\src\x509\verify.rs
Start Line: 205, End Line: 207
/// Gets the current authentication security level
#[corresponds(X509_VERIFY_PARAM_get_auth_level)]
#[cfg(ossl110)]
pub fn auth_level(&self) -> i32 {
    unsafe { ffi::X509_VERIFY_PARAM_get_auth_level(self.as_ptr()) }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-errors\build.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-errors\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-errors\tests\test.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-macros\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\build\cfgs.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\build\find_normal.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\build\find_vendored.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\build\main.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\build\run_bindgen.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\aes.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\asn1.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\bio.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\bn.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\cms.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\crypto.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\dtls1.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\ec.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\err.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\evp.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\aes.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\asn1.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\bio.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\bn.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\cmac.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\cms.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\conf.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\crypto.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\dh.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\dsa.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\ec.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\err.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\evp.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\hmac.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\kdf.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\mod.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\object.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\ocsp.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\params.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\pem.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\pkcs12.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\pkcs7.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\poly1305.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\provider.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\rand.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\rsa.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\safestack.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\sha.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\srtp.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\ssl.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\stack.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\tls1.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\x509.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\x509v3.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\handwritten\x509_vfy.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\lib.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\macros.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\obj_mac.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\ocsp.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\pem.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\pkcs7.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\rsa.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\sha.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\srtp.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\ssl.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\ssl3.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\tls1.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\types.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\x509.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\x509v3.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\openssl-sys\src\x509_vfy.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\systest\build.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-openssl-da7f26d59aaa74bb4c6eb9181807d6e56047df44\systest\src\main.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\benches\bench.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: false, name: from_vec, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs 

Found method with unsafe block in from_vec:
File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 448, End Line: 470
/// Construct a new `SmallVec` from a `Vec<A::Item>`.
///
/// Elements will be copied to the inline buffer if vec.capacity() <= A::size().
///
/// ```rust
/// use smallvec::SmallVec;
///
/// let vec = vec![1, 2, 3, 4, 5];
/// let small_vec: SmallVec<[_; 3]> = SmallVec::from_vec(vec);
///
/// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
/// ```
#[inline]
pub fn from_vec(mut vec: Vec<A::Item>) -> SmallVec<A> {
    if vec.capacity() <= A::size() {
        unsafe {
            let mut data = SmallVecData::<A>::from_inline(mem::uninitialized());
            let len = vec.len();
            vec.set_len(0);
            ptr::copy_nonoverlapping(vec.as_ptr(), data.inline_mut().ptr_mut(), len);
            SmallVec { capacity: len, data }
        }
    } else {
        let (ptr, cap, len) = (vec.as_mut_ptr(), vec.capacity(), vec.len());
        mem::forget(vec);
        SmallVec {
            capacity: cap,
            data: SmallVecData::from_heap(ptr, len),
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: from_buf_and_len, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs 

Found method with unsafe block in from_buf_and_len:
File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 504, End Line: 507
/// Constructs a new `SmallVec` on the stack from an `A` without
/// copying elements. Also sets the length, which must be less or
/// equal to the size of `buf`.
///
/// ```rust
/// use smallvec::SmallVec;
///
/// let buf = [1, 2, 3, 4, 5, 0, 0, 0];
/// let small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);
///
/// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
/// ```
#[inline]
pub fn from_buf_and_len(buf: A, len: usize) -> SmallVec<A> {
    assert!(len <= A::size());
    unsafe { SmallVec::from_buf_and_len_unchecked(buf, len) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: true, name: triple, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs 

Found method with unsafe block in triple:
File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 569, End Line: 578
/// Returns a tuple with (data ptr, len, capacity)
/// Useful to get all SmallVec properties with a single check of the current storage variant.
#[inline]
fn triple(&self) -> (*const A::Item, usize, usize) {
    unsafe {
        if self.spilled() {
            let (ptr, len) = self.data.heap();
            (ptr, len, self.capacity)
        } else {
            (self.data.inline().ptr(), self.capacity, A::size())
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: true, name: triple_mut, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs 

Found method with unsafe block in triple_mut:
File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 582, End Line: 591
/// Returns a tuple with (data ptr, len ptr, capacity)
#[inline]
fn triple_mut(&mut self) -> (*mut A::Item, &mut usize, usize) {
    unsafe {
        if self.spilled() {
            let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();
            (ptr, len_ptr, self.capacity)
        } else {
            (self.data.inline_mut().ptr_mut(), &mut self.capacity, A::size())
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: false, name: drain, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs 

Found method with unsafe block in drain:
File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 600, End Line: 613
/// Empty the vector and return an iterator over its former contents.
pub fn drain(&mut self) -> Drain<A::Item> {
    unsafe {
        let ptr = self.as_mut_ptr();
        let current_len = self.len();
        self.set_len(0);
        let slice = slice::from_raw_parts_mut(ptr, current_len);
        Drain { iter: slice.iter_mut() }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: true, name: grow, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs 

Found method with unsafe block in grow:
File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 646, End Line: 670
/// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
///
/// Panics if `new_cap` is less than the vector's length.
pub fn grow(&mut self, new_cap: usize) {
    unsafe {
        let (ptr, &mut len, cap) = self.triple_mut();
        let unspilled = !self.spilled();
        assert!(new_cap >= len);
        if new_cap <= self.inline_size() {
            if unspilled {
                return;
            }
            self.data = SmallVecData::from_inline(mem::uninitialized());
            ptr::copy_nonoverlapping(ptr, self.data.inline_mut().ptr_mut(), len);
        } else if new_cap != cap {
            let mut vec = Vec::with_capacity(new_cap);
            let new_alloc = vec.as_mut_ptr();
            mem::forget(vec);
            ptr::copy_nonoverlapping(ptr, new_alloc, len);
            self.data = SmallVecData::from_heap(new_alloc, len);
            self.capacity = new_cap;
            if unspilled {
                return;
            }
        }
        deallocate(ptr, cap);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: false, name: shrink_to_fit, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs 

Found method with unsafe block in shrink_to_fit:
File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 710, End Line: 726
/// Shrink the capacity of the vector as much as possible.
///
/// When possible, this will move data from an external heap buffer to the vector's inline
/// storage.
pub fn shrink_to_fit(&mut self) {
    if !self.spilled() {
        return;
    }
    let len = self.len();
    if self.inline_size() >= len {
        unsafe {
            let (ptr, len) = self.data.heap();
            self.data = SmallVecData::from_inline(mem::uninitialized());
            ptr::copy_nonoverlapping(ptr, self.data.inline_mut().ptr_mut(), len);
            deallocate(ptr, self.capacity);
            self.capacity = len;
        }
    } else if self.capacity() > len {
        self.grow(len);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: truncate, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs 

Found method with unsafe block in truncate:
File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 735, End Line: 744
/// Shorten the vector, keeping the first `len` elements and dropping the rest.
///
/// If `len` is greater than or equal to the vector's current length, this has no
/// effect.
///
/// This does not re-allocate.  If you want the vector's capacity to shrink, call
/// `shrink_to_fit` after truncating.
pub fn truncate(&mut self, len: usize) {
    unsafe {
        let (ptr, len_ptr, _) = self.triple_mut();
        while len < *len_ptr {
            let last_index = *len_ptr - 1;
            *len_ptr = last_index;
            ptr::drop_in_place(ptr.offset(last_index as isize));
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: swap_remove, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs 

Found method with unsafe block in swap_remove:
File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 766, End Line: 770
/// Remove the element at position `index`, replacing it with the last element.
///
/// This does not preserve ordering, but is O(1).
///
/// Panics if `index` is out of bounds.
#[inline]
pub fn swap_remove(&mut self, index: usize) -> A::Item {
    let len = self.len();
    self.swap(len - 1, index);
    self.pop().unwrap_or_else(|| unsafe { unreachable() })
}



-----------------------------------------------------------------
Checking unsafe block with 9 statements, complex: true, name: insert_many, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs 

Found method with unsafe block in insert_many:
File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 814, End Line: 856
/// Insert multiple elements at position `index`, shifting all following elements toward the
/// back.
pub fn insert_many<I: IntoIterator<Item = A::Item>>(
    &mut self,
    index: usize,
    iterable: I,
) {
    let iter = iterable.into_iter();
    if index == self.len() {
        return self.extend(iter);
    }
    let (lower_size_bound, _) = iter.size_hint();
    assert!(lower_size_bound <= std::isize::MAX as usize);
    assert!(index + lower_size_bound >= index);
    self.reserve(lower_size_bound);
    unsafe {
        let old_len = self.len();
        assert!(index <= old_len);
        let mut ptr = self.as_mut_ptr().offset(index as isize);
        ptr::copy(ptr, ptr.offset(lower_size_bound as isize), old_len - index);
        self.set_len(index);
        let mut num_added = 0;
        for element in iter {
            let mut cur = ptr.offset(num_added as isize);
            if num_added >= lower_size_bound {
                self.reserve(1);
                ptr = self.as_mut_ptr().offset(index as isize);
                cur = ptr.offset(num_added as isize);
                ptr::copy(cur, cur.offset(1), old_len - index);
            }
            ptr::write(cur, element);
            num_added += 1;
        }
        if num_added < lower_size_bound {
            ptr::copy(
                ptr.offset(lower_size_bound as isize),
                ptr.offset(num_added as isize),
                old_len - index,
            );
        }
        self.set_len(old_len + num_added);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: true, name: dedup_by, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs 

Found method with unsafe block in dedup_by:
File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 913, End Line: 941
/// Removes consecutive duplicate elements using the given equality relation.
pub fn dedup_by<F>(&mut self, mut same_bucket: F)
where
    F: FnMut(&mut A::Item, &mut A::Item) -> bool,
{
    let len = self.len();
    if len <= 1 {
        return;
    }
    let ptr = self.as_mut_ptr();
    let mut w: usize = 1;
    unsafe {
        for r in 1..len {
            let p_r = ptr.offset(r as isize);
            let p_wm1 = ptr.offset((w - 1) as isize);
            if !same_bucket(&mut *p_r, &mut *p_wm1) {
                if r != w {
                    let p_w = p_wm1.offset(1);
                    mem::swap(&mut *p_r, &mut *p_w);
                }
                w += 1;
            }
        }
    }
    self.truncate(w);
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: false, name: insert_from_slice, with_SAFETY_comment: false, file: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs 

Found method with unsafe block in insert_from_slice:
File: overunsafe库\存在overunsafe的rust库\rust-smallvec-19de50108d403efaa7cd979eac3bb97a4432fd4b\lib.rs
Start Line: 1062, End Line: 1075
/// Copy elements from a slice into the vector at position `index`, shifting any following
/// elements toward the back.
///
/// For slices of `Copy` types, this is more efficient than `insert`.
pub fn insert_from_slice(&mut self, index: usize, slice: &[A::Item]) {
    self.reserve(slice.len());
    let len = self.len();
    assert!(index <= len);
    unsafe {
        let slice_ptr = slice.as_ptr();
        let ptr = self.as_mut_ptr().offset(index as isize);
        ptr::copy(ptr, ptr.offset(slice.len() as isize), len - index);
        ptr::copy_nonoverlapping(slice_ptr, ptr, slice.len());
        self.set_len(len + slice.len());
    }
}



Processing file: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\build.rs
Processing file: overunsafe库\存在overunsafe的rust库\rust-stackvector-d0382d5ef903fc96bdcc08c02e36e6dd2eda11a5\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-files\examples\guarded-listing.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-files\src\chunked.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-files\src\directory.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-files\src\encoding.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-files\src\error.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-files\src\files.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-files\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-files\src\named.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-files\src\path_buf.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-files\src\range.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-files\src\service.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-files\tests\encoding.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-files\tests\guard.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-files\tests\traversal.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\benches\date-formatting.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\benches\response-body-compression.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\examples\actix-web.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\examples\bench.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\examples\echo.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\examples\echo2.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\examples\h2c-detect.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\examples\h2spec.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\examples\hello-world.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\examples\streaming-error.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\examples\tls_rustls.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\examples\ws.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\body\body_stream.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\body\boxed.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\body\either.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\body\message_body.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\body\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\body\none.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\body\size.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\body\sized_stream.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\body\utils.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\builder.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\config.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\date.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\encoding\decoder.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\encoding\encoder.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\encoding\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\error.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\extensions.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\h1\chunked.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\h1\client.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\h1\codec.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\h1\decoder.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\h1\dispatcher.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\h1\dispatcher_tests.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\h1\encoder.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\h1\expect.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\h1\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\h1\payload.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\h1\service.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\h1\timer.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\h1\upgrade.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\h1\utils.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\h2\dispatcher.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: prepare_response, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\h2\dispatcher.rs 

Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\h2\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\h2\service.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\header\as_name.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\header\common.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\header\into_pair.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\header\into_value.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\header\map.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\header\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\header\shared\charset.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\header\shared\content_encoding.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\header\shared\extended.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\header\shared\http_date.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\header\shared\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\header\shared\quality.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\header\shared\quality_item.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\header\utils.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\helpers.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\http_message.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\keep_alive.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\message.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\notify_on_drop.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\payload.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\requests\head.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\requests\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\requests\request.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\responses\builder.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\responses\head.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\responses\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\responses\response.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\service.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\test.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\ws\codec.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\ws\dispatcher.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\ws\frame.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\ws\mask.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: apply_mask_fast32, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\ws\mask.rs 

Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\ws\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\src\ws\proto.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\tests\test_client.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\tests\test_h2_timer.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\tests\test_openssl.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\tests\test_rustls.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\tests\test_server.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http\tests\test_ws.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-http-test\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart\examples\form.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart\src\error.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart\src\extractor.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart\src\field.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart\src\form\bytes.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart\src\form\json.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart\src\form\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart\src\form\tempfile.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart\src\form\text.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart\src\multipart.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart\src\payload.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart\src\safety.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart\src\test.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart-derive\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart-derive\tests\trybuild\all-required.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart-derive\tests\trybuild\deny-duplicates.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart-derive\tests\trybuild\deny-parse-fail.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart-derive\tests\trybuild\deny-unknown.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart-derive\tests\trybuild\optional-and-list.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart-derive\tests\trybuild\rename.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart-derive\tests\trybuild\size-limit-parse-fail.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart-derive\tests\trybuild\size-limits.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-multipart-derive\tests\trybuild.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-router\benches\quoter.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-router\benches\router.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-router\src\de.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-router\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-router\src\path.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-router\src\pattern.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-router\src\quoter.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-router\src\regex_set.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-router\src\resource.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-router\src\resource_path.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-router\src\router.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-router\src\url.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-test\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\benches\responder.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\benches\server.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\benches\service.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\examples\basic.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\examples\macroless.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\examples\on-connect.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\examples\uds.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\examples\worker-cpu-pin.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\app.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\app_service.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\config.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\data.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\dev.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\error\error.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\error\internal.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\error\macros.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\error\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\error\response_error.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\extract.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\guard\acceptable.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\guard\host.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\guard\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\handler.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\helpers.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\accept.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\accept_charset.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\accept_encoding.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\accept_language.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\allow.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\any_or_some.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\cache_control.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\content_disposition.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\content_language.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\content_length.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\content_range.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\content_type.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\date.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\encoding.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\entity.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\etag.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\expires.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\if_match.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\if_modified_since.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\if_none_match.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\if_range.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\if_unmodified_since.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\last_modified.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\macros.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\preference.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\header\range.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\http\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\info.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\middleware\compat.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\middleware\compress.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\middleware\condition.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\middleware\default_headers.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\middleware\err_handlers.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\middleware\identity.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\middleware\logger.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\middleware\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\middleware\normalize.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\redirect.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\request.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\request_data.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\resource.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\response\builder.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\response\customize_responder.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\response\http_codes.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\response\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\response\responder.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\response\response.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\rmap.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\route.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\rt.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\scope.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\server.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\service.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\test\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\test\test_request.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\test\test_services.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\test\test_utils.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\types\either.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\types\form.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\types\header.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\types\html.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\types\json.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\types\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\types\path.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\types\payload.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\types\query.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\types\readlines.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\src\web.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\tests\compression.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\tests\test-macro-import-conflict.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\tests\test_error_propagation.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\tests\test_httpserver.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\tests\test_server.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\tests\test_weird_poll.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\tests\utils.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web\tests\weird_poll.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-actors\src\context.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-actors\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-actors\src\ws.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-actors\tests\test_ws.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\src\route.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\src\scope.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\routes.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\scopes.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\trybuild\docstring-ok.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\trybuild\route-custom-lowercase.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\trybuild\route-custom-method.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\trybuild\route-duplicate-method-fail.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\trybuild\route-malformed-path-fail.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\trybuild\route-missing-method-fail.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\trybuild\route-ok.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\trybuild\routes-missing-args-fail.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\trybuild\routes-missing-method-fail.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\trybuild\routes-ok.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\trybuild\scope-invalid-args.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\trybuild\scope-missing-args.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\trybuild\scope-on-handler.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\trybuild\scope-trailing-slash.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\trybuild\simple-fail.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\trybuild\simple.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\trybuild\test-runtime.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\actix-web-codegen\tests\trybuild.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\examples\client.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\any_body.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\builder.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\client\config.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\client\connection.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\client\connector.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\client\error.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\client\h1proto.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\client\h2proto.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\client\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\client\pool.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\connect.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\error.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\frozen.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\middleware\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\middleware\redirect.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\request.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\responses\json_body.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\responses\mod.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\responses\read_body.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\responses\response.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\responses\response_body.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\sender.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\test.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\src\ws.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\tests\test_client.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\tests\test_connector.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\tests\test_rustls_client.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\tests\test_ssl_client.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\tests\test_ws.rs
Processing file: overunsafe库\当前流行的rust库\actix-web-master\actix-web-master\awc\tests\utils.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\benches\benches.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\body\mod.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\boxed.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\error_handling\mod.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\extension.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\extract\connect_info.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\extract\host.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\extract\matched_path.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\extract\mod.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\extract\multipart.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\extract\nested_path.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\extract\path\de.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\extract\path\mod.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\extract\query.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\extract\raw_form.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\extract\raw_query.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\extract\rejection.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\extract\request_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\extract\state.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\extract\ws.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\form.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\handler\future.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\handler\into_service_state_in_extension.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\handler\mod.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\handler\service.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\json.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\macros.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\middleware\from_extractor.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\middleware\from_fn.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\middleware\map_request.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\middleware\map_response.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\middleware\mod.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\response\mod.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\response\redirect.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\response\sse.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\routing\future.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\routing\into_make_service.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\routing\method_filter.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\routing\method_routing.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\routing\mod.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\routing\not_found.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\routing\path_router.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\routing\route.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\routing\strip_prefix.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\routing\tests\fallback.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\routing\tests\get_to_head.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\routing\tests\handle_error.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\routing\tests\merge.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\routing\tests\mod.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\routing\tests\nest.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\routing\url_params.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\serve.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\service_ext.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\test_helpers\mod.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\test_helpers\test_client.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\test_helpers\tracing_helpers.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum\src\util.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-core\src\body.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-core\src\error.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-core\src\extract\default_body_limit.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-core\src\extract\from_ref.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-core\src\extract\mod.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-core\src\extract\rejection.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-core\src\extract\request_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-core\src\extract\tuple.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-core\src\ext_traits\mod.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-core\src\ext_traits\request.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-core\src\ext_traits\request_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-core\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-core\src\macros.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-core\src\response\append_headers.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-core\src\response\into_response.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-core\src\response\into_response_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-core\src\response\mod.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\body\async_read_body.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\body\mod.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\either.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\extract\cached.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\extract\cookie\mod.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\extract\cookie\private.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\extract\cookie\signed.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\extract\form.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\extract\json_deserializer.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\extract\mod.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\extract\multipart.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\extract\optional_path.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\extract\query.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\extract\with_rejection.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\handler\mod.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\handler\or.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\json_lines.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\middleware.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\protobuf.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\response\attachment.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\response\erased_json.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\response\mod.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\routing\mod.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\routing\resource.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\routing\typed.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-extra\src\typed_header.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\src\attr_parsing.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\src\axum_test.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\src\debug_handler.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\src\from_ref.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\src\from_request\attr.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\src\from_request.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\src\typed_path.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\src\with_position.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\argument_not_extractor.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\duplicate_args.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\extension_not_clone.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\extract_self_mut.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\extract_self_ref.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\generics.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\invalid_attrs.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\json_not_deserialize.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\multiple_paths.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\multiple_request_consumers.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\not_async.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\not_a_function.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\not_send.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\output_tuple_too_many.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\returning_request_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\single_wrong_return_tuple.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\too_many_extractors.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\wrong_order.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\wrong_return_tuple.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\fail\wrong_return_type.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\pass\associated_fn_without_self.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\pass\deny_unreachable_code.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\pass\impl_future.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\pass\impl_into_response.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\pass\infer_state.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\pass\multiple_extractors.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\pass\mut_extractor.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\pass\ready.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\pass\request_last.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\pass\result_impl_into_response.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\pass\returns_self.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\pass\self_receiver.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\pass\set_state.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_handler\pass\state_and_body.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_middleware\fail\doesnt_take_next.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_middleware\fail\next_not_last.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_middleware\fail\takes_next_twice.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\debug_middleware\pass\basic.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_ref\fail\generics.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_ref\pass\basic.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_ref\pass\reference-types.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_ref\pass\skip.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\fail\double_via_attr.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\fail\enum_from_request_ident_in_variant.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\fail\enum_from_request_on_variant.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\fail\enum_no_via.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\fail\generic.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\fail\generic_without_via.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\fail\generic_without_via_rejection.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\fail\not_enum_or_struct.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\fail\override_rejection_on_enum_without_via.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\fail\parts_extracting_body.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\fail\state_infer_multiple_different_types.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\fail\unknown_attr_container.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\fail\unknown_attr_field.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\fail\via_on_container_and_field.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\container.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\container_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\empty_named.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\empty_named_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\empty_tuple.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\empty_tuple_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\enum_via.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\enum_via_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\named.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\named_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\named_via.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\named_via_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\override_rejection.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\override_rejection_non_generic.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\override_rejection_non_generic_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\override_rejection_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\override_rejection_with_via_on_enum.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\override_rejection_with_via_on_enum_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\override_rejection_with_via_on_struct.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\override_rejection_with_via_on_struct_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\state_cookie.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\state_enum_via.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\state_enum_via_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\state_explicit.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\state_explicit_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\state_field_explicit.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\state_field_infer.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\state_infer.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\state_infer_multiple.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\state_infer_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\state_via.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\state_via_infer.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\state_via_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\state_with_rejection.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\tuple.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\tuple_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\tuple_same_type_twice.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\tuple_same_type_twice_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\tuple_same_type_twice_via.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\tuple_same_type_twice_via_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\tuple_via.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\tuple_via_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\unit.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\from_request\pass\unit_parts.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\typed_path\fail\missing_capture.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\typed_path\fail\missing_field.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\typed_path\fail\not_deserialize.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\typed_path\fail\route_not_starting_with_slash.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\typed_path\fail\route_not_starting_with_slash_non_empty.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\typed_path\fail\unit_with_capture.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\typed_path\pass\customize_rejection.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\typed_path\pass\into_uri.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\typed_path\pass\named_fields_struct.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\typed_path\pass\option_result.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\typed_path\pass\tuple_struct.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\typed_path\pass\unit_struct.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\typed_path\pass\url_encoding.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\axum-macros\tests\typed_path\pass\wildcards.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\anyhow-error-response\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\auto-reload\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\chat\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\consume-body-in-extractor-or-middleware\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\cors\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\customize-extractor-error\src\custom_extractor.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\customize-extractor-error\src\derive_from_request.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\customize-extractor-error\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\customize-extractor-error\src\with_rejection.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\customize-path-rejection\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\dependency-injection\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\diesel-async-postgres\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\diesel-postgres\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\error-handling\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\form\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\global-404-handler\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\graceful-shutdown\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\handle-head-request\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\hello-world\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\http-proxy\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\jwt\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\key-value-store\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\listen-multiple-addrs\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\low-level-openssl\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\low-level-rustls\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\multipart-form\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\oauth\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\parse-body-based-on-content-type\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\print-request-response\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\prometheus-metrics\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\query-params-with-empty-strings\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\readme\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\reqwest-response\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\rest-grpc-multiplex\build.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\rest-grpc-multiplex\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\rest-grpc-multiplex\src\multiplex_service.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\reverse-proxy\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\routes-and-handlers-close-together\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\serve-with-hyper\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\simple-router-wasm\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\sqlx-postgres\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\sse\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\static-file-server\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\stream-to-file\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\templates\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\templates-minijinja\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\testing\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\testing-websockets\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\tls-graceful-shutdown\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\tls-rustls\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\todos\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\tokio-postgres\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\tokio-redis\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\tracing-aka-logging\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\unix-domain-socket\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\validator\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\versioning\src\main.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\websockets\src\client.rs
Processing file: overunsafe库\当前流行的rust库\axum-main\axum-main\examples\websockets\src\main.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\benches.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\change_detection.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\components\add_remove.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\components\add_remove_big_sparse_set.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\components\add_remove_big_table.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\components\add_remove_sparse_set.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\components\add_remove_table.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\components\archetype_updates.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\components\insert_simple.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\components\insert_simple_unbatched.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\components\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\empty_archetypes.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\events\iter.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\events\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\events\send.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\heavy_compute.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\iter_frag.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\iter_frag_foreach.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\iter_frag_foreach_sparse.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\iter_frag_foreach_wide.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\iter_frag_foreach_wide_sparse.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\iter_frag_sparse.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\iter_frag_wide.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\iter_frag_wide_sparse.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\iter_simple.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\iter_simple_foreach.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\iter_simple_foreach_hybrid.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\iter_simple_foreach_sparse_set.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\iter_simple_foreach_wide.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\iter_simple_foreach_wide_sparse_set.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\iter_simple_sparse_set.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\iter_simple_system.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\iter_simple_wide.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\iter_simple_wide_sparse_set.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\iteration\par_iter_simple.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\observers\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\observers\propagation.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\observers\simple.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\scheduling\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\scheduling\running_systems.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\scheduling\run_condition.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\scheduling\schedule.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\world\commands.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\world\entity_hash.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\world\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\world\spawn.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_ecs\world\world_get.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_math\bezier.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_reflect\list.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_reflect\map.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_reflect\path.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_reflect\struct.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_render\render_layers.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_render\torus.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\benches\benches\bevy_tasks\iter.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_a11y\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_animation\src\animatable.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_animation\src\graph.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_animation\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_animation\src\transition.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_animation\src\util.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_app\src\app.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_app\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_app\src\main_schedule.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_app\src\panic_handler.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_app\src\plugin.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_app\src\plugin_group.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_app\src\schedule_runner.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_app\src\sub_app.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_app\src\terminal_ctrl_c_handler.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\macros\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\assets.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\direct_access_ext.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\event.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\folder.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\handle.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\id.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\io\android.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\io\embedded\embedded_watcher.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\io\embedded\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\io\file\file_asset.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\io\file\file_watcher.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\io\file\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\io\file\sync_file_asset.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\io\gated.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\io\memory.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\io\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\io\processor_gated.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\io\source.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\io\wasm.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\loader.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\loader_builders.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\meta.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\path.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\processor\log.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\processor\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\processor\process.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\reflect.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_unchecked_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\reflect.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: from_type, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\reflect.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\saver.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\server\info.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\server\loaders.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\server\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_asset\src\transformer.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_audio\src\audio.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_audio\src\audio_output.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_audio\src\audio_source.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_audio\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_audio\src\pitch.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_audio\src\sinks.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\crates\gen_tests\src\main.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\color.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\color_difference.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\color_ops.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\color_range.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\hsla.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\hsva.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\hwba.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\laba.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\lcha.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\linear_rgba.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\oklaba.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\oklcha.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\palettes\basic.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\palettes\css.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\palettes\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\palettes\tailwind.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\srgba.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\testing.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\test_colors.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_color\src\xyza.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core\src\name.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core\src\serde.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core\src\task_pool_options.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\auto_exposure\buffers.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\auto_exposure\compensation_curve.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\auto_exposure\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\auto_exposure\node.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\auto_exposure\pipeline.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\auto_exposure\settings.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\blit\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\bloom\downsampling_pipeline.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\bloom\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\bloom\settings.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\bloom\upsampling_pipeline.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\contrast_adaptive_sharpening\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\contrast_adaptive_sharpening\node.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\core_2d\camera_2d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\core_2d\main_transparent_pass_2d_node.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\core_2d\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\core_3d\camera_3d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\core_3d\main_opaque_pass_3d_node.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\core_3d\main_transmissive_pass_3d_node.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\core_3d\main_transparent_pass_3d_node.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\core_3d\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\deferred\copy_lighting_id.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\deferred\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\deferred\node.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\dof\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\fullscreen_vertex_shader\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\fxaa\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\fxaa\node.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\motion_blur\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\motion_blur\node.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\motion_blur\pipeline.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\msaa_writeback.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\post_process\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\prepass\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\prepass\node.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\skybox\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\skybox\prepass.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\smaa\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\taa\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\tonemapping\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\tonemapping\node.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\upscaling\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_core_pipeline\src\upscaling\node.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\compile_fail\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\compile_fail\tests\deref_derive\invalid_attribute_fail.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\compile_fail\tests\deref_derive\invalid_item_fail.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\compile_fail\tests\deref_derive\missing_attribute_fail.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\compile_fail\tests\deref_derive\multiple_attributes_fail.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\compile_fail\tests\deref_derive\multiple_fields_pass.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\compile_fail\tests\deref_derive\single_field_pass.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\compile_fail\tests\deref_mut_derive\invalid_attribute_fail.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\compile_fail\tests\deref_mut_derive\invalid_item_fail.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\compile_fail\tests\deref_mut_derive\mismatched_target_type_fail.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\compile_fail\tests\deref_mut_derive\missing_attribute_fail.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\compile_fail\tests\deref_mut_derive\missing_deref_fail.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\compile_fail\tests\deref_mut_derive\multiple_attributes_fail.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\compile_fail\tests\deref_mut_derive\multiple_fields_pass.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\compile_fail\tests\deref_mut_derive\single_field_pass.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\compile_fail\tests\derive.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\src\bevy_main.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\src\derefs.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\src\enum_variant_meta.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_derive\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_dev_tools\src\ci_testing\config.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_dev_tools\src\ci_testing\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_dev_tools\src\ci_testing\systems.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_dev_tools\src\fps_overlay.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_dev_tools\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_dev_tools\src\states.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_dev_tools\src\ui_debug_overlay\inset.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_dev_tools\src\ui_debug_overlay\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_diagnostic\src\diagnostic.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_diagnostic\src\entity_count_diagnostics_plugin.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_diagnostic\src\frame_time_diagnostics_plugin.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_diagnostic\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_diagnostic\src\log_diagnostics_plugin.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_diagnostic\src\system_information_diagnostics_plugin.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_dylib\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui\entity_ref_mut_lifetime_safety.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui\query_exact_sized_iterator_safety.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui\query_iter_combinations_mut_iterator_safety.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui\query_iter_many_mut_iterator_safety.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui\query_lifetime_safety.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui\query_to_readonly.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui\query_transmute_safety.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui\system_param_derive_readonly.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui\system_query_get_lifetime_safety.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui\system_query_get_many_lifetime_safety.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui\system_query_get_many_mut_lifetime_safety.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui\system_query_iter_lifetime_safety.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui\system_query_iter_many_mut_lifetime_safety.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui\system_query_set_get_lifetime_safety.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui\system_query_set_iter_lifetime_safety.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui\system_state_get_lifetime_safety.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui\system_state_iter_lifetime_safety.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui\system_state_iter_mut_overlap_safety.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui\world_query_derive.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\compile_fail\tests\ui.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\examples\change_detection.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\examples\events.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\examples\resources.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\macros\src\component.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\macros\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\macros\src\query_data.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\macros\src\query_filter.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\macros\src\states.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\macros\src\world_query.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\archetype.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_status, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\archetype.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: empty_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\archetype.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\batching.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\bundle.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: write_components, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\bundle.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: write_components, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\bundle.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: write_components, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\bundle.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: add_bundle_to_archetype, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\bundle.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: add_bundle_to_archetype, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\bundle.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: new_with_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\bundle.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: new_with_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\bundle.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: reserve_storage, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\bundle.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: spawn_non_existent, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\bundle.rs 

-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: true, name: spawn_non_existent, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\bundle.rs 

Found method with unsafe block in spawn_non_existent:
File: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\bundle.rs
Start Line: 946, End Line: 998
/// # Safety
/// `entity` must be allocated (but non-existent), `T` must match this [`BundleInfo`]'s type
#[inline]
pub unsafe fn spawn_non_existent<T: DynamicBundle>(
    &mut self,
    entity: Entity,
    bundle: T,
    #[cfg(feature = "track_change_detection")]
    caller: &'static Location<'static>,
) -> EntityLocation {
    let bundle_info = self.bundle_info.as_ref();
    let location = {
        let table = self.table.as_mut();
        let archetype = self.archetype.as_mut();
        let (sparse_sets, entities) = {
            let world = self.world.world_mut();
            (&mut world.storages.sparse_sets, &mut world.entities)
        };
        let table_row = table.allocate(entity);
        let location = archetype.allocate(entity, table_row);
        bundle_info
            .write_components(
                table,
                sparse_sets,
                &SpawnBundleStatus,
                entity,
                table_row,
                self.change_tick,
                bundle,
                #[cfg(feature = "track_change_detection")]
                caller,
            );
        entities.set(entity.index(), location);
        location
    };
    let mut deferred_world = unsafe { self.world.into_deferred() };
    let archetype = self.archetype.as_ref();
    unsafe {
        deferred_world.trigger_on_add(archetype, entity, bundle_info.iter_components());
        if archetype.has_add_observer() {
            deferred_world.trigger_observers(ON_ADD, entity, bundle_info.components());
        }
        deferred_world
            .trigger_on_insert(archetype, entity, bundle_info.iter_components());
        if archetype.has_insert_observer() {
            deferred_world
                .trigger_observers(ON_INSERT, entity, bundle_info.components());
        }
    };
    location
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: init_info, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\bundle.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: initialize_dynamic_bundle, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\bundle.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\change_detection.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: from_tick_cells, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\change_detection.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: from_tick_cells, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\change_detection.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: with_type, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\change_detection.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\component.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: drop_ptr, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\component.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_info_unchecked, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\component.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: init_non_send, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\component.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\entity\hash.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\entity\map_entities.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\entity\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: flush_as_invalid, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\entity\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: flush_and_reserve_invalid_assuming_no_entities, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\entity\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: flush_and_reserve_invalid_assuming_no_entities, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\entity\mod.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\event\base.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\event\collections.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\event\event_cursor.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\event\iterators.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\event\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\event\mutator.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\event\mut_iterators.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\event\reader.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\event\registry.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: register_event, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\event\registry.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: run_updates, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\event\registry.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\event\update.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\event\writer.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\identifier\error.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\identifier\kinds.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\identifier\masks.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: inc_masked_high_by, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\identifier\masks.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\identifier\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\intern.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\label.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\observer\entity_observer.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\observer\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: true, name: register_observer, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\observer\mod.rs 

Found method with unsafe block in register_observer:
File: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\observer\mod.rs
Start Line: 325, End Line: 377
/// Register an observer to the cache, called when an observer is created
pub(crate) fn register_observer(&mut self, observer_entity: Entity) {
    let (observer_state, archetypes, observers) = unsafe {
        let observer_state: *const ObserverState = self
            .get::<ObserverState>(observer_entity)
            .unwrap();
        for watched_entity in &(*observer_state).descriptor.entities {
            let mut entity_mut = self.entity_mut(*watched_entity);
            let mut observed_by = entity_mut.entry::<ObservedBy>().or_default();
            observed_by.0.push(observer_entity);
        }
        (&*observer_state, &mut self.archetypes, &mut self.observers)
    };
    let descriptor = &observer_state.descriptor;
    for &event_type in &descriptor.events {
        let cache = observers.get_observers(event_type);
        if descriptor.components.is_empty() && descriptor.entities.is_empty() {
            cache.map.insert(observer_entity, observer_state.runner);
        } else if descriptor.components.is_empty() {
            for &watched_entity in &observer_state.descriptor.entities {
                let map = cache.entity_observers.entry(watched_entity).or_default();
                map.insert(observer_entity, observer_state.runner);
            }
        } else {
            for &component in &descriptor.components {
                let observers = cache
                    .component_observers
                    .entry(component)
                    .or_insert_with(|| {
                        if let Some(flag) = Observers::is_archetype_cached(event_type) {
                            archetypes.update_flags(component, flag, true);
                        }
                        CachedComponentObservers::default()
                    });
                if descriptor.entities.is_empty() {
                    observers.map.insert(observer_entity, observer_state.runner);
                } else {
                    for &watched_entity in &descriptor.entities {
                        let map = observers
                            .entity_map
                            .entry(watched_entity)
                            .or_default();
                        map.insert(observer_entity, observer_state.runner);
                    }
                }
            }
        }
    }
}



Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\observer\runner.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: observer_system_runner, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\observer\runner.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: observer_system_runner, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\observer\runner.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: observer_system_runner, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\observer\runner.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: observer_system_runner, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\observer\runner.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: observer_system_runner, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\observer\runner.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: observer_system_runner, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\observer\runner.rs 

-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: observer_system_runner, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\observer\runner.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\observer\trigger_event.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: trigger_event, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\observer\trigger_event.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: trigger_event, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\observer\trigger_event.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\access.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\builder.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: transmute_filtered, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\builder.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\error.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\fetch.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\filter.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fold_over_table_range, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fold_over_table_range, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fold_over_archetype_range, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fold_over_archetype_range, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fold_over_archetype_range, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fold_over_dense_archetype_range, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fold_over_dense_archetype_range, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sort_unstable, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sort_unstable, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sort_by, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sort_by, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sort_unstable_by, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sort_unstable_by, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sort_by_key, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sort_by_key, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sort_unstable_by_key, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sort_unstable_by_key, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sort_by_cached_key, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: sort_by_cached_key, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fold, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fold, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fold, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fold, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fold, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fold, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: fetch_next, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fetch_next, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fetch_next, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fetch_next_aliased_unchecked, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fetch_next_aliased_unchecked, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fetch_next_aliased_unchecked, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fetch_next_aliased_unchecked, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fetch_next_back, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: max_remaining, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: max_remaining, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\iter.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\par_iter.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: for_each_init, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\par_iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: for_each_init, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\par_iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: for_each_init, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\par_iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_batch_size, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\par_iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_batch_size, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\par_iter.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_batch_size, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\par_iter.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: as_readonly, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: as_nop, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: true, name: new_with_access, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

Found method with unsafe block in new_with_access:
File: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs
Start Line: 158, End Line: 174
/// Identical to `new`, but it populates the provided `access` with the matched results.
pub(crate) fn new_with_access(
    world: &mut World,
    access: &mut Access<ArchetypeComponentId>,
) -> Self {
    let mut state = Self::new_uninitialized(world);
    for archetype in world.archetypes.iter() {
        unsafe {
            if state.new_archetype_internal(archetype) {
                state.update_archetype_component_access(archetype, access);
            }
        }
    }
    state.archetype_generation = world.archetypes.generation();
    state
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: is_empty_unsafe_world_cell, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: update_archetypes_unsafe_world_cell, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: new_archetype, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: new_archetype, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_many, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_many_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_manual, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_many_read_only_manual, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_many_read_only_manual, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: iter_manual, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: iter_combinations, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: iter_combinations_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: iter_many, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: iter_many_manual, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: iter_many_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: par_fold_init_unchecked_manual, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_single, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_single_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\state.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\query\world_query.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\reflect\bundle.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\reflect\component.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: reflect_unchecked_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\reflect\component.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\reflect\entity_commands.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\reflect\from_world.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\reflect\map_entities.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\reflect\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\reflect\resource.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\removal_detection.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\condition.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\config.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\executor\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\executor\multi_threaded.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: try_lock, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\executor\multi_threaded.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: tick, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\executor\multi_threaded.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: spawn_system_tasks, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\executor\multi_threaded.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: spawn_system_tasks, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\executor\multi_threaded.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: spawn_system_tasks, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\executor\multi_threaded.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: spawn_system_tasks, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\executor\multi_threaded.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: should_run, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\executor\multi_threaded.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: should_run, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\executor\multi_threaded.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: spawn_system_task, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\executor\multi_threaded.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: spawn_system_task, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\executor\multi_threaded.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: spawn_exclusive_system_task, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\executor\multi_threaded.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: spawn_exclusive_system_task, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\executor\multi_threaded.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: evaluate_and_fold_conditions, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\executor\multi_threaded.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\executor\simple.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\executor\single_threaded.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\graph_utils.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\schedule.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\set.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\schedule\stepping.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\blob_vec.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: grow_exact, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\blob_vec.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: grow_exact, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\blob_vec.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: replace_unchecked, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\blob_vec.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: replace_unchecked, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\blob_vec.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: replace_unchecked, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\blob_vec.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: swap_remove_and_forget_unchecked, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\blob_vec.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: swap_remove_and_forget_unchecked, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\blob_vec.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_ptr, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\blob_vec.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_ptr_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\blob_vec.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_slice, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\blob_vec.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: repeat_layout, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\blob_vec.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\resource.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_data, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\resource.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_ticks, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\resource.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_with_ticks, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\resource.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: insert_with_ticks, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\resource.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: initialize_with, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\resource.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\sparse_set.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_added_tick, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\sparse_set.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_changed_tick, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\sparse_set.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_changed_by, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\sparse_set.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: remove_and_forget, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\sparse_set.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\table.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_data_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\storage\table.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\adapter_system.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\builder.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\combinator.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\commands\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: insert_by_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\commands\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: try_insert_by_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\commands\mod.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\commands\parallel_scope.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\exclusive_function_system.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\exclusive_system_param.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\function_system.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_manual_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\function_system.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\observer_system.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\query.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: to_readonly, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\query.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: iter_unsafe, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\query.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: iter_combinations_unsafe, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\query.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: iter_many_unsafe, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\query.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_inner, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\query.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: iter_inner, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\query.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\system.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\system_name.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\system_param.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\system\system_registry.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\traversal.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\command_queue.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_raw, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\command_queue.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: apply_or_drop_queued, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\command_queue.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: apply_or_drop_queued, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\command_queue.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: apply_or_drop_queued, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\command_queue.rs 

-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: apply_or_drop_queued, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\command_queue.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\component_constants.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\deferred_world.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_entity_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\deferred_world.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_resource_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\deferred_world.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_non_send_resource_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\deferred_world.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_resource_mut_by_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\deferred_world.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_non_send_mut_by_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\deferred_world.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_mut_by_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\deferred_world.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: trigger_on_add, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\deferred_world.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: trigger_on_insert, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\deferred_world.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: trigger_on_replace, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\deferred_world.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: trigger_on_remove, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\deferred_world.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_change_ticks, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_change_ticks_by_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_by_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: into_borrow, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: into_ref, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: into_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: into_borrow_by_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: into_mut_by_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: insert_with_caller, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: move_entity_from_remove, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: move_entity_from_remove, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: move_entity_from_remove, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: move_entity_from_remove, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: remove_bundle, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: remove_bundle, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: insert_dynamic_bundle, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: remove_bundle_from_archetype, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: remove_bundle_from_archetype, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: take_component, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: take_component, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\entity_ref.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\error.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\identifier.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_many_entities, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: iter_entities, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: iter_entities_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_many_entities_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_entities_mut_unchecked, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_entities_mut_unchecked, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_many_entities_dynamic_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_many_entities_from_set_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_entities_dynamic_mut_unchecked, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: spawn_at_empty_internal, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: spawn_at_empty_internal, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: insert_resource_with_caller, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: remove_non_send_resource, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_resource, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_resource_ref, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_resource_or_insert_with, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_resource_or_insert_with, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_resource_or_insert_with, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_non_send_resource, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: insert_or_spawn_batch_with_caller, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: insert_or_spawn_batch_with_caller, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: insert_or_spawn_batch_with_caller, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: insert_or_spawn_batch_with_caller, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: insert_or_spawn_batch_with_caller, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: insert_or_spawn_batch_with_caller, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: insert_or_spawn_batch_with_caller, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: resource_scope, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: resource_scope, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: insert_resource_by_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: insert_non_send_by_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: flush_entities, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: init_bundle, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_resource_by_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: iter_resources, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: iter_resources_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: iter_resources_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: iter_resources_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: iter_resources_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_non_send_by_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\mod.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\reflect.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: get_reflect, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\reflect.rs 

-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: get_reflect_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\reflect.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\spawn_batch.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\unsafe_world_cell.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: world_metadata, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\unsafe_world_cell.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: unsafe_world, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\unsafe_world_cell.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: observers, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\unsafe_world_cell.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_non_send_resource_by_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\unsafe_world_cell.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_non_send_resource_mut_by_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\unsafe_world_cell.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_non_send_resource_mut_by_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\unsafe_world_cell.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_non_send_resource_mut_by_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\unsafe_world_cell.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_non_send_resource_mut_by_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\unsafe_world_cell.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_resource_with_ticks, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\unsafe_world_cell.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_non_send_with_ticks, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\unsafe_world_cell.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_raw_command_queue, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\unsafe_world_cell.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: increment_trigger_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\unsafe_world_cell.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_mut_using_ticks, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\unsafe_world_cell.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fetch_table, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\unsafe_world_cell.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fetch_sparse_set, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ecs\src\world\unsafe_world_cell.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_encase_derive\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gilrs\src\converter.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gilrs\src\gilrs_system.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gilrs\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gilrs\src\rumble.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gizmos\macros\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gizmos\src\aabb.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gizmos\src\arcs.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gizmos\src\arrows.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gizmos\src\circles.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gizmos\src\config.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gizmos\src\cross.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gizmos\src\gizmos.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gizmos\src\grid.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gizmos\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gizmos\src\light.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gizmos\src\pipeline_2d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gizmos\src\pipeline_3d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gizmos\src\primitives\dim2.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gizmos\src\primitives\dim3.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gizmos\src\primitives\helpers.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gizmos\src\primitives\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gizmos\src\rounded_box.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gltf\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gltf\src\loader.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_gltf\src\vertex_attributes.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_hierarchy\src\child_builder.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_hierarchy\src\components\children.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_hierarchy\src\components\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_hierarchy\src\components\parent.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_hierarchy\src\events.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_hierarchy\src\hierarchy.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_hierarchy\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_hierarchy\src\query_extension.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_hierarchy\src\valid_parent_check_plugin.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_input\src\axis.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_input\src\button_input.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_input\src\common_conditions.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_input\src\gamepad.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_input\src\gestures.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_input\src\keyboard.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_input\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_input\src\mouse.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_input\src\touch.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_internal\src\default_plugins.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_internal\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_internal\src\prelude.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_log\src\android_tracing.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_log\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_macro_utils\src\attrs.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_macro_utils\src\bevy_manifest.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_macro_utils\src\fq_std.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_macro_utils\src\label.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_macro_utils\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_macro_utils\src\shape.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_macro_utils\src\symbol.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\affine3.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\aspect_ratio.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\bounding\bounded2d\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\bounding\bounded2d\primitive_impls.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\bounding\bounded3d\extrusion.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\bounding\bounded3d\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\bounding\bounded3d\primitive_impls.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\bounding\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\bounding\raycast2d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\bounding\raycast3d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\common_traits.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\compass.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\cubic_splines.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\direction.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\float_ord.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\isometry.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\primitives\dim2.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\primitives\dim3.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\primitives\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\primitives\serde.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\ray.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\rects\irect.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\rects\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\rects\rect.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\rects\urect.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\rotation2d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\sampling\mesh_sampling.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\sampling\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\sampling\shape_sampling.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_math\src\sampling\standard.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_mikktspace\examples\generate.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_mikktspace\src\generated.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_mikktspace\src\lib.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: generate_tangents, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_mikktspace\src\lib.rs 

Found function with unsafe block in generate_tangents:
File: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_mikktspace\src\lib.rs
Start Line: 71, End Line: 73
/// Generates tangents for the input geometry.
///
/// # Errors
///
/// Returns `false` if the geometry is unsuitable for tangent generation including,
/// but not limited to, lack of vertices.
#[allow(unsafe_code)]
pub fn generate_tangents<I: Geometry>(geometry: &mut I) -> bool {
    unsafe { generated::genTangSpace(geometry, 180.0) }
}



Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_mikktspace\tests\regression_test.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\bundle.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\cluster\assign.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\cluster\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\cluster\test.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\deferred\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\extended_material.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\fog.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\light\ambient_light.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\light\directional_light.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\light\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\light\point_light.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\light\spot_light.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\lightmap\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\light_probe\environment_map.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\light_probe\irradiance_volume.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\light_probe\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\material.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\meshlet\asset.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\meshlet\from_mesh.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\meshlet\gpu_scene.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\meshlet\material_draw_nodes.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\meshlet\material_draw_prepare.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\meshlet\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\meshlet\persistent_buffer.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\meshlet\persistent_buffer_impls.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\meshlet\pipelines.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\meshlet\visibility_buffer_raster_node.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\parallax.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\pbr_material.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\prepass\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\prepass\prepass_bindings.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\render\fog.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\render\gpu_preprocess.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\render\light.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\render\mesh.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\render\mesh_bindings.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\render\mesh_view_bindings.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\render\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\render\morph.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\render\skin.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\ssao\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\ssr\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\volumetric_fog\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\volumetric_fog\render.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_pbr\src\wireframe.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_picking\src\backend.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_picking\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_picking\src\pointer.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ptr\src\lib.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: make, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ptr\src\lib.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: drop_as, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ptr\src\lib.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: read_unaligned, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ptr\src\lib.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: dangling_with_align, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ptr\src\lib.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\compile_fail\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\compile_fail\tests\derive.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\compile_fail\tests\func.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\compile_fail\tests\into_function\arguments_fail.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\compile_fail\tests\into_function\closure_fail.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\compile_fail\tests\into_function\return_fail.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\compile_fail\tests\reflect_derive\bounds_pass.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\compile_fail\tests\reflect_derive\custom_where_fail.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\compile_fail\tests\reflect_derive\custom_where_pass.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\compile_fail\tests\reflect_derive\from_reflect_fail.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\compile_fail\tests\reflect_derive\from_reflect_pass.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\compile_fail\tests\reflect_derive\generics_fail.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\compile_fail\tests\reflect_derive\generics_structs_pass.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\compile_fail\tests\reflect_derive\lifetimes_pass.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\compile_fail\tests\reflect_derive\nested_pass.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\container_attributes.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\custom_attributes.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\derive_data.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\documentation.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\enum_utility.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\field_attributes.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\from_reflect.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\impls\enums.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\impls\func\from_arg.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\impls\func\function_impls.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\impls\func\get_ownership.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\impls\func\into_return.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\impls\func\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\impls\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\impls\structs.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\impls\tuple_structs.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\impls\typed.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\impls\values.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\reflect_value.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\registration.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\serialization.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\trait_reflection.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\type_path.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\derive\src\utility.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\examples\reflect_docs.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\array.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\attributes.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\enums\dynamic_enum.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\enums\enum_trait.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\enums\helpers.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\enums\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\enums\variants.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\fields.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\from_reflect.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\args\arg.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\args\error.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\args\from_arg.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\args\info.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\args\list.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\args\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\args\ownership.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\closures\dynamic_closure.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\closures\dynamic_closure_mut.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\closures\into_closure.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\closures\into_closure_mut.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\closures\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\error.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\function.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\info.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\into_function.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\macros.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\reflect_fn.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\reflect_fn_mut.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\func\return_type.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\impls\glam.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\impls\petgraph.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\impls\smallvec.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\impls\smol_str.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\impls\std.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\impls\uuid.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\list.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\map.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\path\access.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\path\error.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\path\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\path\parse.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: next_token, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\path\parse.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\reflect.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\serde\de.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\serde\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\serde\ser.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\serde\type_data.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\set.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\std_traits.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\struct_trait.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\tuple.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\tuple_struct.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\type_info.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\type_path.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\type_registry.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_reflect\src\utility.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\macros\src\as_bind_group.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\macros\src\extract_component.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\macros\src\extract_resource.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\macros\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\alpha.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\batching\gpu_preprocessing.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\batching\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\batching\no_gpu_preprocessing.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\camera\camera.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\camera\camera_driver_node.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\camera\clear_color.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\camera\manual_texture_view.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\camera\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\camera\projection.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\diagnostic\internal.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\diagnostic\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\extract_component.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\extract_instances.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\extract_param.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\extract_resource.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\globals.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\gpu_component_array_buffer.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\lib.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: initialize_render_app, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\lib.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\allocator.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\mesh\conversions.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\mesh\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\mesh\skinning.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\morph.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\primitives\dim2.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\primitives\dim3\capsule.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\primitives\dim3\cone.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\primitives\dim3\conical_frustum.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\primitives\dim3\cuboid.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\primitives\dim3\cylinder.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\primitives\dim3\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\primitives\dim3\plane.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\primitives\dim3\sphere.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\primitives\dim3\tetrahedron.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\primitives\dim3\torus.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\primitives\dim3\triangle3d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\primitives\extrusion.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\mesh\primitives\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\pipelined_rendering.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\primitives\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\renderer\graph_runner.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\renderer\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\renderer\render_device.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_asset.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_graph\app.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_graph\context.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_graph\edge.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_graph\graph.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_graph\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_graph\node.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_graph\node_slot.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_phase\draw.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_phase\draw_state.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_phase\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_phase\rangefinder.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_resource\batched_uniform_buffer.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_resource\bind_group.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_resource\bind_group_entries.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_resource\bind_group_layout.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_resource\bind_group_layout_entries.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_resource\buffer.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_resource\buffer_vec.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_resource\gpu_array_buffer.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_resource\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_resource\pipeline.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_resource\pipeline_cache.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_resource\pipeline_specializer.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_resource\resource_macros.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_resource\shader.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_resource\storage_buffer.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_resource\texture.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\render_resource\uniform_buffer.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\settings.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\spatial_bundle.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\texture\basis.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\texture\compressed_image_saver.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\texture\dds.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\texture\exr_texture_loader.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\texture\fallback_image.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\texture\hdr_texture_loader.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\texture\image.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\texture\image_loader.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\texture\image_texture_conversion.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\texture\ktx2.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\texture\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\texture\texture_attachment.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\texture\texture_cache.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\view\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\view\visibility\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\view\visibility\range.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\view\visibility\render_layers.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\view\window\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: create_surfaces, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\view\window\mod.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\view\window\screenshot.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: save_screenshot_to_disk, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_render\src\view\window\screenshot.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_scene\src\bundle.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_scene\src\dynamic_scene.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_scene\src\dynamic_scene_builder.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_scene\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_scene\src\scene.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_scene\src\scene_filter.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_scene\src\scene_loader.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_scene\src\scene_spawner.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_scene\src\serde.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_sprite\src\bundle.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_sprite\src\dynamic_texture_atlas_builder.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_sprite\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_sprite\src\mesh2d\color_material.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_sprite\src\mesh2d\material.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_sprite\src\mesh2d\mesh.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_sprite\src\mesh2d\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_sprite\src\mesh2d\wireframe2d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_sprite\src\render\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_sprite\src\sprite.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_sprite\src\texture_atlas.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_sprite\src\texture_atlas_builder.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_sprite\src\texture_slice\border_rect.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_sprite\src\texture_slice\computed_slices.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_sprite\src\texture_slice\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_sprite\src\texture_slice\slicer.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_state\macros\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_state\macros\src\states.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_state\src\app.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_state\src\condition.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_state\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_state\src\state\computed_states.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_state\src\state\freely_mutable_state.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_state\src\state\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_state\src\state\resources.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_state\src\state\states.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_state\src\state\state_set.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_state\src\state\sub_states.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_state\src\state\transitions.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_state\src\state_scoped.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\examples\busy_behavior.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\examples\idle_behavior.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\src\iter\adapters.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\src\iter\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\src\single_threaded_task_pool.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: scope_with_executor, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\src\single_threaded_task_pool.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: scope_with_executor, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\src\single_threaded_task_pool.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: scope_with_executor, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\src\single_threaded_task_pool.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\src\slice.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\src\task.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\src\task_pool.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: scope_with_executor_inner, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\src\task_pool.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: scope_with_executor_inner, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\src\task_pool.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: scope_with_executor_inner, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\src\task_pool.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: scope_with_executor_inner, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\src\task_pool.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: scope_with_executor_inner, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\src\task_pool.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\src\thread_executor.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\src\usages.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_tasks\src\wasm_task.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_text\src\bounds.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_text\src\error.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_text\src\font.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_text\src\font_atlas.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_text\src\font_atlas_set.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_text\src\font_loader.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_text\src\glyph.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_text\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_text\src\pipeline.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_text\src\text.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_text\src\text2d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_time\src\common_conditions.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_time\src\fixed.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_time\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_time\src\real.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_time\src\stopwatch.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_time\src\time.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_time\src\timer.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_time\src\virt.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_transform\src\bundles.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_transform\src\commands.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_transform\src\components\global_transform.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_transform\src\components\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_transform\src\components\transform.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_transform\src\helper.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_transform\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_transform\src\plugins.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_transform\src\systems.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: propagate_transforms, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_transform\src\systems.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_transform\src\traits.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\accessibility.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\focus.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\geometry.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\layout\convert.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\layout\debug.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\layout\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\layout\ui_surface.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\measurement.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\node_bundles.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\render\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\render\pipeline.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\render\render_pass.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\render\ui_material_pipeline.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\stack.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\texture_slice.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\ui_material.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\ui_node.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\update.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\widget\button.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\widget\image.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\widget\label.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\widget\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_ui\src\widget\text.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_utils\macros\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_utils\src\cow_arc.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_utils\src\default.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_utils\src\futures.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: now_or_never, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_utils\src\futures.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: noop_waker, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_utils\src\futures.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_utils\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_utils\src\object_safe.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_utils\src\once.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_utils\src\parallel_queue.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_utils\src\short_names.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_utils\src\synccell.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: from_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_utils\src\synccell.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_utils\src\syncunsafecell.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: as_slice_of_cells, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_utils\src\syncunsafecell.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_window\src\cursor.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_window\src\event.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_window\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_window\src\raw_handle.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: window_handle, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_window\src\raw_handle.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: display_handle, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_window\src\raw_handle.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_window\src\system.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_window\src\window.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_winit\src\accessibility.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_winit\src\converters.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_winit\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_winit\src\state.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_winit\src\system.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_winit\src\winit_config.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_winit\src\winit_event.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\crates\bevy_winit\src\winit_windows.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\errors\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\2d_shapes.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\2d_viewport_to_world.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\bloom_2d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\bounding_2d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\custom_gltf_vertex_attribute.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\mesh2d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\mesh2d_arcs.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\mesh2d_manual.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\mesh2d_vertex_color_texture.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\move_sprite.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\pixel_grid_snap.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\rotation.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\sprite.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\sprite_animation.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\sprite_flipping.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\sprite_sheet.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\sprite_slice.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\sprite_tile.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\text2d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\texture_atlas.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\transparency_2d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\2d\wireframe_2d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\3d_scene.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\3d_shapes.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\3d_viewport_to_world.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\animated_material.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\anisotropy.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\anti_aliasing.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\atmospheric_fog.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\auto_exposure.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\blend_modes.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\bloom_3d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\clearcoat.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\color_grading.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\deferred_rendering.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\depth_of_field.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\fog.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\fog_volumes.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\generate_custom_mesh.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\irradiance_volumes.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\lighting.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\lightmaps.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\lines.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\load_gltf.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\load_gltf_extras.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\meshlet.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\motion_blur.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\orthographic.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\parallax_mapping.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\parenting.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\pbr.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\post_processing.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\reflection_probes.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\render_to_texture.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\rotate_environment_map.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\shadow_biases.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\shadow_caster_receiver.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\skybox.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\spherical_area_lights.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\split_screen.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\spotlight.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\ssao.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\ssr.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\texture.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\tonemapping.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\transmission.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\transparency_3d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\two_passes.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\update_gltf_scene.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\vertex_colors.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\visibility_range.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\volumetric_fog.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\3d\wireframe.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\animation\animated_fox.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\animation\animated_transform.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\animation\animation_graph.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\animation\color_animation.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\animation\cubic_curve.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\animation\custom_skinned_mesh.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\animation\gltf_skinned_mesh.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\animation\morph_targets.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\app\custom_loop.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\app\drag_and_drop.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\app\empty.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\app\empty_defaults.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\app\headless.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\app\headless_renderer.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\app\logs.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\app\log_layers.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\app\log_layers_ecs.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\app\no_renderer.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\app\plugin.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\app\plugin_group.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\app\return_after_run.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\app\thread_pool_resources.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\app\without_winit.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\asset\asset_decompression.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\asset\asset_loading.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\asset\asset_settings.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\asset\custom_asset.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\asset\custom_asset_reader.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\asset\embedded_asset.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\asset\extra_source.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\asset\hot_asset_reloading.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\asset\multi_asset_sync.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\asset\processing\asset_processing.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\asset\repeated_texture.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\async_tasks\async_compute.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\async_tasks\external_source_external_thread.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\audio\audio.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\audio\audio_control.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\audio\decodable.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\audio\pitch.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\audio\soundtrack.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\audio\spatial_audio_2d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\audio\spatial_audio_3d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\camera\2d_top_down_camera.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\camera\first_person_view_model.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\dev_tools\fps_overlay.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\diagnostics\custom_diagnostic.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\diagnostics\log_diagnostics.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\change_detection.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\component_hooks.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\custom_query_param.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\custom_schedule.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\dynamic.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: to_owning_ptrs, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\dynamic.rs 

Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\ecs_guide.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\event.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\fixed_timestep.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\generic_system.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\hierarchy.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\iter_combinations.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\nondeterministic_system_order.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\observers.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\observer_propagation.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\one_shot_systems.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\parallel_query.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\removal_detection.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\run_conditions.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\send_and_receive_events.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\startup_system.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\system_closure.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\system_param.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\system_piping.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ecs\system_stepping.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\games\alien_cake_addict.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\games\breakout.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\games\contributors.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\games\desk_toy.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\games\game_menu.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\games\loading_screen.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\games\stepping.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\gizmos\2d_gizmos.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\gizmos\3d_gizmos.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\gizmos\axes.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\gizmos\light_gizmos.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\hello_world.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\helpers\camera_controller.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\input\char_input_events.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\input\gamepad_input.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\input\gamepad_input_events.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\input\gamepad_rumble.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\input\keyboard_input.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\input\keyboard_input_events.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\input\keyboard_modifiers.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\input\mouse_grab.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\input\mouse_input.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\input\mouse_input_events.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\input\text_input.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\input\touch_input.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\input\touch_input_events.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\math\cubic_splines.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\math\custom_primitives.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\math\random_sampling.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\math\render_primitives.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\math\sampling_primitives.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\mobile\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\movement\physics_in_fixed_timestep.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\movement\smooth_follow.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\reflection\custom_attributes.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\reflection\dynamic_types.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\reflection\function_reflection.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\reflection\generic_reflection.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\reflection\reflection.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\reflection\reflection_types.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\reflection\type_data.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\scene\scene.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\shader\animate_shader.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\shader\array_texture.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\shader\compute_shader_game_of_life.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\shader\custom_phase_item.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\shader\custom_post_processing.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\shader\custom_vertex_attribute.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\shader\extended_material.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\shader\fallback_image.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\shader\gpu_readback.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\shader\shader_defs.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\shader\shader_instancing.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\shader\shader_material.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\shader\shader_material_2d.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\shader\shader_material_glsl.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\shader\shader_material_screenspace_texture.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\shader\shader_prepass.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\shader\specialized_mesh_pipeline.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\shader\texture_binding_array.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\state\computed_states.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\state\custom_transitions.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\state\states.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\state\sub_states.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\stress_tests\bevymark.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\stress_tests\many_animated_sprites.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\stress_tests\many_buttons.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\stress_tests\many_cubes.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\stress_tests\many_foxes.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\stress_tests\many_gizmos.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\stress_tests\many_glyphs.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\stress_tests\many_lights.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\stress_tests\many_sprites.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\stress_tests\text_pipeline.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\stress_tests\transform_hierarchy.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\time\time.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\time\timers.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\time\virtual_time.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\tools\gamepad_viewer.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\tools\scene_viewer\animation_plugin.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\tools\scene_viewer\main.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\tools\scene_viewer\morph_viewer_plugin.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\tools\scene_viewer\scene_viewer_plugin.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\transforms\3d_rotation.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\transforms\align.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\transforms\scale.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\transforms\transform.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\transforms\translation.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\borders.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\button.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\display_and_visibility.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\flex_layout.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\font_atlas_debug.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\grid.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\overflow.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\overflow_debug.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\relative_cursor_position.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\render_ui_to_texture.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\size_constraints.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\text.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\text_debug.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\text_wrap_debug.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\transparency_ui.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\ui.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\ui_material.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\ui_scaling.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\ui_texture_atlas.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\ui_texture_atlas_slice.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\ui_texture_slice.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\viewport_debug.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\window_fallthrough.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\ui\z_index.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\window\clear_color.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\window\custom_user_event.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\window\low_power.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\window\multiple_windows.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\window\scale_factor_override.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\window\screenshot.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\window\transparent_window.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\window\window_resizing.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\examples\window\window_settings.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tests\3d\no_prepass.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tests\ecs\ambiguity_detection.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tests\how_to_test_systems.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tests\window\change_window_mode.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tests\window\minimising.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tests\window\resizing.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\build-templated-pages\src\examples.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\build-templated-pages\src\features.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\build-templated-pages\src\main.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\build-wasm-example\src\main.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\ci\src\ci.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\ci\src\commands\bench_check.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\ci\src\commands\cfg_check.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\ci\src\commands\clippy.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\ci\src\commands\compile.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\ci\src\commands\compile_check.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\ci\src\commands\compile_fail.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\ci\src\commands\doc.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\ci\src\commands\doc_check.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\ci\src\commands\doc_test.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\ci\src\commands\example_check.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\ci\src\commands\format.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\ci\src\commands\lints.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\ci\src\commands\mod.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\ci\src\commands\test.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\ci\src\commands\test_check.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\ci\src\main.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\ci\src\prepare.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\compile_fail_utils\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\compile_fail_utils\tests\example.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\compile_fail_utils\tests\example_tests\basic_test.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\compile_fail_utils\tests\example_tests\import.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\compile_fail_utils\tests\example_tests\pass_test.rs
Processing file: overunsafe库\当前流行的rust库\bevy-main\bevy-main\tools\example-showcase\src\main.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_bench\benches\complex.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_bench\benches\empty.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_bench\benches\ripgrep.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_bench\benches\rustup.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_bench\benches\simple.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_bench\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\action.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\app_settings.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\arg.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\arg_group.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\arg_predicate.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\arg_settings.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\command.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\debug_asserts.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\ext.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\mod.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\os_str.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\possible_value.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\range.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\resettable.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\str.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\styled_str.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\styling.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\tests.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\value_hint.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\builder\value_parser.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\derive.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\error\context.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\error\format.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\error\kind.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\error\mod.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\macros.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\mkeymap.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\output\fmt.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\output\help.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\output\help_template.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\output\mod.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\output\textwrap\core.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\output\textwrap\mod.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\output\textwrap\word_separators.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\output\textwrap\wrap_algorithms.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\output\usage.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\parser\arg_matcher.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\parser\error.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\parser\features\mod.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\parser\features\suggestions.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\parser\matches\arg_matches.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\parser\matches\matched_arg.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\parser\matches\mod.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\parser\matches\value_source.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\parser\mod.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\parser\parser.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\parser\validator.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\util\any_value.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\util\color.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\util\flat_map.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\util\flat_set.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\util\graph.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\util\id.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\util\mod.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_builder\src\util\str_to_bool.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\examples\completion-derive.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\examples\completion.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\examples\dynamic.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\examples\exhaustive.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\src\dynamic\completer.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\src\dynamic\mod.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\src\dynamic\shells\bash.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\src\dynamic\shells\elvish.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\src\dynamic\shells\fish.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\src\dynamic\shells\mod.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\src\dynamic\shells\shell.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\src\dynamic\shells\zsh.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\src\generator\mod.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\src\generator\utils.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\src\macros.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\src\shells\bash.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\src\shells\elvish.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\src\shells\fish.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\src\shells\mod.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\src\shells\powershell.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\src\shells\shell.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\src\shells\zsh.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\tests\examples.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\tests\testsuite\bash.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\tests\testsuite\common.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\tests\testsuite\dynamic.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\tests\testsuite\elvish.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\tests\testsuite\fish.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\tests\testsuite\general.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\tests\testsuite\main.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\tests\testsuite\powershell.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete\tests\testsuite\zsh.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete_fig\examples\fig_completion.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete_fig\src\fig.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete_fig\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete_fig\tests\common.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete_fig\tests\fig.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete_nushell\examples\nushell_completion.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete_nushell\examples\sub_subcommands.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete_nushell\examples\test.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete_nushell\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete_nushell\tests\common.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete_nushell\tests\completion.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_complete_nushell\tests\nushell.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_derive\src\attr.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_derive\src\derives\args.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_derive\src\derives\into_app.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_derive\src\derives\mod.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_derive\src\derives\parser.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_derive\src\derives\subcommand.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_derive\src\derives\value_enum.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_derive\src\dummies.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_derive\src\item.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_derive\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_derive\src\macros.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_derive\src\utils\doc_comments.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_derive\src\utils\error.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_derive\src\utils\mod.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_derive\src\utils\spanned.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_derive\src\utils\ty.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_lex\src\ext.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: split_at, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_lex\src\ext.rs 

Found function with unsafe block in split_at:
File: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_lex\src\ext.rs
Start Line: 275, End Line: 284
/// Split an `OsStr`
///
/// # Safety
///
/// `index` must be at a valid UTF-8 boundary
pub(crate) unsafe fn split_at(os: &OsStr, index: usize) -> (&OsStr, &OsStr) {
    unsafe {
        let bytes = os.as_encoded_bytes();
        let (first, second) = bytes.split_at(index);
        (
            OsStr::from_encoded_bytes_unchecked(first),
            OsStr::from_encoded_bytes_unchecked(second),
        )
    }
}



Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_lex\src\lib.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: next_value_os, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_lex\src\lib.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: split_nonutf8_once, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_lex\src\lib.rs 

Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_lex\tests\testsuite\lexer.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_lex\tests\testsuite\main.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_lex\tests\testsuite\parsed.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_lex\tests\testsuite\shorts.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_mangen\examples\man.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_mangen\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_mangen\src\render.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_mangen\tests\testsuite\common.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_mangen\tests\testsuite\main.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\clap_mangen\tests\testsuite\roff.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\cargo-example-derive.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\cargo-example.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\demo.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\derive_ref\augment_args.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\derive_ref\augment_subcommands.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\derive_ref\flatten_hand_args.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\derive_ref\hand_subcommand.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\escaped-positional-derive.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\escaped-positional.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\find.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\git-derive.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\git.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\multicall-busybox.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\multicall-hostname.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\pacman.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\repl-derive.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\repl.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_builder\01_quick.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_builder\02_apps.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_builder\02_app_settings.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_builder\02_crate.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_builder\03_01_flag_bool.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_builder\03_01_flag_count.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_builder\03_02_option.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_builder\03_02_option_mult.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_builder\03_03_positional.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_builder\03_03_positional_mult.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_builder\03_04_subcommands.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_builder\03_05_default_values.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_builder\04_01_enum.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_builder\04_01_possible.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_builder\04_02_parse.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_builder\04_02_validate.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_builder\04_03_relations.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_builder\04_04_custom.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_builder\05_01_assert.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_derive\01_quick.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_derive\02_apps.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_derive\02_app_settings.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_derive\02_crate.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_derive\03_01_flag_bool.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_derive\03_01_flag_count.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_derive\03_02_option.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_derive\03_02_option_mult.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_derive\03_03_positional.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_derive\03_03_positional_mult.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_derive\03_04_subcommands.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_derive\03_04_subcommands_alt.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_derive\03_05_default_values.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_derive\04_01_enum.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_derive\04_02_parse.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_derive\04_02_validate.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_derive\04_03_relations.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_derive\04_04_custom.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\tutorial_derive\05_01_assert.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\examples\typed-derive.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\bin\stdio-fixture.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_cookbook\cargo_example.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_cookbook\cargo_example_derive.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_cookbook\escaped_positional.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_cookbook\escaped_positional_derive.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_cookbook\find.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_cookbook\git.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_cookbook\git_derive.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_cookbook\mod.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_cookbook\multicall_busybox.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_cookbook\multicall_hostname.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_cookbook\pacman.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_cookbook\repl.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_cookbook\repl_derive.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_cookbook\typed_derive.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_derive\mod.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_derive\_tutorial\chapter_0.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_derive\_tutorial\chapter_1.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_derive\_tutorial\chapter_2.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_derive\_tutorial\chapter_3.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_derive\_tutorial\chapter_4.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_derive\_tutorial\chapter_5.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_derive\_tutorial\mod.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_faq.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_features.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_tutorial\chapter_0.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_tutorial\chapter_1.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_tutorial\chapter_2.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_tutorial\chapter_3.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_tutorial\chapter_4.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_tutorial\chapter_5.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\src\_tutorial\mod.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\action.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\app_settings.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\arg_aliases.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\arg_aliases_short.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\arg_matches.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\borrowed.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\cargo.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\command.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\conflicts.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\default_missing_vals.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\default_vals.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\delimiters.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\derive_order.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\display_order.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\double_require.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\empty_values.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\env.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\error.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\flags.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\flag_subcommands.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\global_args.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\groups.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\help.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\help_env.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\hidden_args.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\ignore_errors.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\indices.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\main.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\multiple_occurrences.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\multiple_values.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\occurrences.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\opts.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\positionals.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\posix_compatible.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\possible_values.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\propagate_globals.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\require.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\subcommands.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\template_help.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\tests.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\unicode.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\unique_args.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\utf16.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\utf8.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\utils.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\builder\version.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\app_name.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\arguments.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\author_version_about.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\basic.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\boxed.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\custom_string_parsers.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\default_value.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\deny_warnings.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\doc_comments_help.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\explicit_name_no_renaming.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\flags.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\flatten.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\generic.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\groups.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\help.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\issues.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\macros.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\main.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\naming.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\nested_subcommands.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\non_literal_attributes.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\occurrences.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\options.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\privacy.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\raw_bool_literal.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\raw_idents.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\rename_all_env.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\skip.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\subcommands.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\type_alias_regressions.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\utf8.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\utils.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive\value_enum.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\bool_value_enum.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\clap_empty_attr.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\default_values_t_invalid.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\default_value_t_invalid.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\enum_flatten.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\enum_variant_not_args.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\external_subcommand_misuse.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\external_subcommand_wrong_type.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\flatten_and_methods.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\flatten_enum_in_struct.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\flatten_struct_in_enum.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\group_name_attribute.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\multiple_external_subcommand.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\non_existent_attr.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\rename_all_wrong_casing.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\skip_flatten.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\skip_subcommand.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\skip_without_default.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\skip_with_other_options.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\struct_subcommand.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\subcommand_and_flatten.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\subcommand_and_methods.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\subcommand_on_struct.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\subcommand_opt_opt.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\subcommand_opt_vec.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\tuple_struct.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\value_enum_non_unit.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui\value_enum_on_struct.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\derive_ui.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\examples.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\macros.rs
Processing file: overunsafe库\当前流行的rust库\clap-master\clap-master\tests\ui.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\associations\belongs_to.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\associations\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\backend.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\connection\instrumentation.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\connection\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\connection\statement_cache.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\connection\transaction_manager.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\data_types.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\deserialize.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\doctest_setup.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\array_comparison.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\assume_not_null.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\bound.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\case_when.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\coerce.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\count.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\exists.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\functions\aggregate_folding.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\functions\aggregate_ordering.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\functions\date_and_time.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\functions\helper_types.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\functions\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\grouped.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\helper_types.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\not.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\nullable.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\operators.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\ops\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\ops\numeric.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\select_by.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\sql_literal.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\subselect.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression\unstable.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression_methods\bool_expression_methods.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression_methods\eq_all.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression_methods\escape_expression_methods.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression_methods\global_expression_methods.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression_methods\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\expression_methods\text_expression_methods.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\insertable.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\internal\alias_macro.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\internal\derives.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\internal\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\internal\operators_macro.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\internal\table_macro.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\macros\internal.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\macros\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\macros\ops.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\macros\static_cond.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\migration\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\backend.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\bind.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: true, name: populate_dynamic_buffers, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\bind.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: populate_dynamic_buffers, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\bind.rs 

Found method with unsafe block in populate_dynamic_buffers:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\bind.rs
Start Line: 67, End Line: 82
pub(super) fn populate_dynamic_buffers(
    &mut self,
    stmt: &StatementUse<'_>,
) -> QueryResult<()> {
    for (i, data) in self.0.data.iter_mut().enumerate() {
        data.did_numeric_overflow_occur()?;
        unsafe {
            if let Some((mut bind, offset)) = data.bind_for_truncated_data() {
                stmt.fetch_column(&mut bind, i, offset)?
            } else {
                data.update_buffer_length()
            }
        }
    }
    unsafe { self.with_mysql_binds(|bind_ptr| stmt.bind_result(bind_ptr)) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: input_bind, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\bind.rs 

Found function with unsafe block in input_bind:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\bind.rs
Start Line: 1253, End Line: 1301
fn input_bind(
    query: &'static str,
    conn: &MysqlConnection,
    id: i32,
    (mut field, tpe): (Vec<u8>, impl Into<(ffi::enum_field_types, Flags)>),
) {
    let mut stmt = conn.raw_connection.prepare(query).unwrap();
    let length = field.len() as _;
    let (tpe, flags) = tpe.into();
    let capacity = field.capacity();
    let ptr = NonNull::new(field.as_mut_ptr());
    mem::forget(field);
    let field_bind = BindData {
        tpe,
        bytes: ptr,
        capacity,
        length,
        flags,
        is_null: ffi::FALSE,
        is_truncated: None,
    };
    let mut bytes = id.to_be_bytes().to_vec();
    let length = bytes.len() as _;
    let capacity = bytes.capacity();
    let ptr = NonNull::new(bytes.as_mut_ptr());
    mem::forget(bytes);
    let id_bind = BindData {
        tpe: ffi::enum_field_types::MYSQL_TYPE_LONG,
        bytes: ptr,
        capacity,
        length,
        flags: Flags::empty(),
        is_null: ffi::FALSE,
        is_truncated: None,
    };
    let binds = PreparedStatementBinds(Binds {
        data: vec![id_bind, field_bind],
    });
    stmt.input_bind(binds).unwrap();
    stmt.did_an_error_occur().unwrap();
    let stmt = MaybeCached::CannotCache(stmt);
    unsafe {
        stmt.execute().unwrap();
    }
}



Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: last_error_message, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs 

Found method with unsafe block in last_error_message:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs
Start Line: 99, End Line: 103
pub(super) fn last_error_message(&self) -> String {
    unsafe { CStr::from_ptr(ffi::mysql_error(self.0.as_ptr())) }
        .to_string_lossy()
        .into_owned()
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: enable_multi_statements, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: enable_multi_statements, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs 

Found method with unsafe block in enable_multi_statements:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs
Start Line: 119, End Line: 142
pub(super) fn enable_multi_statements<T, F>(&self, f: F) -> QueryResult<T>
where
    F: FnOnce() -> QueryResult<T>,
{
    unsafe {
        ffi::mysql_set_server_option(
            self.0.as_ptr(),
            ffi::enum_mysql_set_option::MYSQL_OPTION_MULTI_STATEMENTS_ON,
        );
    }
    self.did_an_error_occur()?;
    let result = f();
    unsafe {
        ffi::mysql_set_server_option(
            self.0.as_ptr(),
            ffi::enum_mysql_set_option::MYSQL_OPTION_MULTI_STATEMENTS_OFF,
        );
    }
    self.did_an_error_occur()?;
    result
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: consume_current_result, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs 

Found method with unsafe block in consume_current_result:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs
Start Line: 180, End Line: 188
fn consume_current_result(&self) -> QueryResult<()> {
    unsafe {
        let res = ffi::mysql_store_result(self.0.as_ptr());
        if !res.is_null() {
            ffi::mysql_free_result(res);
        }
    }
    self.did_an_error_occur()
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: more_results, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs 

Found method with unsafe block in more_results:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs
Start Line: 190, End Line: 192
fn more_results(&self) -> bool {
    unsafe { ffi::mysql_more_results(self.0.as_ptr()) != ffi_false() }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: next_result, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs 

Found method with unsafe block in next_result:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs
Start Line: 194, End Line: 197
fn next_result(&self) -> QueryResult<()> {
    unsafe { ffi::mysql_next_result(self.0.as_ptr()) };
    self.did_an_error_occur()
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_ssl_mode, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs 

Found method with unsafe block in set_ssl_mode:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs
Start Line: 199, End Line: 210
fn set_ssl_mode(&self, ssl_mode: mysqlclient_sys::mysql_ssl_mode) {
    let v = ssl_mode as u32;
    let v_ptr: *const u32 = &v;
    let n = ptr::NonNull::new(v_ptr as *mut u32).expect("NonNull::new failed");
    unsafe {
        mysqlclient_sys::mysql_options(
            self.0.as_ptr(),
            mysqlclient_sys::mysql_option::MYSQL_OPT_SSL_MODE,
            n.as_ptr() as *const std::ffi::c_void,
        )
    };
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_ssl_ca, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs 

Found method with unsafe block in set_ssl_ca:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs
Start Line: 212, End Line: 220
fn set_ssl_ca(&self, ssl_ca: &CStr) {
    unsafe {
        mysqlclient_sys::mysql_options(
            self.0.as_ptr(),
            mysqlclient_sys::mysql_option::MYSQL_OPT_SSL_CA,
            ssl_ca.as_ptr() as *const std::ffi::c_void,
        )
    };
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_ssl_cert, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs 

Found method with unsafe block in set_ssl_cert:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs
Start Line: 222, End Line: 230
fn set_ssl_cert(&self, ssl_cert: &CStr) {
    unsafe {
        mysqlclient_sys::mysql_options(
            self.0.as_ptr(),
            mysqlclient_sys::mysql_option::MYSQL_OPT_SSL_CERT,
            ssl_cert.as_ptr() as *const std::ffi::c_void,
        )
    };
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_ssl_key, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs 

Found method with unsafe block in set_ssl_key:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs
Start Line: 232, End Line: 240
fn set_ssl_key(&self, ssl_key: &CStr) {
    unsafe {
        mysqlclient_sys::mysql_options(
            self.0.as_ptr(),
            mysqlclient_sys::mysql_option::MYSQL_OPT_SSL_KEY,
            ssl_key.as_ptr() as *const std::ffi::c_void,
        )
    };
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: perform_thread_unsafe_library_initialization, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs 

Found function with unsafe block in perform_thread_unsafe_library_initialization:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\raw.rs
Start Line: 262, End Line: 277
fn perform_thread_unsafe_library_initialization() {
    MYSQL_THREAD_UNSAFE_INIT
        .call_once(|| {
            let error_code = unsafe {
                ffi::mysql_server_init(0, ptr::null_mut(), ptr::null_mut())
            };
            if error_code != 0 {
                panic!("Unable to perform MySQL global initialization");
            }
        })
}



Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\stmt\iterator.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: from_stmt, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\stmt\iterator.rs 

Found method with unsafe block in from_stmt:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\stmt\iterator.rs
Start Line: 21, End Line: 38
pub fn from_stmt(
    stmt: MaybeCached<'a, Statement>,
    types: &[Option<MysqlType>],
) -> QueryResult<Self> {
    let metadata = stmt.metadata()?;
    let mut output_binds = OutputBinds::from_output_types(types, &metadata);
    let mut stmt = stmt.execute_statement(&mut output_binds)?;
    let size = unsafe { stmt.result_size() }?;
    Ok(StatementIterator {
        metadata: Rc::new(metadata),
        last_row: Rc::new(RefCell::new(PrivateMysqlRow::Direct(output_binds))),
        len: size,
        stmt,
    })
}



Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\stmt\metadata.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\stmt\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: last_error_type, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\stmt\mod.rs 

Found method with unsafe block in last_error_type:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\stmt\mod.rs
Start Line: 96, End Line: 110
fn last_error_type(&self) -> DatabaseErrorKind {
    let last_error_number = unsafe { ffi::mysql_stmt_errno(self.stmt.as_ptr()) };
    match last_error_number {
        1062 | 1586 | 1859 => DatabaseErrorKind::UniqueViolation,
        1216 | 1217 | 1451 | 1452 | 1830 | 1834 => DatabaseErrorKind::ForeignKeyViolation,
        1792 => DatabaseErrorKind::ReadOnlyTransaction,
        1048 | 1364 => DatabaseErrorKind::NotNullViolation,
        3819 => DatabaseErrorKind::CheckViolation,
        1213 => DatabaseErrorKind::SerializationFailure,
        _ => DatabaseErrorKind::Unknown,
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: execute_statement, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\stmt\mod.rs 

Found method with unsafe block in execute_statement:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\stmt\mod.rs
Start Line: 121, End Line: 129
pub(super) fn execute_statement(
    self,
    binds: &mut OutputBinds,
) -> QueryResult<StatementUse<'a>> {
    unsafe {
        binds.with_mysql_binds(|bind_ptr| self.bind_result(bind_ptr))?;
        self.execute()
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: affected_rows, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\stmt\mod.rs 

Found method with unsafe block in affected_rows:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\stmt\mod.rs
Start Line: 156, End Line: 159
pub(in crate::mysql::connection) fn affected_rows(&self) -> usize {
    let affected_rows = unsafe {
        ffi::mysql_stmt_affected_rows(self.inner.stmt.as_ptr())
    };
    affected_rows as usize
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: populate_row_buffers, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\stmt\mod.rs 

Found method with unsafe block in populate_row_buffers:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\stmt\mod.rs
Start Line: 168, End Line: 179
pub(super) fn populate_row_buffers(
    &self,
    binds: &mut OutputBinds,
) -> QueryResult<Option<()>> {
    let next_row_result = unsafe { ffi::mysql_stmt_fetch(self.inner.stmt.as_ptr()) };
    match next_row_result as libc::c_uint {
        ffi::MYSQL_NO_DATA => Ok(None),
        ffi::MYSQL_DATA_TRUNCATED => binds.populate_dynamic_buffers(self).map(Some),
        0 => {
            binds.update_buffer_lengths();
            Ok(Some(()))
        }
        _error => self.inner.did_an_error_occur().map(Some),
    }
}



Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\connection\url.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\query_builder\limit_offset.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\query_builder\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\query_builder\query_fragment_impls.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\types\date_and_time\chrono.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\types\date_and_time\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\types\date_and_time\time.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\types\json.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\types\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\types\numeric.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\types\primitives.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\value.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: time_value, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\value.rs 

Found method with unsafe block in time_value:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\mysql\value.rs
Start Line: 43, End Line: 56
/// Checks that the type code is valid, and interprets the data as a
/// `MysqlTime` pointer
#[allow(dead_code, clippy::cast_ptr_alignment)]
#[allow(unsafe_code)]
pub(crate) fn time_value(&self) -> deserialize::Result<MysqlTime> {
    match self.tpe {
        MysqlType::Time
        | MysqlType::Date
        | MysqlType::DateTime
        | MysqlType::Timestamp => {
            let ptr = self.raw.as_ptr() as *const MysqlTime;
            let result = unsafe { ptr.read_unaligned() };
            if result.neg {
                Err("Negative dates/times are not yet supported".into())
            } else {
                Ok(result)
            }
        }
        _ => Err(self.invalid_type_code("timestamp")),
    }
}



Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\backend.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\copy.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: data_slice, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\copy.rs 

Found method with unsafe block in data_slice:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\copy.rs
Start Line: 59, End Line: 66
#[allow(unsafe_code)]
pub(crate) fn data_slice(&self) -> &[u8] {
    if !self.ptr.is_null() && self.offset < self.len {
        let slice = unsafe {
            std::slice::from_raw_parts(self.ptr as *const u8, self.len - 1)
        };
        &slice[self.offset..]
    } else {
        &[]
    }
}



Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\cursor.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\raw.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_notice_processor, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\raw.rs 

Found method with unsafe block in set_notice_processor:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\raw.rs
Start Line: 53, End Line: 61
pub(super) fn set_notice_processor(&self, notice_processor: NoticeProcessor) {
    unsafe {
        PQsetNoticeProcessor(
            self.internal_connection.as_ptr(),
            Some(notice_processor),
            ptr::null_mut(),
        );
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: transaction_status, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\raw.rs 

Found method with unsafe block in transaction_status:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\raw.rs
Start Line: 114, End Line: 116
/// This is reasonably inexpensive as it just accesses variables internal to the connection
/// that are kept up to date by the `ReadyForQuery` messages from the PG server
pub(super) fn transaction_status(&self) -> PgTransactionStatus {
    unsafe { PQtransactionStatus(self.internal_connection.as_ptr()) }.into()
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_next_result, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\raw.rs 

Found method with unsafe block in get_next_result:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\raw.rs
Start Line: 122, End Line: 130
pub(crate) fn get_next_result(&self) -> Result<Option<PgResult>, Error> {
    let res = unsafe { PQgetResult(self.internal_connection.as_ptr()) };
    if res.is_null() {
        Ok(None)
    } else {
        let raw = RawResult::new(res, self)?;
        Ok(Some(PgResult::new(raw, self)?))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: enable_row_by_row_mode, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\raw.rs 

Found method with unsafe block in enable_row_by_row_mode:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\raw.rs
Start Line: 132, End Line: 142
pub(crate) fn enable_row_by_row_mode(&self) -> QueryResult<()> {
    let res = unsafe { PQsetSingleRowMode(self.internal_connection.as_ptr()) };
    if res == 1 {
        Ok(())
    } else {
        Err(
            Error::DatabaseError(
                DatabaseErrorKind::Unknown,
                Box::new(self.last_error_message()),
            ),
        )
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: put_copy_data, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\raw.rs 

Found method with unsafe block in put_copy_data:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\raw.rs
Start Line: 144, End Line: 161
pub(super) fn put_copy_data(&mut self, buf: &[u8]) -> QueryResult<()> {
    for c in buf.chunks(i32::MAX as usize) {
        let res = unsafe {
            pq_sys::PQputCopyData(
                self.internal_connection.as_ptr(),
                c.as_ptr() as *const libc::c_char,
                c.len() as libc::c_int,
            )
        };
        if res != 1 {
            return Err(
                Error::DatabaseError(
                    DatabaseErrorKind::Unknown,
                    Box::new(self.last_error_message()),
                ),
            );
        }
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: finish_copy_from, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\raw.rs 

Found method with unsafe block in finish_copy_from:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\raw.rs
Start Line: 163, End Line: 183
pub(crate) fn finish_copy_from(&self, err: Option<String>) -> QueryResult<()> {
    let error = err
        .map(CString::new)
        .map(|r| {
            r.unwrap_or_else(|_| {
                CString::new("Error message contains a \\0 byte")
                    .expect("Does not contain a null byte")
            })
        });
    let error = error.as_ref().map(|l| l.as_ptr()).unwrap_or(std::ptr::null());
    let ret = unsafe { pq_sys::PQputCopyEnd(self.internal_connection.as_ptr(), error) };
    if ret == 1 {
        Ok(())
    } else {
        Err(
            Error::DatabaseError(
                DatabaseErrorKind::Unknown,
                Box::new(self.last_error_message()),
            ),
        )
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: error_message, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\raw.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: error_message, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\raw.rs 

Found method with unsafe block in error_message:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\raw.rs
Start Line: 256, End Line: 260
pub(super) fn error_message(&self) -> &str {
    let ptr = unsafe { PQresultErrorMessage(self.0.as_ptr()) };
    let cstr = unsafe { CStr::from_ptr(ptr) };
    cstr.to_str().unwrap_or_default()
}



Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\result.rs
-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: rows_affected, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\result.rs 

Found method with unsafe block in rows_affected:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\result.rs
Start Line: 94, End Line: 108
pub(super) fn rows_affected(&self) -> usize {
    unsafe {
        let count_char_ptr = PQcmdTuples(self.internal_result.as_ptr());
        let count_bytes = CStr::from_ptr(count_char_ptr).to_bytes();
        let count_str = str::from_utf8_unchecked(count_bytes);
        match count_str {
            "" => 0,
            _ => {
                count_str
                    .parse()
                    .expect("Error parsing `rows_affected` as integer value")
            }
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: column_type, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\result.rs 

Found method with unsafe block in column_type:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\result.rs
Start Line: 143, End Line: 149
pub(in crate::pg) fn column_type(&self, col_idx: usize) -> NonZeroU32 {
    let type_oid = unsafe {
        PQftype(self.internal_result.as_ptr(), col_idx as libc::c_int)
    };
    NonZeroU32::new(type_oid)
        .expect(
            "Got a zero oid from postgres. If you see this error message \
             please report it as issue on the diesel github bug tracker.",
        )
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: column_name, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\result.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: column_name, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\result.rs 

Found method with unsafe block in column_name:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\result.rs
Start Line: 152, End Line: 180
#[inline(always)]
pub(super) fn column_name(&self, col_idx: usize) -> Option<&str> {
    self.column_name_map
        .get_or_init(|| {
            (0..self.column_count)
                .map(|idx| unsafe {
                    let ptr = PQfname(self.internal_result.as_ptr(), idx as libc::c_int);
                    if ptr.is_null() {
                        None
                    } else {
                        Some(
                            CStr::from_ptr(ptr)
                                .to_str()
                                .expect(
                                    "Expect postgres field names to be UTF-8, because we \
                     requested UTF-8 encoding on connection setup",
                                ) as *const str,
                        )
                    }
                })
                .collect()
        })
        .get(col_idx)
        .and_then(|n| { n.map(|n: *const str| unsafe { &*n }) })
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_result_field, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\result.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_result_field, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\result.rs 

Found function with unsafe block in get_result_field:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\result.rs
Start Line: 237, End Line: 245
fn get_result_field<'a>(res: *mut PGresult, field: ResultField) -> Option<&'a str> {
    let ptr = unsafe { PQresultErrorField(res, field as libc::c_int) };
    if ptr.is_null() {
        return None;
    }
    let c_str = unsafe { CStr::from_ptr(ptr) };
    c_str.to_str().ok()
}



Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\row.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\connection\stmt\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\expression\array.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\expression\array_comparison.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\expression\date_and_time.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\expression\expression_methods.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\expression\extensions\interval_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\expression\extensions\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\expression\extensions\only_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\expression\extensions\tablesample_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\expression\functions.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\expression\helper_types.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\expression\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\expression\operators.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\metadata_lookup.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\query_builder\copy\copy_from.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\query_builder\copy\copy_to.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\query_builder\copy\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\query_builder\distinct_on.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\query_builder\limit_offset.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\query_builder\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\query_builder\only.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\query_builder\on_constraint.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\query_builder\query_fragment_impls.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\query_builder\tablesample.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\serialize\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\serialize\write_tuple.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\transaction.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\array.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\date_and_time\chrono.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\date_and_time\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\date_and_time\quickcheck_impls.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\date_and_time\std_time.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\date_and_time\time.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\floats\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\floats\quickcheck_impls.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\integers.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\ipnet_address.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\json.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\mac_addr.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\money.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\network_address.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\numeric.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\primitives.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\ranges.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\record.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\types\uuid.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\value.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: for_test, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\value.rs 

Found method with unsafe block in for_test:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\pg\value.rs
Start Line: 57, End Line: 67
#[cfg(test)]
pub(crate) fn for_test(raw_value: &'a [u8]) -> Self {
    #[allow(unsafe_code)]
    static FAKE_OID: NonZeroU32 = unsafe { NonZeroU32::new_unchecked(42) };
    Self {
        raw_value,
        type_oid_lookup: &FAKE_OID,
    }
}



Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\ast_pass.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\bind_collector.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\clause_macro.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\collected_query.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\combination_clause.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\debug_query.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\delete_statement\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\distinct_clause.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\from_clause.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\functions.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\group_by_clause.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\having_clause.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\insert_statement\batch_insert.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\insert_statement\column_list.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\insert_statement\insert_from_select.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\insert_statement\insert_with_default_for_sqlite.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\insert_statement\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\limit_clause.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\limit_offset_clause.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\locking_clause.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\nodes\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\offset_clause.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\order_clause.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\query_id.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\returning_clause.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\select_clause.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\select_statement\boxed.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\select_statement\dsl_impls.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\select_statement\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\sql_query.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\update_statement\changeset.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\update_statement\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\update_statement\target.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\upsert\into_conflict_clause.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\upsert\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\upsert\on_conflict_actions.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\upsert\on_conflict_clause.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\upsert\on_conflict_target.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\upsert\on_conflict_target_decorations.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_builder\where_clause.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_dsl\belonging_to_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_dsl\boxed_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_dsl\combine_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_dsl\distinct_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_dsl\filter_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_dsl\group_by_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_dsl\having_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_dsl\join_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_dsl\limit_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_dsl\load_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_dsl\locking_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_dsl\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_dsl\nullable_select_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_dsl\offset_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_dsl\order_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_dsl\positional_order_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_dsl\save_changes_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_dsl\select_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_dsl\single_value_dsl.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_source\aliasing\alias.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_source\aliasing\aliased_field.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_source\aliasing\dsl_impls.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_source\aliasing\field_alias_mapper.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_source\aliasing\joins.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_source\aliasing\macros.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_source\aliasing\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_source\joins.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_source\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\query_source\peano_numbers.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\r2d2.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\result.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\row.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\serialize.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\backend.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\bind_collector.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: result_of, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\bind_collector.rs 

Found method with unsafe block in result_of:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\bind_collector.rs
Start Line: 128, End Line: 168
#[allow(unsafe_code)]
pub(in crate::sqlite) fn result_of(self, ctx: &mut libsqlite3_sys::sqlite3_context) {
    use libsqlite3_sys as ffi;
    use std::os::raw as libc;
    unsafe {
        match self {
            InternalSqliteBindValue::BorrowedString(s) => {
                ffi::sqlite3_result_text(
                    ctx,
                    s.as_ptr() as *const libc::c_char,
                    s.len() as libc::c_int,
                    ffi::SQLITE_TRANSIENT(),
                )
            }
            InternalSqliteBindValue::String(s) => {
                ffi::sqlite3_result_text(
                    ctx,
                    s.as_ptr() as *const libc::c_char,
                    s.len() as libc::c_int,
                    ffi::SQLITE_TRANSIENT(),
                )
            }
            InternalSqliteBindValue::Binary(b) => {
                ffi::sqlite3_result_blob(
                    ctx,
                    b.as_ptr() as *const libc::c_void,
                    b.len() as libc::c_int,
                    ffi::SQLITE_TRANSIENT(),
                )
            }
            InternalSqliteBindValue::BorrowedBinary(b) => {
                ffi::sqlite3_result_blob(
                    ctx,
                    b.as_ptr() as *const libc::c_void,
                    b.len() as libc::c_int,
                    ffi::SQLITE_TRANSIENT(),
                )
            }
            InternalSqliteBindValue::I32(i) => {
                ffi::sqlite3_result_int(ctx, i as libc::c_int)
            }
            InternalSqliteBindValue::I64(l) => ffi::sqlite3_result_int64(ctx, l),
            InternalSqliteBindValue::F64(d) => {
                ffi::sqlite3_result_double(ctx, d as libc::c_double)
            }
            InternalSqliteBindValue::Null => ffi::sqlite3_result_null(ctx),
        }
    }
}



Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\functions.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\owned_row.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: rows_affected_by_last_query, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs 

Found method with unsafe block in rows_affected_by_last_query:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs
Start Line: 83, End Line: 85
pub(super) fn rows_affected_by_last_query(&self) -> usize {
    unsafe { ffi::sqlite3_changes(self.internal_connection.as_ptr()) as usize }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: register_collation_function, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs 

Found method with unsafe block in register_collation_function:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs
Start Line: 157, End Line: 187
pub(super) fn register_collation_function<F>(
    &self,
    collation_name: &str,
    collation: F,
) -> QueryResult<()>
where
    F: Fn(&str, &str) -> std::cmp::Ordering + std::panic::UnwindSafe + Send + 'static,
{
    let callback_fn = Box::into_raw(
        Box::new(CollationUserPtr {
            callback: collation,
            collation_name: collation_name.to_owned(),
        }),
    );
    let collation_name = Self::get_fn_name(collation_name)?;
    let result = unsafe {
        ffi::sqlite3_create_collation_v2(
            self.internal_connection.as_ptr(),
            collation_name.as_ptr(),
            ffi::SQLITE_UTF8,
            callback_fn as *mut _,
            Some(run_collation_function::<F>),
            Some(destroy_boxed::<CollationUserPtr<F>>),
        )
    };
    let result = Self::process_sql_function_result(result);
    if result.is_err() {
        destroy_boxed::<CollationUserPtr<F>>(callback_fn as *mut _);
    }
    result
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: run_custom_function, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: run_custom_function, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: run_custom_function, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs 

-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: run_custom_function, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: run_custom_function, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: run_custom_function, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: run_custom_function, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs 

Found function with unsafe block in run_custom_function:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs
Start Line: 296, End Line: 354
#[allow(warnings)]
extern "C" fn run_custom_function<F, Ret, RetSqlType>(
    ctx: *mut ffi::sqlite3_context,
    num_args: libc::c_int,
    value_ptr: *mut *mut ffi::sqlite3_value,
)
where
    F: FnMut(&RawConnection, &mut [*mut ffi::sqlite3_value]) -> QueryResult<Ret>
        + std::panic::UnwindSafe + Send + 'static,
    Ret: ToSql<RetSqlType, Sqlite>,
    Sqlite: HasSqlType<RetSqlType>,
{
    use std::ops::Deref;
    static NULL_DATA_ERR: &str = "An unknown error occurred. sqlite3_user_data returned a null pointer. This should never happen.";
    static NULL_CONN_ERR: &str = "An unknown error occurred. sqlite3_context_db_handle returned a null pointer. This should never happen.";
    let conn = match unsafe { NonNull::new(ffi::sqlite3_context_db_handle(ctx)) } {
        Some(conn) => {
            mem::ManuallyDrop::new(RawConnection {
                internal_connection: conn,
            })
        }
        None => {
            unsafe { context_error_str(ctx, NULL_CONN_ERR) };
            return;
        }
    };
    let data_ptr = unsafe { ffi::sqlite3_user_data(ctx) };
    let mut data_ptr = match NonNull::new(data_ptr as *mut CustomFunctionUserPtr<F>) {
        None => {
            unsafe {
                context_error_str(ctx, NULL_DATA_ERR);
                return;
            }
        }
        Some(mut f) => f,
    };
    let data_ptr = unsafe { data_ptr.as_mut() };
    let callback = std::panic::AssertUnwindSafe(&mut data_ptr.callback);
    let result = std::panic::catch_unwind(move || {
            let _ = &callback;
            let args = unsafe { slice::from_raw_parts_mut(value_ptr, num_args as _) };
            let res = (callback.0)(&*conn, args)?;
            let value = process_sql_function_result(&res)?;
            unsafe {
                value.result_of(&mut *ctx);
            }
            Ok(())
        })
        .unwrap_or_else(|p| Err(
            SqliteCallbackError::Panic(data_ptr.function_name.clone()),
        ));
    if let Err(e) = result {
        e.emit(ctx);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: run_aggregator_step_function, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs 

Found function with unsafe block in run_aggregator_step_function:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs
Start Line: 366, End Line: 391
#[allow(warnings)]
extern "C" fn run_aggregator_step_function<ArgsSqlType, RetSqlType, Args, Ret, A>(
    ctx: *mut ffi::sqlite3_context,
    num_args: libc::c_int,
    value_ptr: *mut *mut ffi::sqlite3_value,
)
where
    A: SqliteAggregateFunction<Args, Output = Ret> + 'static + Send
        + std::panic::UnwindSafe,
    Args: FromSqlRow<ArgsSqlType, Sqlite>,
    Ret: ToSql<RetSqlType, Sqlite>,
    Sqlite: HasSqlType<RetSqlType>,
{
    let result = std::panic::catch_unwind(move || {
            let args = unsafe { slice::from_raw_parts_mut(value_ptr, num_args as _) };
            run_aggregator_step::<A, Args, ArgsSqlType>(ctx, args)
        })
        .unwrap_or_else(|e| {
            Err(
                SqliteCallbackError::Panic(
                    format!("{}::step() panicked", std::any::type_name::< A > ()),
                ),
            )
        });
    match result {
        Ok(()) => {}
        Err(e) => e.emit(ctx),
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: run_aggregator_step, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: run_aggregator_step, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs 

Found function with unsafe block in run_aggregator_step:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs
Start Line: 393, End Line: 450
fn run_aggregator_step<A, Args, ArgsSqlType>(
    ctx: *mut ffi::sqlite3_context,
    args: &mut [*mut ffi::sqlite3_value],
) -> Result<(), SqliteCallbackError>
where
    A: SqliteAggregateFunction<Args>,
    Args: FromSqlRow<ArgsSqlType, Sqlite>,
{
    static NULL_AG_CTX_ERR: &str = "An unknown error occurred. sqlite3_aggregate_context returned a null pointer. This should never happen.";
    static NULL_CTX_ERR: &str = "We've written the aggregator to the aggregate context, but it could not be retrieved.";
    let aggregate_context = unsafe {
        ffi::sqlite3_aggregate_context(
            ctx,
            std::mem::size_of::<OptionalAggregator<A>>() as i32,
        )
    };
    let aggregate_context = NonNull::new(
        aggregate_context as *mut OptionalAggregator<A>,
    );
    let aggregator = unsafe {
        match aggregate_context.map(|a| &mut *a.as_ptr()) {
            Some(&mut OptionalAggregator::Some(ref mut agg)) => agg,
            Some(a_ptr @ &mut OptionalAggregator::None) => {
                ptr::write_unaligned(
                    a_ptr as *mut _,
                    OptionalAggregator::Some(A::default()),
                );
                if let OptionalAggregator::Some(ref mut agg) = a_ptr {
                    agg
                } else {
                    return Err(SqliteCallbackError::Abort(NULL_CTX_ERR));
                }
            }
            None => {
                return Err(SqliteCallbackError::Abort(NULL_AG_CTX_ERR));
            }
        }
    };
    let args = build_sql_function_args::<ArgsSqlType, Args>(args)?;
    aggregator.step(args);
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: run_aggregator_final_function, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: run_aggregator_final_function, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: run_aggregator_final_function, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs 

Found function with unsafe block in run_aggregator_final_function:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs
Start Line: 452, End Line: 503
extern "C" fn run_aggregator_final_function<ArgsSqlType, RetSqlType, Args, Ret, A>(
    ctx: *mut ffi::sqlite3_context,
)
where
    A: SqliteAggregateFunction<Args, Output = Ret> + 'static + Send,
    Args: FromSqlRow<ArgsSqlType, Sqlite>,
    Ret: ToSql<RetSqlType, Sqlite>,
    Sqlite: HasSqlType<RetSqlType>,
{
    static NO_AGGREGATOR_FOUND: &str = "We've written to the aggregator in the xStep callback. If xStep was never called, then ffi::sqlite_aggregate_context() would have returned a NULL pointer.";
    let aggregate_context = unsafe { ffi::sqlite3_aggregate_context(ctx, 0) };
    let result = std::panic::catch_unwind(|| {
            let mut aggregate_context = NonNull::new(
                aggregate_context as *mut OptionalAggregator<A>,
            );
            let aggregator = if let Some(a) = aggregate_context.as_mut() {
                let a = unsafe { a.as_mut() };
                match std::mem::replace(a, OptionalAggregator::None) {
                    OptionalAggregator::None => {
                        return Err(SqliteCallbackError::Abort(NO_AGGREGATOR_FOUND));
                    }
                    OptionalAggregator::Some(a) => Some(a),
                }
            } else {
                None
            };
            let res = A::finalize(aggregator);
            let value = process_sql_function_result(&res)?;
            unsafe {
                value.result_of(&mut *ctx);
            }
            Ok(())
        })
        .unwrap_or_else(|_e| {
            Err(
                SqliteCallbackError::Panic(
                    format!("{}::finalize() panicked", std::any::type_name::< A > ()),
                ),
            )
        });
    if let Err(e) = result {
        e.emit(ctx);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: run_collation_function, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: run_collation_function, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs 

Found function with unsafe block in run_collation_function:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs
Start Line: 515, End Line: 603
#[allow(warnings)]
extern "C" fn run_collation_function<F>(
    user_ptr: *mut libc::c_void,
    lhs_len: libc::c_int,
    lhs_ptr: *const libc::c_void,
    rhs_len: libc::c_int,
    rhs_ptr: *const libc::c_void,
) -> libc::c_int
where
    F: Fn(&str, &str) -> std::cmp::Ordering + Send + std::panic::UnwindSafe + 'static,
{
    let user_ptr = user_ptr as *const CollationUserPtr<F>;
    let user_ptr = std::panic::AssertUnwindSafe(unsafe { user_ptr.as_ref() });
    let result = std::panic::catch_unwind(|| {
            let user_ptr = user_ptr
                .ok_or_else(|| {
                    SqliteCallbackError::Abort(
                        "Got a null pointer as data pointer. This should never happen",
                    )
                })?;
            for (ptr, len, side) in &[
                (rhs_ptr, rhs_len, "rhs"),
                (lhs_ptr, lhs_len, "lhs"),
            ] {
                if *len < 0 {
                    assert_fail!(
                        "An unknown error occurred. {}_len is negative. This should never happen.",
                        side
                    );
                }
                if ptr.is_null() {
                    assert_fail!(
                        "An unknown error occurred. {}_ptr is a null pointer. This should never happen.",
                        side
                    );
                }
            }
            let (rhs, lhs) = unsafe {
                (
                    str::from_utf8(
                        slice::from_raw_parts(rhs_ptr as *const u8, rhs_len as _),
                    ),
                    str::from_utf8(
                        slice::from_raw_parts(lhs_ptr as *const u8, lhs_len as _),
                    ),
                )
            };
            let rhs = rhs
                .map_err(|_| SqliteCallbackError::Abort(
                    "Got an invalid UTF-8 string for rhs",
                ))?;
            let lhs = lhs
                .map_err(|_| SqliteCallbackError::Abort(
                    "Got an invalid UTF-8 string for lhs",
                ))?;
            Ok((user_ptr.callback)(rhs, lhs))
        })
        .unwrap_or_else(|p| {
            Err(
                SqliteCallbackError::Panic(
                    user_ptr.map(|u| u.collation_name.clone()).unwrap_or_default(),
                ),
            )
        });
    match result {
        Ok(std::cmp::Ordering::Less) => -1,
        Ok(std::cmp::Ordering::Equal) => 0,
        Ok(std::cmp::Ordering::Greater) => 1,
        Err(SqliteCallbackError::Abort(a)) => {
            eprintln!(
                "Collation function {} failed with: {}", user_ptr.map(| c | & c
                .collation_name as & str).unwrap_or_default(), a
            );
            std::process::abort()
        }
        Err(SqliteCallbackError::DieselError(e)) => {
            eprintln!(
                "Collation function {} failed with: {}", user_ptr.map(| c | & c
                .collation_name as & str).unwrap_or_default(), e
            );
            std::process::abort()
        }
        Err(SqliteCallbackError::Panic(msg)) => {
            eprintln!("Collation function {} panicked", msg);
            std::process::abort()
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: destroy_boxed, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs 

Found function with unsafe block in destroy_boxed:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\raw.rs
Start Line: 605, End Line: 608
extern "C" fn destroy_boxed<F>(data: *mut libc::c_void) {
    let ptr = data as *mut F;
    unsafe { std::mem::drop(Box::from_raw(ptr)) };
}



Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\row.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\serialized_database.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\sqlite_value.rs
-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: parse_string, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\sqlite_value.rs 

Found method with unsafe block in parse_string:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\sqlite_value.rs
Start Line: 89, End Line: 99
pub(crate) fn parse_string<'value, R>(
    &'value self,
    f: impl FnOnce(&'value str) -> R,
) -> R {
    let s = unsafe {
        let ptr = ffi::sqlite3_value_text(self.value.as_ptr());
        let len = ffi::sqlite3_value_bytes(self.value.as_ptr());
        let bytes = slice::from_raw_parts(ptr, len as usize);
        str::from_utf8_unchecked(bytes)
    };
    f(s)
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: read_integer, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\sqlite_value.rs 

Found method with unsafe block in read_integer:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\sqlite_value.rs
Start Line: 119, End Line: 121
pub(crate) fn read_integer(&self) -> i32 {
    unsafe { ffi::sqlite3_value_int(self.value.as_ptr()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: read_long, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\sqlite_value.rs 

Found method with unsafe block in read_long:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\sqlite_value.rs
Start Line: 123, End Line: 125
pub(crate) fn read_long(&self) -> i64 {
    unsafe { ffi::sqlite3_value_int64(self.value.as_ptr()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: read_double, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\sqlite_value.rs 

Found method with unsafe block in read_double:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\sqlite_value.rs
Start Line: 127, End Line: 129
pub(crate) fn read_double(&self) -> f64 {
    unsafe { ffi::sqlite3_value_double(self.value.as_ptr()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: copy_from_ptr, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\sqlite_value.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: copy_from_ptr, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\sqlite_value.rs 

Found method with unsafe block in copy_from_ptr:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\sqlite_value.rs
Start Line: 151, End Line: 160
pub(super) fn copy_from_ptr(
    ptr: NonNull<ffi::sqlite3_value>,
) -> Option<OwnedSqliteValue> {
    let tpe = unsafe { ffi::sqlite3_value_type(ptr.as_ptr()) };
    if ffi::SQLITE_NULL == tpe {
        return None;
    }
    let value = unsafe { ffi::sqlite3_value_dup(ptr.as_ptr()) };
    Some(Self {
        value: NonNull::new(value)?,
    })
}



Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\statement_iterator.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: handle_duplicated_row_case, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\statement_iterator.rs 

Found method with unsafe block in handle_duplicated_row_case:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\statement_iterator.rs
Start Line: 18, End Line: 70
#[cold]
#[allow(unsafe_code)]
fn handle_duplicated_row_case(
    outer_last_row: &mut Rc<RefCell<PrivateSqliteRow<'stmt, 'query>>>,
    column_names: &mut Option<Rc<[Option<String>]>>,
    field_count: usize,
) -> Option<QueryResult<SqliteRow<'stmt, 'query>>> {
    let last_row = {
        let mut last_row = match outer_last_row.try_borrow_mut() {
            Ok(o) => o,
            Err(_e) => {
                return Some(
                    Err(
                        crate::result::Error::DeserializationError(
                            "Failed to reborrow row. Try to release any `SqliteField` or `SqliteValue` \
                                     that exists at this point"
                                .into(),
                        ),
                    ),
                );
            }
        };
        let last_row = &mut *last_row;
        let duplicated = last_row.duplicate(column_names);
        std::mem::replace(last_row, duplicated)
    };
    if let PrivateSqliteRow::Direct(mut stmt) = last_row {
        let res = unsafe { stmt.step(false) };
        *outer_last_row = Rc::new(RefCell::new(PrivateSqliteRow::Direct(stmt)));
        match res {
            Err(e) => Some(Err(e)),
            Ok(false) => None,
            Ok(true) => {
                Some(
                    Ok(SqliteRow {
                        inner: Rc::clone(outer_last_row),
                        field_count,
                    }),
                )
            }
        }
    } else {
        unreachable!(
            "You've reached an impossible internal state. \
                             If you ever see this error message please open \
                             an issue at https://github.com/diesel-rs/diesel \
                             providing example code how to trigger this error."
        )
    }
}



Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\stmt.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: raw_connection, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\stmt.rs 

Found method with unsafe block in raw_connection:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\stmt.rs
Start Line: 158, End Line: 160
fn raw_connection(&self) -> *mut ffi::sqlite3 {
    unsafe { ffi::sqlite3_db_handle(self.inner_statement.as_ptr()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: last_error_code, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\stmt.rs 

Found function with unsafe block in last_error_code:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\stmt.rs
Start Line: 194, End Line: 196
fn last_error_code(conn: *mut ffi::sqlite3) -> libc::c_int {
    unsafe { ffi::sqlite3_extended_errcode(conn) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: bind_buffers, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\stmt.rs 

Found method with unsafe block in bind_buffers:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\stmt.rs
Start Line: 281, End Line: 330
fn bind_buffers(
    &mut self,
    binds: Vec<(InternalSqliteBindValue<'_>, SqliteType)>,
) -> QueryResult<()> {
    self.binds_to_free
        .reserve(
            binds
                .iter()
                .filter(|&(b, _)| {
                    matches!(
                        b, InternalSqliteBindValue::BorrowedBinary(_) |
                        InternalSqliteBindValue::BorrowedString(_) |
                        InternalSqliteBindValue::String(_) |
                        InternalSqliteBindValue::Binary(_)
                    )
                })
                .count(),
        );
    for (bind_idx, (bind, tpe)) in (1..).zip(binds) {
        let is_borrowed_bind = matches!(
            bind, InternalSqliteBindValue::BorrowedString(_) |
            InternalSqliteBindValue::BorrowedBinary(_)
        );
        let res = unsafe { self.statement.bind(tpe, bind, bind_idx) }?;
        if let Some(ptr) = res {
            self.binds_to_free.push((bind_idx, Some(ptr)));
        } else if is_borrowed_bind {
            self.binds_to_free.push((bind_idx, None));
        }
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: finish_query_with_error, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\stmt.rs 

Found method with unsafe block in finish_query_with_error:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\stmt.rs
Start Line: 332, End Line: 344
fn finish_query_with_error(mut self, e: &Error) {
    self.has_error = true;
    if let Some(q) = self.query {
        let q = unsafe { q.as_ref() };
        self.instrumentation
            .on_connection_event(crate::connection::InstrumentationEvent::FinishQuery {
                query: &crate::debug_query(&q),
                error: Some(e),
            });
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: column_value, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\stmt.rs 

Found method with unsafe block in column_value:
File: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\connection\stmt.rs
Start Line: 508, End Line: 513
pub(super) fn column_value(&self, idx: i32) -> Option<NonNull<ffi::sqlite3_value>> {
    let ptr = unsafe {
        ffi::sqlite3_column_value(self.statement.statement.inner_statement.as_ptr(), idx)
    };
    NonNull::new(ptr)
}



Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\expression\expression_methods.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\expression\helper_types.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\expression\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\expression\operators.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\query_builder\limit_offset.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\query_builder\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\query_builder\query_fragment_impls.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\query_builder\returning.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\types\date_and_time\chrono.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\types\date_and_time\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\types\date_and_time\time.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\types\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sqlite\types\numeric.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sql_types\fold.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sql_types\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sql_types\ops.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\sql_types\ord.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\test_helpers.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\type_impls\date_and_time.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\type_impls\decimal.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\type_impls\json.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\type_impls\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\type_impls\option.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\type_impls\primitives.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\type_impls\tuples.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\upsert\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\upsert\on_conflict_docs_setup.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\upsert\on_conflict_extension.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel\src\util.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_bench\benches\diesel_async_benches.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_bench\benches\diesel_benches.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_bench\benches\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_bench\benches\mysql_benches.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_bench\benches\postgres_benches.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_bench\benches\quaint_benches.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_bench\benches\rusqlite_benches.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_bench\benches\rust_orm_benches.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_bench\benches\sea_orm_benches\comments.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_bench\benches\sea_orm_benches\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_bench\benches\sea_orm_benches\posts.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_bench\benches\sea_orm_benches\users.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_bench\benches\sqlx_benches.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_bench\benches\tokio_postgres_benches.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_bench\benches\wtx.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_bench\build.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\src\cli.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\src\config.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\src\database.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\src\errors.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\src\infer_schema_internals\data_structures.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\src\infer_schema_internals\foreign_keys.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\src\infer_schema_internals\inference.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\src\infer_schema_internals\information_schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\src\infer_schema_internals\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\src\infer_schema_internals\mysql.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\src\infer_schema_internals\pg.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\src\infer_schema_internals\sqlite.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\src\infer_schema_internals\table_data.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\src\main.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\src\migrations\diff_schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\src\migrations\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\src\print_schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\src\query_helper.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\completion_generation.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\database_drop.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\database_reset.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\database_setup.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\database_url_errors.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\exit_codes.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\generate_migrations\diff_add_table\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\generate_migrations\diff_add_table_all_the_types\mysql\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\generate_migrations\diff_add_table_all_the_types\postgres\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\generate_migrations\diff_add_table_all_the_types\sqlite\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\generate_migrations\diff_add_table_composite_key\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\generate_migrations\diff_add_table_sqlite_rowid_column\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\generate_migrations\diff_add_table_with_fk\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\generate_migrations\diff_alter_table_add_column\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\generate_migrations\diff_alter_table_drop_column\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\generate_migrations\diff_drop_table\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\generate_migrations\diff_drop_table_all_the_types\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\generate_migrations\diff_drop_table_composite_key\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\generate_migrations\diff_drop_table_with_fk\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\generate_migrations\diff_except_tables\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\generate_migrations\diff_only_tables\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\migration_generate.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\migration_list.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\migration_redo.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\migration_revert.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\migration_run.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\print_schema\print_schema_respects_type_name_case\postgres\expected.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\print_schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\setup.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\support\command.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\support\database.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\support\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\support\mysql_database.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\support\postgres_database.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\support\project_builder.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\support\sqlite_database.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_cli\tests\tests.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\aggregate_expression_requires_column_from_same_table.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\alias_and_group_by.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\any_is_only_selectable_if_inner_expr_is_selectable.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\array_expressions_must_be_correct_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\array_expressions_must_be_same_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\array_only_usable_with_pg.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\auto_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\auto_type_life_times.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\boxed_queries_and_group_by.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\boxed_queries_must_be_used_with_proper_connection.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\boxed_queries_require_selectable_expression_for_filter.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\boxed_queries_require_selectable_expression_for_order.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\broken_queryable_by_name.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\cannot_join_to_non_joinable_table.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\cannot_load_default_select_with_group_by.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\cannot_mix_aggregate_and_non_aggregate_selects.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\cannot_pass_aggregate_to_where.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\cannot_update_target_with_methods_other_than_filter_called.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\cannot_use_expression_methods_on_tuples.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\check_message_for_to_many_columns.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\codegen_does_not_add_save_changes_method_on_structs_without_primary_key.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\columns_cannot_be_rhs_of_insert.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\combinations_require_same_sql_types.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\copy_can_only_be_used_with_postgres_connections.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\copy_can_only_use_options_with_raw_variant.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\custom_returning_requires_nonaggregate.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\custom_returning_requires_selectable_expression.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\delete_statement_does_not_support_returning_methods_on_sqlite.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\aliases.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\associations_without_belongs_to.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\as_changeset_struct_with_only_primary_key.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\as_expression_without_sql_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\bad_aggregate.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\bad_belongs_to.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\bad_column_name.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\bad_derive_input.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\bad_deserialize_as.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\bad_embed.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\bad_embed_treat_none_as_default_value.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\bad_foreign_derive.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\bad_insertable.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\bad_mysql_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\bad_not_sized.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\bad_postgres_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\bad_primary_key.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\bad_serialize_as.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\bad_sqlite_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\bad_sql_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\bad_table_name.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\bad_treat_none_as_default_value.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\bad_treat_none_as_null.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\belongs_to_incorrect_lifetime_syntax.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\belongs_to_missing_foreign_key_column.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\belongs_to_missing_foreign_key_field.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\belongs_to_missing_parent_import.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\belongs_to_second_parent.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\embed_and_serialize_as_cannot_be_mixed.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\empty_struct.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\identifiable_missing_pk_field.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\multiple_table_names.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\no_column.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\no_table.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\queryable_by_name_requires_table_name_or_sql_type_annotation.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\queryable_type_mismatch.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\selectable.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\tuple_struct.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive\unknown_attribute.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive_deprecated\deprecated_belongs_to.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive_deprecated\deprecated_changeset_options.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive_deprecated\deprecated_column_name.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive_deprecated\deprecated_mysql_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive_deprecated\deprecated_postgres_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive_deprecated\deprecated_primary_key.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive_deprecated\deprecated_sqlite_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive_deprecated\deprecated_sql_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\derive_deprecated\deprecated_table_name.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\distinct_on_allows_only_fields_of_table.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\distinct_on_clause_only_supported_for_pg.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\distinct_on_requires_matching_order_clause.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\ensure_sqlite_cannot_access_memory_of_dropped_bind.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\exists_can_only_take_subselects.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\expressions_can_only_be_compared_for_equality_to_expressions_of_same_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\filter_cannot_take_comparison_for_columns_from_another_table.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\filter_requires_bool_nonaggregate_expression.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\find_requires_correct_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\having_cant_be_used_without_group_by.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\ilike_only_compiles_for_pg.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\insert_cannot_reference_columns_from_other_table.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\insert_from_select_cant_be_used_with_tuples_or_arrays.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\insert_from_select_requires_valid_column_list.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\insert_from_select_with_on_conflict_without_where_clause_not_supported_on_sqlite.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\insert_on_conflict_do_update_where_not_supported_on_sqlite.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\insert_requires_value_of_same_type_as_column.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\insert_statement_does_not_support_returning_methods_on_sqlite.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\invalid_group_by.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\invalid_joins.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\join_with_explicit_on_requires_valid_boolean_expression.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\must_use_query_methods.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\mysql_does_not_support_offset_without_limit.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\mysql_on_conflict_tests.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\numeric_ops_require_numeric_column.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\only_only_on_table.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\ordering_functions_require_ord.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\order_requires_column_from_same_table.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\pg_on_conflict_requires_valid_conflict_target.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\pg_specific_binary_expressions_only_usable_with_pg.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\pg_specific_expressions_cant_be_used_in_a_sqlite_query.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\pg_specific_tablesample_cannot_be_used_on_mysql.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\pg_specific_tablesample_cannot_be_used_on_sqlite.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\pg_upsert_do_update_requires_valid_update.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\queryable_with_typemismatch.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\returning_cannot_be_called_twice.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\returning_clause_requires_selectable_expression.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\right_side_of_left_join_requires_nullable.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\selectable.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\selectable_with_typemisamatch.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\selecting_multiple_columns_requires_all_must_be_from_selectable_table.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\select_carries_correct_result_type_info.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\select_for_update_cannot_be_mixed_with_some_clauses.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\select_for_update_cannot_be_used_on_sqlite.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\select_for_update_no_wait_cannot_be_used_on_sqlite.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\select_for_update_skip_locked_cannot_be_used_on_sqlite.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\select_requires_column_from_same_table.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\select_requires_valid_grouping.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\select_sql_still_ensures_result_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\sqlite_and_mysql_do_not_allow_multiple_iterators.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\sqlite_insert_or_ignore_cannot_be_used_on_pg.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\sqlite_upsert_cannot_be_used_on_pg.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\subselect_cannot_reference_random_tables.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\subselect_requires_correct_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\table_column_names.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\table_invalid_syntax_1.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\table_invalid_syntax_2.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\table_without_primary_key.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\update_requires_column_be_from_same_table.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\update_requires_left_side_of_eq_to_be_a_column.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\update_requires_set.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\update_requires_valid_where_clause.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\update_statement_does_not_support_returning_methods_on_sqlite.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\upsert_with_multiple_values_not_supported_on_sqlite.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\user_defined_functions_follow_same_selection_rules.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\fail\valid_grouping_and_boxed_expressions.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_compile_tests\tests\trybuild.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\associations.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\as_changeset.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\as_expression.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\attrs.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\deprecated\belongs_to.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\deprecated\changeset_options.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\deprecated\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\deprecated\postgres_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\deprecated\primary_key.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\deprecated\utils.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\diesel_for_each_tuple.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\diesel_numeric_ops.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\diesel_public_if.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\field.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\from_sql_row.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\identifiable.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\insertable.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\model.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\multiconnection.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\parsers\belongs_to.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\parsers\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\parsers\mysql_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\parsers\postgres_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\parsers\sqlite_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\queryable.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\queryable_by_name.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\query_id.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\selectable.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\sql_function.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\sql_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\table.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\util.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\src\valid_grouping.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\tests\associations.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\tests\as_changeset.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\tests\as_expression.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\tests\auto_type.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\tests\helpers.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\tests\identifiable.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\tests\insertable.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\tests\multiconnection.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\tests\queryable.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\tests\queryable_by_name.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\tests\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\tests\selectable.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_derives\tests\tests.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_dynamic_schema\examples\columns_used_in_where_clause.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_dynamic_schema\examples\querying_basic_schemas.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_dynamic_schema\examples\querying_multiple_types.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_dynamic_schema\src\column.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_dynamic_schema\src\dummy_expression.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_dynamic_schema\src\dynamic_select.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_dynamic_schema\src\dynamic_value.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_dynamic_schema\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_dynamic_schema\src\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_dynamic_schema\src\table.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_dynamic_schema\tests\connection_setup.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_dynamic_schema\tests\dynamic_values.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_dynamic_schema\tests\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_migrations\migrations_internals\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_migrations\migrations_macros\src\embed_migrations.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_migrations\migrations_macros\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_migrations\migrations_macros\src\migrations.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_migrations\migrations_macros\src\util.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_migrations\src\embedded_migrations.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_migrations\src\errors.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_migrations\src\file_based_migrations.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_migrations\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_migrations\src\migration_harness.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_table_macro_syntax\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_table_macro_syntax\tests\basic.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\alias.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\annotations.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\associations.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\boxed_queries.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\combination.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\connection.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\copy.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\custom_types.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\debug\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\delete.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\deserialization.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\distinct.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\errors.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\expressions\date_and_time.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\expressions\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\expressions\ops.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\filter.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\filter_operators.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\find.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\group_by.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\having.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\insert.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\insert_from_select.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\instrumentation.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\internal_details.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\joins.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\limit_offset.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\macros.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\only.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\operations.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\order.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\perf_details.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\query_fragment.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\raw_sql.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\schema\backend_specifics.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\schema\custom_schemas.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\schema\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\schema\mysql_schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\schema\pg_custom_schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\schema\pg_schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\schema\postgres_specific_schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\schema\sqlite_schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\schema_dsl\functions.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\schema_dsl\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\schema_dsl\structures.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\schema_inference.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\select.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\select_by.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\serialize_as.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\transactions.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\types.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\types_roundtrip.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\diesel_tests\tests\update.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\dsl_auto_type\src\auto_type\case.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\dsl_auto_type\src\auto_type\expression_type_inference.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\dsl_auto_type\src\auto_type\local_variables_map.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\dsl_auto_type\src\auto_type\mod.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\dsl_auto_type\src\auto_type\referenced_generics.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\dsl_auto_type\src\auto_type\settings_builder.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\dsl_auto_type\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\all_about_inserts\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_1\src\bin\show_posts.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_1\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_1\src\models.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_1\src\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_1\tests\step_1.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_2\src\bin\show_posts.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_2\src\bin\write_post.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_2\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_2\src\models.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_2\src\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_2\tests\step_2.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_3\src\bin\delete_post.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_3\src\bin\get_post.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_3\src\bin\publish_post.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_3\src\bin\show_posts.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_3\src\bin\write_post.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_3\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_3\src\models.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_3\src\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\mysql\getting_started_step_3\tests\step_3.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\advanced-blog-cli\src\auth.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\advanced-blog-cli\src\cli.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\advanced-blog-cli\src\comment.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\advanced-blog-cli\src\editor.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\advanced-blog-cli\src\main.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\advanced-blog-cli\src\pagination.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\advanced-blog-cli\src\post.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\advanced-blog-cli\src\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\advanced-blog-cli\src\test_helpers.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\all_about_inserts\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\all_about_updates\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\composite_types\examples\composite2rust_colors.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\composite_types\examples\composite2rust_coordinates.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\composite_types\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\composite_types\src\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\custom_types\src\main.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\custom_types\src\model.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\custom_types\src\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_1\src\bin\show_posts.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_1\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_1\src\models.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_1\src\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_1\tests\step_1.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_2\src\bin\show_posts.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_2\src\bin\write_post.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_2\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_2\src\models.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_2\src\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_2\tests\step_2.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_3\src\bin\delete_post.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_3\src\bin\get_post.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_3\src\bin\publish_post.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_3\src\bin\show_posts.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_3\src\bin\write_post.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_3\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_3\src\models.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_3\src\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\getting_started_step_3\tests\step_3.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\relations\src\main.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\relations\src\model.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\postgres\relations\src\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\all_about_inserts\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_1\src\bin\show_posts.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_1\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_1\src\models.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_1\src\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_1\tests\step_1.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_2\src\bin\show_posts.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_2\src\bin\write_post.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_2\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_2\src\models.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_2\src\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_2\tests\step_2.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_3\src\bin\delete_post.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_3\src\bin\get_post.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_3\src\bin\publish_post.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_3\src\bin\show_posts.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_3\src\bin\write_post.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_3\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_3\src\models.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_3\src\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\getting_started_step_3\tests\step_3.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\relations\src\main.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\relations\src\model.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\examples\sqlite\relations\src\schema.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\xtask\src\main.rs
Processing file: overunsafe库\当前流行的rust库\diesel-master\diesel-master\xtask\src\tests\mod.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\benches\body.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\benches\connect.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\benches\end_to_end.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\benches\pipeline.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\benches\server.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\benches\support\mod.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\benches\support\tokiort.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\examples\client.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\examples\client_json.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\examples\echo.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\examples\gateway.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\examples\graceful_shutdown.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\examples\hello.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\examples\http_proxy.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\examples\multi_server.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\examples\params.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\examples\send_file.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\examples\service_struct_impl.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\examples\single_threaded.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\examples\state.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\examples\upgrades.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\examples\web_api.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\body\incoming.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\body\length.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\body\mod.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\cfg.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\client\conn\http1.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\client\conn\http2.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\client\conn\mod.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\client\dispatch.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\client\mod.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\client\tests.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\common\buf.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\common\date.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\common\io\compat.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\common\io\mod.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\common\io\rewind.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\common\mod.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\common\task.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\common\time.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\common\watch.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\error.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\ext\h1_reason_phrase.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\ext\mod.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\ffi\body.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_data, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\ffi\body.rs 

Found method with unsafe block in poll_data:
File: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\ffi\body.rs
Start Line: 211, End Line: 234
pub(crate) fn poll_data(
    &mut self,
    cx: &mut Context<'_>,
) -> Poll<Option<crate::Result<Frame<Bytes>>>> {
    let mut out = std::ptr::null_mut();
    match (self.data_func)(self.userdata, hyper_context::wrap(cx), &mut out) {
        super::task::HYPER_POLL_READY => {
            if out.is_null() {
                Poll::Ready(None)
            } else {
                let buf = unsafe { Box::from_raw(out) };
                Poll::Ready(Some(Ok(Frame::data(buf.0))))
            }
        }
        super::task::HYPER_POLL_PENDING => Poll::Pending,
        super::task::HYPER_POLL_ERROR => {
            Poll::Ready(Some(Err(crate::Error::new_body_write_aborted())))
        }
        unexpected => {
            Poll::Ready(
                Some(
                    Err(
                        crate::Error::new_body_write(
                            format!(
                                "unexpected hyper_body_data_func return code {}", unexpected
                            ),
                        ),
                    ),
                ),
            )
        }
    }
}



Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\ffi\client.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\ffi\error.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\ffi\http_types.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\ffi\io.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\ffi\macros.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\ffi\mod.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\ffi\task.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\headers.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\mock.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h1\conn.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: bench_read_head_short, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h1\conn.rs 

Found function with unsafe block in bench_read_head_short:
File: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h1\conn.rs
Start Line: 1142, End Line: 1180
#[cfg(all(feature = "nightly", not(miri)))]
#[bench]
fn bench_read_head_short(b: &mut ::test::Bencher) {
    use super::*;
    use crate::common::io::Compat;
    let s = b"GET / HTTP/1.1\r\nHost: localhost:8080\r\n\r\n";
    let len = s.len();
    b.bytes = len as u64;
    let io = Compat(tokio_test::io::Builder::new().build());
    let mut conn = Conn::<_, bytes::Bytes, crate::proto::h1::ServerTransaction>::new(io);
    *conn.io.read_buf_mut() = ::bytes::BytesMut::from(&s[..]);
    conn.state.cached_headers = Some(HeaderMap::with_capacity(2));
    let rt = tokio::runtime::Builder::new_current_thread().enable_all().build().unwrap();
    b.iter(|| {
        rt.block_on(
            futures_util::future::poll_fn(|cx| {
                match conn.poll_read_head(cx) {
                    Poll::Ready(Some(Ok(x))) => {
                        ::test::black_box(&x);
                        let mut headers = x.0.headers;
                        headers.clear();
                        conn.state.cached_headers = Some(headers);
                    }
                    f => panic!("expected Ready(Some(Ok(..))): {:?}", f),
                }
                conn.io.read_buf_mut().reserve(1);
                unsafe {
                    conn.io.read_buf_mut().set_len(len);
                }
                conn.state.reading = Reading::Init;
                Poll::Ready(())
            }),
        );
    });
}



Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h1\decode.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h1\dispatch.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h1\encode.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h1\io.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_read_from_io, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h1\io.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_read_from_io, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h1\io.rs 

Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h1\mod.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h1\role.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: bench_parse_incoming, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h1\role.rs 

Found function with unsafe block in bench_parse_incoming:
File: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h1\role.rs
Start Line: 2869, End Line: 2927
#[cfg(feature = "nightly")]
#[bench]
fn bench_parse_incoming(b: &mut Bencher) {
    let mut raw = BytesMut::from(
        &b"GET /super_long_uri/and_whatever?what_should_we_talk_about/\
            I_wonder/Hard_to_write_in_an_uri_after_all/you_have_to_make\
            _up_the_punctuation_yourself/how_fun_is_that?test=foo&test1=\
            foo1&test2=foo2&test3=foo3&test4=foo4 HTTP/1.1\r\nHost: \
            hyper.rs\r\nAccept: a lot of things\r\nAccept-Charset: \
            utf8\r\nAccept-Encoding: *\r\nAccess-Control-Allow-\
            Credentials: None\r\nAccess-Control-Allow-Origin: None\r\n\
            Access-Control-Allow-Methods: None\r\nAccess-Control-Allow-\
            Headers: None\r\nContent-Encoding: utf8\r\nContent-Security-\
            Policy: None\r\nContent-Type: text/html\r\nOrigin: hyper\
            \r\nSec-Websocket-Extensions: It looks super important!\r\n\
            Sec-Websocket-Origin: hyper\r\nSec-Websocket-Version: 4.3\r\
            \nStrict-Transport-Security: None\r\nUser-Agent: hyper\r\n\
            X-Content-Duration: None\r\nX-Content-Security-Policy: None\
            \r\nX-DNSPrefetch-Control: None\r\nX-Frame-Options: \
            Something important obviously\r\nX-Requested-With: Nothing\
            \r\n\r\n"[..],
    );
    let len = raw.len();
    let mut headers = Some(HeaderMap::new());
    b.bytes = len as u64;
    b.iter(|| {
        let mut msg = Server::parse(
                &mut raw,
                ParseContext {
                    cached_headers: &mut headers,
                    req_method: &mut None,
                    h1_parser_config: Default::default(),
                    h1_max_headers: None,
                    preserve_header_case: false,
                    #[cfg(feature = "ffi")]
                    preserve_header_order: false,
                    h09_responses: false,
                    #[cfg(feature = "ffi")]
                    on_informational: &mut None,
                },
            )
            .unwrap()
            .unwrap();
        ::test::black_box(&msg);
        msg.head.headers.clear();
        headers = Some(msg.head.headers);
        std::mem::take(&mut msg.head.subject);
        restart(&mut raw, len);
    });
    fn restart(b: &mut BytesMut, len: usize) {
        b.reserve(1);
        unsafe {
            b.set_len(len);
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: bench_parse_short, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h1\role.rs 

Found function with unsafe block in bench_parse_short:
File: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h1\role.rs
Start Line: 2931, End Line: 2968
#[cfg(feature = "nightly")]
#[bench]
fn bench_parse_short(b: &mut Bencher) {
    let s = &b"GET / HTTP/1.1\r\nHost: localhost:8080\r\n\r\n"[..];
    let mut raw = BytesMut::from(s);
    let len = raw.len();
    let mut headers = Some(HeaderMap::new());
    b.bytes = len as u64;
    b.iter(|| {
        let mut msg = Server::parse(
                &mut raw,
                ParseContext {
                    cached_headers: &mut headers,
                    req_method: &mut None,
                    h1_parser_config: Default::default(),
                    h1_max_headers: None,
                    preserve_header_case: false,
                    #[cfg(feature = "ffi")]
                    preserve_header_order: false,
                    h09_responses: false,
                    #[cfg(feature = "ffi")]
                    on_informational: &mut None,
                },
            )
            .unwrap()
            .unwrap();
        ::test::black_box(&msg);
        msg.head.headers.clear();
        headers = Some(msg.head.headers);
        restart(&mut raw, len);
    });
    fn restart(b: &mut BytesMut, len: usize) {
        b.reserve(1);
        unsafe {
            b.set_len(len);
        }
    }
}



Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h2\client.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h2\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: reserve_capacity, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h2\mod.rs 

Found method with unsafe block in reserve_capacity:
File: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h2\mod.rs
Start Line: 398, End Line: 400
fn reserve_capacity(&mut self, cnt: usize) {
    unsafe { self.as_inner_unchecked().reserve_capacity(cnt) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_capacity, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h2\mod.rs 

Found method with unsafe block in poll_capacity:
File: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h2\mod.rs
Start Line: 402, End Line: 404
fn poll_capacity(
    &mut self,
    cx: &mut Context<'_>,
) -> Poll<Option<Result<usize, h2::Error>>> {
    unsafe { self.as_inner_unchecked().poll_capacity(cx) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_reset, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h2\mod.rs 

Found method with unsafe block in poll_reset:
File: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h2\mod.rs
Start Line: 406, End Line: 408
fn poll_reset(&mut self, cx: &mut Context<'_>) -> Poll<Result<h2::Reason, h2::Error>> {
    unsafe { self.as_inner_unchecked().poll_reset(cx) }
}



Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h2\ping.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h2\server.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll2, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h2\server.rs 

Found method with unsafe block in poll2:
File: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\h2\server.rs
Start Line: 439, End Line: 523
fn poll2(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<crate::Result<()>> {
    let mut me = self.project();
    loop {
        let next = match me.state.as_mut().project() {
            H2StreamStateProj::Service { fut: h, connect_parts } => {
                let res = match h.poll(cx) {
                    Poll::Ready(Ok(r)) => r,
                    Poll::Pending => {
                        if let Poll::Ready(reason) = me
                            .reply
                            .poll_reset(cx)
                            .map_err(crate::Error::new_h2)?
                        {
                            debug!("stream received RST_STREAM: {:?}", reason);
                            return Poll::Ready(Err(crate::Error::new_h2(reason.into())));
                        }
                        return Poll::Pending;
                    }
                    Poll::Ready(Err(e)) => {
                        let err = crate::Error::new_user_service(e);
                        warn!("http2 service errored: {}", err);
                        me.reply.send_reset(err.h2_reason());
                        return Poll::Ready(Err(err));
                    }
                };
                let (head, body) = res.into_parts();
                let mut res = ::http::Response::from_parts(head, ());
                super::strip_connection_headers(res.headers_mut(), false);
                if *me.date_header {
                    res.headers_mut()
                        .entry(::http::header::DATE)
                        .or_insert_with(date::update_and_header_value);
                }
                if let Some(connect_parts) = connect_parts.take() {
                    if res.status().is_success() {
                        if headers::content_length_parse_all(res.headers())
                            .map_or(false, |len| len != 0)
                        {
                            warn!(
                                "h2 successful response to CONNECT request with body not supported"
                            );
                            me.reply.send_reset(h2::Reason::INTERNAL_ERROR);
                            return Poll::Ready(Err(crate::Error::new_user_header()));
                        }
                        let send_stream = reply!(me, res, false);
                        connect_parts
                            .pending
                            .fulfill(
                                Upgraded::new(
                                    H2Upgraded {
                                        ping: connect_parts.ping,
                                        recv_stream: connect_parts.recv_stream,
                                        send_stream: unsafe {
                                            UpgradedSendStream::new(send_stream)
                                        },
                                        buf: Bytes::new(),
                                    },
                                    Bytes::new(),
                                ),
                            );
                        return Poll::Ready(Ok(()));
                    }
                }
                if !body.is_end_stream() {
                    if let Some(len) = body.size_hint().exact() {
                        headers::set_content_length_if_missing(res.headers_mut(), len);
                    }
                    let body_tx = reply!(me, res, false);
                    H2StreamState::Body {
                        pipe: PipeToSendStream::new(body, body_tx),
                    }
                } else {
                    reply!(me, res, true);
                    return Poll::Ready(Ok(()));
                }
            }
            H2StreamStateProj::Body { pipe } => {
                return pipe.poll(cx);
            }
        };
        me.state.set(next);
    }
}



Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\proto\mod.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\rt\bounds.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\rt\io.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: filled, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\rt\io.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: unfilled, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\rt\io.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: put_slice, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\rt\io.rs 

Found method with unsafe block in put_slice:
File: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\rt\io.rs
Start Line: 263, End Line: 285
/// Transfer bytes into `self`` from `src` and advance the cursor
/// by the number of bytes written.
///
/// # Panics
///
/// `self` must have enough remaining capacity to contain all of `src`.
#[inline]
pub fn put_slice(&mut self, src: &[u8]) {
    assert!(self.buf.remaining() >= src.len(), "src.len() must fit in remaining()");
    let amt = src.len();
    let end = self.buf.filled + amt;
    unsafe {
        self.buf
            .raw[self.buf.filled..end]
            .as_mut_ptr()
            .cast::<u8>()
            .copy_from_nonoverlapping(src.as_ptr(), amt);
    }
    if self.buf.init < end {
        self.buf.init = end;
    }
    self.buf.filled = end;
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: pin_as_deref_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\rt\io.rs 

Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\rt\mod.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\rt\timer.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: downcast_mut_pin, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\rt\timer.rs 

Found method with unsafe block in downcast_mut_pin:
File: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\rt\timer.rs
Start Line: 107, End Line: 121
/// Downcast a pinned &mut Sleep object to its original type
pub fn downcast_mut_pin<T>(self: Pin<&mut Self>) -> Option<Pin<&mut T>>
where
    T: Sleep + 'static,
{
    if self.is::<T>() {
        unsafe {
            let inner = Pin::into_inner_unchecked(self);
            Some(Pin::new_unchecked(&mut *(&mut *inner as *mut dyn Sleep as *mut T)))
        }
    } else {
        None
    }
}



Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\server\conn\http1.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\server\conn\http2.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\server\conn\mod.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\server\mod.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\service\http.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\service\mod.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\service\service.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\service\util.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\trace.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\upgrade.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: __hyper_downcast, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\upgrade.rs 

Found method with unsafe block in __hyper_downcast:
File: overunsafe库\当前流行的rust库\hyper-master\hyper-master\src\upgrade.rs
Start Line: 304, End Line: 314
fn __hyper_downcast<T: Io>(self: Box<Self>) -> Result<Box<T>, Box<Self>> {
    if self.__hyper_is::<T>() {
        unsafe {
            let raw: *mut dyn Io = Box::into_raw(self);
            Ok(Box::from_raw(raw as *mut T))
        }
    } else {
        Err(self)
    }
}



Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\tests\client.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\tests\integration.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\tests\server.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\tests\support\mod.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\tests\support\tokiort.rs
Processing file: overunsafe库\当前流行的rust库\hyper-master\hyper-master\tests\support\trailers.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\ci\alt-core\build.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\ci\alt-core\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\ci\highlander\src\main.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\build.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\broadcast\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: broadcast, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\broadcast\mod.rs 

Found function with unsafe block in broadcast:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\broadcast\mod.rs
Start Line: 19, End Line: 26
/// Executes `op` within every thread in the current threadpool. If this is
/// called from a non-Rayon thread, it will execute in the global threadpool.
/// Any attempts to use `join`, `scope`, or parallel iterators will then operate
/// within that threadpool. When the call has completed on each thread, returns
/// a vector containing all of their return values.
///
/// For more information, see the [`ThreadPool::broadcast()`][m] method.
///
/// [m]: struct.ThreadPool.html#method.broadcast
pub fn broadcast<OP, R>(op: OP) -> Vec<R>
where
    OP: Fn(BroadcastContext<'_>) -> R + Sync,
    R: Send,
{
    unsafe { broadcast_in(op, &Registry::current()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: spawn_broadcast, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\broadcast\mod.rs 

Found function with unsafe block in spawn_broadcast:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\broadcast\mod.rs
Start Line: 36, End Line: 42
/// Spawns an asynchronous task on every thread in this thread-pool. This task
/// will run in the implicit, global scope, which means that it may outlast the
/// current stack frame -- therefore, it cannot capture any references onto the
/// stack (you will likely need a `move` closure).
///
/// For more information, see the [`ThreadPool::spawn_broadcast()`][m] method.
///
/// [m]: struct.ThreadPool.html#method.spawn_broadcast
pub fn spawn_broadcast<OP>(op: OP)
where
    OP: Fn(BroadcastContext<'_>) + Send + Sync + 'static,
{
    unsafe { spawn_broadcast_in(op, &Registry::current()) }
}



Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\broadcast\test.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\compile_fail\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\compile_fail\quicksort_race1.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\compile_fail\quicksort_race2.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\compile_fail\quicksort_race3.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\compile_fail\rc_return.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\compile_fail\rc_upvar.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\compile_fail\scope_join_bad.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\job.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: into_static_job_ref, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\job.rs 

Found method with unsafe block in into_static_job_ref:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\job.rs
Start Line: 155, End Line: 160
/// Creates a static `JobRef` from this job.
pub(super) fn into_static_job_ref(self: Box<Self>) -> JobRef
where
    BODY: 'static,
{
    unsafe { self.into_job_ref() }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: as_static_job_ref, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\job.rs 

Found method with unsafe block in as_static_job_ref:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\job.rs
Start Line: 198, End Line: 203
/// Creates a static `JobRef` from this job.
pub(super) fn as_static_job_ref(this: &Arc<Self>) -> JobRef
where
    BODY: 'static,
{
    unsafe { Self::as_job_ref(this) }
}



Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\join\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 8 statements, complex: true, name: join_context, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\join\mod.rs 

Found function with unsafe block in join_context:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\join\mod.rs
Start Line: 115, End Line: 175
/// Identical to `join`, except that the closures have a parameter
/// that provides context for the way the closure has been called,
/// especially indicating whether they're executing on a different
/// thread than where `join_context` was called.  This will occur if
/// the second job is stolen by a different thread, or if
/// `join_context` was called from outside the thread pool to begin
/// with.
pub fn join_context<A, B, RA, RB>(oper_a: A, oper_b: B) -> (RA, RB)
where
    A: FnOnce(FnContext) -> RA + Send,
    B: FnOnce(FnContext) -> RB + Send,
    RA: Send,
    RB: Send,
{
    #[inline]
    fn call_a<R>(f: impl FnOnce(FnContext) -> R, injected: bool) -> impl FnOnce() -> R {
        move || f(FnContext::new(injected))
    }
    #[inline]
    fn call_b<R>(f: impl FnOnce(FnContext) -> R) -> impl FnOnce(bool) -> R {
        move |migrated| f(FnContext::new(migrated))
    }
    registry::in_worker(|worker_thread, injected| unsafe {
        let job_b = StackJob::new(call_b(oper_b), SpinLatch::new(worker_thread));
        let job_b_ref = job_b.as_job_ref();
        let job_b_id = job_b_ref.id();
        worker_thread.push(job_b_ref);
        let status_a = unwind::halt_unwinding(call_a(oper_a, injected));
        let result_a = match status_a {
            Ok(v) => v,
            Err(err) => join_recover_from_panic(worker_thread, &job_b.latch, err),
        };
        while !job_b.latch.probe() {
            if let Some(job) = worker_thread.take_local_job() {
                if job_b_id == job.id() {
                    let result_b = job_b.run_inline(injected);
                    return (result_a, result_b);
                } else {
                    worker_thread.execute(job);
                }
            } else {
                worker_thread.wait_until(&job_b.latch);
                debug_assert!(job_b.latch.probe());
                break;
            }
        }
        (result_a, job_b.into_result())
    })
}



Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\join\test.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\latch.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\private.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\registry.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: global_registry, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\registry.rs 

Found function with unsafe block in global_registry:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\registry.rs
Start Line: 164, End Line: 168
/// Starts the worker threads (if that has not already happened). If
/// initialization has not already occurred, use the default
/// configuration.
pub(super) fn global_registry() -> &'static Arc<Registry> {
    set_global_registry(default_global_registry)
        .or_else(|err| unsafe { THE_REGISTRY.as_ref().ok_or(err) })
        .expect("The global thread pool has not been initialized.")
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_global_registry, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\registry.rs 

Found function with unsafe block in set_global_registry:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\registry.rs
Start Line: 183, End Line: 197
/// Starts the worker threads (if that has not already happened)
/// by creating a registry with the given callback.
fn set_global_registry<F>(
    registry: F,
) -> Result<&'static Arc<Registry>, ThreadPoolBuildError>
where
    F: FnOnce() -> Result<Arc<Registry>, ThreadPoolBuildError>,
{
    let mut result = Err(
        ThreadPoolBuildError::new(ErrorKind::GlobalPoolAlreadyInitialized),
    );
    THE_REGISTRY_SET
        .call_once(|| {
            result = registry()
                .map(|registry: Arc<Registry>| unsafe {
                    &*THE_REGISTRY.get_or_insert(registry)
                })
        });
    result
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: current_thread, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\registry.rs 

Found method with unsafe block in current_thread:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\registry.rs
Start Line: 341, End Line: 350
/// Returns the current `WorkerThread` if it's part of this `Registry`.
pub(super) fn current_thread(&self) -> Option<&WorkerThread> {
    unsafe {
        let worker = WorkerThread::current().as_ref()?;
        if worker.registry().id() == self.id() { Some(worker) } else { None }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: true, name: inject_or_push, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\registry.rs 

Found method with unsafe block in inject_or_push:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\registry.rs
Start Line: 404, End Line: 413
/// ////////////////////////////////////////////////////////////////////////
/// MAIN LOOP
///
/// So long as all of the worker threads are hanging out in their
/// top-level loop, there is no work to be done.
/// Push a job into the given `registry`. If we are running on a
/// worker thread for the registry, this will push onto the
/// deque. Else, it will inject from the outside (which is slower).
pub(super) fn inject_or_push(&self, job_ref: JobRef) {
    let worker_thread = WorkerThread::current();
    unsafe {
        if !worker_thread.is_null() && (*worker_thread).registry().id() == self.id() {
            (*worker_thread).push(job_ref);
        } else {
            self.inject(job_ref);
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: in_worker, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\registry.rs 

Found method with unsafe block in in_worker:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\registry.rs
Start Line: 486, End Line: 504
/// If already in a worker-thread of this registry, just execute `op`.
/// Otherwise, inject `op` in this thread-pool. Either way, block until `op`
/// completes and return its return value. If `op` panics, that panic will
/// be propagated as well.  The second argument indicates `true` if injection
/// was performed, `false` if executed directly.
pub(super) fn in_worker<OP, R>(&self, op: OP) -> R
where
    OP: FnOnce(&WorkerThread, bool) -> R + Send,
    R: Send,
{
    unsafe {
        let worker_thread = WorkerThread::current();
        if worker_thread.is_null() {
            self.in_worker_cold(op)
        } else if (*worker_thread).registry().id() != self.id() {
            self.in_worker_cross(&*worker_thread, op)
        } else {
            op(&*worker_thread, false)
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: yield_local, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\registry.rs 

Found method with unsafe block in yield_local:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\registry.rs
Start Line: 844, End Line: 852
pub(super) fn yield_local(&self) -> Yield {
    match self.take_local_job() {
        Some(job) => {
            unsafe {
                self.execute(job);
                Yield::Executed
            }
        }
        None => Yield::Idle,
    }
}



Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\scope\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: do_in_place_scope, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\scope\mod.rs 

Found function with unsafe block in do_in_place_scope:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\scope\mod.rs
Start Line: 415, End Line: 422
pub(crate) fn do_in_place_scope<'scope, OP, R>(
    registry: Option<&Arc<Registry>>,
    op: OP,
) -> R
where
    OP: FnOnce(&Scope<'scope>) -> R,
{
    let thread = unsafe { WorkerThread::current().as_ref() };
    let scope = Scope::<'scope>::new(thread, registry);
    scope.base.complete(thread, || op(&scope))
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: do_in_place_scope_fifo, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\scope\mod.rs 

Found function with unsafe block in do_in_place_scope_fifo:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\scope\mod.rs
Start Line: 452, End Line: 459
pub(crate) fn do_in_place_scope_fifo<'scope, OP, R>(
    registry: Option<&Arc<Registry>>,
    op: OP,
) -> R
where
    OP: FnOnce(&ScopeFifo<'scope>) -> R,
{
    let thread = unsafe { WorkerThread::current().as_ref() };
    let scope = ScopeFifo::<'scope>::new(thread, registry);
    scope.base.complete(thread, || op(&scope))
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: spawn_fifo, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\scope\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: spawn_fifo, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\scope\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: heap_job_ref, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\scope\mod.rs 

Found method with unsafe block in heap_job_ref:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\scope\mod.rs
Start Line: 639, End Line: 647
fn heap_job_ref<FUNC>(&self, job: Box<HeapJob<FUNC>>) -> JobRef
where
    FUNC: FnOnce() + Send + 'scope,
{
    unsafe {
        self.job_completed_latch.increment();
        job.into_job_ref()
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: maybe_propagate_panic, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\scope\mod.rs 

Found method with unsafe block in maybe_propagate_panic:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\scope\mod.rs
Start Line: 720, End Line: 729
fn maybe_propagate_panic(&self) {
    let panic = self.panic.swap(ptr::null_mut(), Ordering::Relaxed);
    if !panic.is_null() {
        let value = unsafe { Box::from_raw(panic) };
        unwind::resume_unwinding(*value);
    }
}



Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\scope\test.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\sleep\counters.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\sleep\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\spawn\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\spawn\test.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\test.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\thread_pool\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\thread_pool\test.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\src\unwind.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\tests\double_init_fail.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\tests\init_zero_threads.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\tests\scoped_threadpool.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\tests\scope_join.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\tests\simple_panic.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\tests\stack_overflow_crash.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: disable_core, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\tests\stack_overflow_crash.rs 

Found function with unsafe block in disable_core:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\tests\stack_overflow_crash.rs
Start Line: 19, End Line: 29
#[cfg(unix)]
fn disable_core() {
    unsafe {
        libc::setrlimit(
            libc::RLIMIT_CORE,
            &libc::rlimit {
                rlim_cur: 0,
                rlim_max: 0,
            },
        );
    }
}



Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-core\tests\use_current_thread.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\examples\cpu_monitor.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\cpu_time\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\cpu_time\unix.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\cpu_time\win.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\factorial\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\fibonacci\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\find\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\join_microbench.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\life\bench.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\life\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\main.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\map_collect.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\matmul\bench.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\matmul\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: seq_matmul, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\matmul\mod.rs 

Found function with unsafe block in seq_matmul:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\matmul\mod.rs
Start Line: 27, End Line: 45
pub fn seq_matmul(a: &[f32], b: &[f32], dest: &mut [f32]) {
    for d in dest.iter_mut() {
        *d = 0.0;
    }
    let bits = dest.len().trailing_zeros() / 2;
    let n = 1 << bits;
    for i in 0..n {
        for j in 0..n {
            let mut sum = 0.0;
            for k in 0..n {
                sum
                    += unsafe {
                        a.get_unchecked(i << bits | k) * b.get_unchecked(k << bits | j)
                    };
            }
            dest[i << bits | j] = sum;
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: seq_matmulz, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\matmul\mod.rs 

Found function with unsafe block in seq_matmulz:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\matmul\mod.rs
Start Line: 90, End Line: 117
#[inline(never)]
pub fn seq_matmulz(a: &[f32], b: &[f32], dest: &mut [f32]) {
    assert!(a.len() == b.len() && a.len() == dest.len());
    assert!(a.len().count_ones() == 1 && a.len().trailing_zeros() % 2 == 0);
    for d in dest.iter_mut() {
        *d = 0.0;
    }
    let n = dest.len();
    for (ij, d) in dest.iter_mut().enumerate() {
        let i = ij & 0xaaaa_aaaa;
        let j = ij & 0x5555_5555;
        let mut sum = 0.0;
        for k in SplayedBitsCounter::new(n) {
            sum += unsafe { a.get_unchecked(i | k) * b.get_unchecked(k << 1 | j) };
        }
        *d = sum;
    }
}



Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\mergesort\bench.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\mergesort\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: merge_sort, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\mergesort\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: as_uninit_slice, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\mergesort\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: as_uninit_slice_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\mergesort\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: rsort_into, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\mergesort\mod.rs 

Found function with unsafe block in rsort_into:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\mergesort\mod.rs
Start Line: 82, End Line: 97
fn rsort_into<'dest, T: Ord + Send + Copy>(
    src: &mut [T],
    dest: &'dest mut [MaybeUninit<T>],
) -> &'dest mut [T] {
    let mid = src.len() / 2;
    let (s1, s2) = src.split_at_mut(mid);
    {
        let (d1, d2) = dest.split_at_mut(mid);
        rayon::join(|| rsort(s1, d1), || rsort(s2, d2));
    }
    rmerge(s1, s2, dest);
    unsafe { slice_assume_init_mut(dest) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: seq_merge_sort, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\mergesort\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: seq_sort_into, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\mergesort\mod.rs 

Found function with unsafe block in seq_sort_into:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\mergesort\mod.rs
Start Line: 199, End Line: 215
fn seq_sort_into<'dest, T: Ord + Copy>(
    src: &mut [T],
    dest: &'dest mut [MaybeUninit<T>],
) -> &'dest mut [T] {
    let mid = src.len() / 2;
    let (s1, s2) = src.split_at_mut(mid);
    {
        let (d1, d2) = dest.split_at_mut(mid);
        seq_sort(s1, d1);
        seq_sort(s2, d2);
    }
    seq_merge(s1, s2, dest);
    unsafe { slice_assume_init_mut(dest) }
}



Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\nbody\bench.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\nbody\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\nbody\nbody.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\nbody\visualize.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\noop\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\pythagoras\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\quicksort\bench.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\quicksort\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\sieve\bench.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\sieve\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\sort.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\str_split.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\tree.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\tsp\bench.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\tsp\graph.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\tsp\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\tsp\parser.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\tsp\solver.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\tsp\step.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\tsp\tour.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\tsp\weight.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\rayon-demo\src\vec_collect.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\array.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: with_producer, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\array.rs 

Found method with unsafe block in with_producer:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\array.rs
Start Line: 74, End Line: 84
fn with_producer<CB>(self, callback: CB) -> CB::Output
where
    CB: ProducerCallback<Self::Item>,
{
    unsafe {
        let mut array = ManuallyDrop::new(self.array);
        let producer = DrainProducer::new(array.as_mut_slice());
        callback.callback(producer)
    }
}



Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\collections\binary_heap.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\collections\btree_map.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\collections\btree_set.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\collections\hash_map.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\collections\hash_set.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\collections\linked_list.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\collections\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\collections\vec_deque.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\compile_fail\cannot_collect_filtermap_data.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\compile_fail\cannot_zip_filtered_data.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\compile_fail\cell_par_iter.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\compile_fail\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\compile_fail\must_use.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\compile_fail\no_send_par_iter.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\compile_fail\rc_par_iter.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\delegate.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\blocks.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\chain.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\chunks.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\cloned.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\collect\consumer.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: appender, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\collect\consumer.rs 

-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: true, name: reduce, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\collect\consumer.rs 

Found method with unsafe block in reduce:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\collect\consumer.rs
Start Line: 169, End Line: 185
fn reduce(
    self,
    mut left: CollectResult<'c, T>,
    right: CollectResult<'c, T>,
) -> CollectResult<'c, T> {
    unsafe {
        let left_end = left.start.0.add(left.initialized_len);
        if left_end == right.start.0 {
            left.total_len += right.total_len;
            left.initialized_len += right.release_ownership();
        }
        left
    }
}



Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\collect\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: collect_with_consumer, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\collect\mod.rs 

Found function with unsafe block in collect_with_consumer:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\collect\mod.rs
Start Line: 75, End Line: 116
/// Create a consumer on the slice of memory we are collecting into.
///
/// The consumer needs to be used inside the scope function, and the
/// complete collect result passed back.
///
/// This method will verify the collect result, and panic if the slice
/// was not fully written into. Otherwise, in the successful case,
/// the vector is complete with the collected result.
fn collect_with_consumer<T, F>(vec: &mut Vec<T>, len: usize, scope_fn: F)
where
    T: Send,
    F: FnOnce(CollectConsumer<'_, T>) -> CollectResult<'_, T>,
{
    vec.reserve(len);
    let result = scope_fn(CollectConsumer::appender(vec, len));
    let actual_writes = result.len();
    assert!(
        actual_writes == len, "expected {} total writes, but got {}", len, actual_writes
    );
    result.release_ownership();
    let new_len = vec.len() + len;
    unsafe {
        vec.set_len(new_len);
    }
}



Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\collect\test.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\copied.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\empty.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\enumerate.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\extend.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\filter.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\filter_map.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\find.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\find_first_last\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\find_first_last\test.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\flatten.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\flatten_iter.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\flat_map.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\flat_map_iter.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\fold.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\fold_chunks.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\fold_chunks_with.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\for_each.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\from_par_iter.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\inspect.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\interleave.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\interleave_shortest.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\intersperse.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\len.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\map.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\map_with.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\multizip.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\noop.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\once.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\panic_fuse.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\par_bridge.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\plumbing\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\positions.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\product.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\reduce.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\repeat.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\rev.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\skip.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\skip_any.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\skip_any_while.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\splitter.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\step_by.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\sum.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\take.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\take_any.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\take_any_while.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\test.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\try_fold.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\try_reduce.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\try_reduce_with.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\unzip.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\update.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\walk_tree.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\while_some.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\zip.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\iter\zip_eq.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\math.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\option.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\par_either.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\prelude.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\private.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\range.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\range_inclusive.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\result.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\chunks.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\chunk_by.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\mod.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\rchunks.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: insert_tail, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

Found function with unsafe block in insert_tail:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs
Start Line: 45, End Line: 96
/// Inserts `v[v.len() - 1]` into pre-sorted sequence `v[..v.len() - 1]` so that whole `v[..]`
/// becomes sorted.
unsafe fn insert_tail<T, F>(v: &mut [T], is_less: &F)
where
    F: Fn(&T, &T) -> bool,
{
    debug_assert!(v.len() >= 2);
    let arr_ptr = v.as_mut_ptr();
    let i = v.len() - 1;
    unsafe {
        let i_ptr = arr_ptr.add(i);
        if is_less(&*i_ptr, &*i_ptr.sub(1)) {
            let tmp = mem::ManuallyDrop::new(ptr::read(i_ptr));
            let mut hole = InsertionHole {
                src: &*tmp,
                dest: i_ptr.sub(1),
            };
            ptr::copy_nonoverlapping(hole.dest, i_ptr, 1);
            for j in (0..(i - 1)).rev() {
                let j_ptr = arr_ptr.add(j);
                if !is_less(&*tmp, &*j_ptr) {
                    break;
                }
                ptr::copy_nonoverlapping(j_ptr, hole.dest, 1);
                hole.dest = j_ptr;
            }
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: insertion_sort_shift_left, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: insertion_sort_shift_right, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: true, name: partial_insertion_sort, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

Found function with unsafe block in partial_insertion_sort:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs
Start Line: 214, End Line: 260
/// Partially sorts a slice by shifting several out-of-order elements around.
///
/// Returns `true` if the slice is sorted at the end. This function is *O*(*n*) worst-case.
#[cold]
fn partial_insertion_sort<T, F>(v: &mut [T], is_less: &F) -> bool
where
    F: Fn(&T, &T) -> bool,
{
    const MAX_STEPS: usize = 5;
    const SHORTEST_SHIFTING: usize = 50;
    let len = v.len();
    let mut i = 1;
    for _ in 0..MAX_STEPS {
        unsafe {
            while i < len && !is_less(v.get_unchecked(i), v.get_unchecked(i - 1)) {
                i += 1;
            }
        }
        if i == len {
            return true;
        }
        if len < SHORTEST_SHIFTING {
            return false;
        }
        v.swap(i - 1, i);
        if i >= 2 {
            insertion_sort_shift_left(&mut v[..i], i - 1, is_less);
            insertion_sort_shift_right(&mut v[..i], 1, is_less);
        }
    }
    false
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: partition_in_blocks, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: partition_in_blocks, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: partition_in_blocks, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

-----------------------------------------------------------------
Checking unsafe block with 7 statements, complex: true, name: partition_in_blocks, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: partition_in_blocks, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: partition_in_blocks, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: partition_in_blocks, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: partition_in_blocks, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

Found function with unsafe block in partition_in_blocks:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs
Start Line: 317, End Line: 566
/// Partitions `v` into elements smaller than `pivot`, followed by elements greater than or equal
/// to `pivot`.
///
/// Returns the number of elements smaller than `pivot`.
///
/// Partitioning is performed block-by-block in order to minimize the cost of branching operations.
/// This idea is presented in the [BlockQuicksort][pdf] paper.
///
/// [pdf]: https://drops.dagstuhl.de/opus/volltexte/2016/6389/pdf/LIPIcs-ESA-2016-38.pdf
fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &F) -> usize
where
    F: Fn(&T, &T) -> bool,
{
    const BLOCK: usize = 128;
    let mut l = v.as_mut_ptr();
    let mut block_l = BLOCK;
    let mut start_l = ptr::null_mut();
    let mut end_l = ptr::null_mut();
    let mut offsets_l = [MaybeUninit::<u8>::uninit(); BLOCK];
    let mut r = unsafe { l.add(v.len()) };
    let mut block_r = BLOCK;
    let mut start_r = ptr::null_mut();
    let mut end_r = ptr::null_mut();
    let mut offsets_r = [MaybeUninit::<u8>::uninit(); BLOCK];
    fn width<T>(l: *mut T, r: *mut T) -> usize {
        assert!(mem::size_of::< T > () > 0);
        (r as usize - l as usize) / mem::size_of::<T>()
    }
    loop {
        let is_done = width(l, r) <= 2 * BLOCK;
        if is_done {
            let mut rem = width(l, r);
            if start_l < end_l || start_r < end_r {
                rem -= BLOCK;
            }
            if start_l < end_l {
                block_r = rem;
            } else if start_r < end_r {
                block_l = rem;
            } else {
                block_l = rem / 2;
                block_r = rem - block_l;
            }
            debug_assert!(block_l <= BLOCK && block_r <= BLOCK);
            debug_assert!(width(l, r) == block_l + block_r);
        }
        if start_l == end_l {
            start_l = offsets_l.as_mut_ptr() as *mut u8;
            end_l = start_l;
            let mut elem = l;
            for i in 0..block_l {
                unsafe {
                    *end_l = i as u8;
                    end_l = end_l.add(!is_less(&*elem, pivot) as usize);
                    elem = elem.add(1);
                }
            }
        }
        if start_r == end_r {
            start_r = offsets_r.as_mut_ptr() as *mut u8;
            end_r = start_r;
            let mut elem = r;
            for i in 0..block_r {
                unsafe {
                    elem = elem.sub(1);
                    *end_r = i as u8;
                    end_r = end_r.add(is_less(&*elem, pivot) as usize);
                }
            }
        }
        let count = cmp::min(width(start_l, end_l), width(start_r, end_r));
        if count > 0 {
            macro_rules! left {
                () => {
                    l.add(usize::from(* start_l))
                };
            }
            macro_rules! right {
                () => {
                    r.sub(usize::from(* start_r) + 1)
                };
            }
            unsafe {
                let tmp = ptr::read(left!());
                ptr::copy_nonoverlapping(right!(), left!(), 1);
                for _ in 1..count {
                    start_l = start_l.add(1);
                    ptr::copy_nonoverlapping(left!(), right!(), 1);
                    start_r = start_r.add(1);
                    ptr::copy_nonoverlapping(right!(), left!(), 1);
                }
                ptr::copy_nonoverlapping(&tmp, right!(), 1);
                mem::forget(tmp);
                start_l = start_l.add(1);
                start_r = start_r.add(1);
            }
        }
        if start_l == end_l {
            l = unsafe { l.add(block_l) };
        }
        if start_r == end_r {
            r = unsafe { r.sub(block_r) };
        }
        if is_done {
            break;
        }
    }
    if start_l < end_l {
        debug_assert_eq!(width(l, r), block_l);
        while start_l < end_l {
            unsafe {
                end_l = end_l.sub(1);
                ptr::swap(l.add(usize::from(*end_l)), r.sub(1));
                r = r.sub(1);
            }
        }
        width(v.as_mut_ptr(), r)
    } else if start_r < end_r {
        debug_assert_eq!(width(l, r), block_r);
        while start_r < end_r {
            unsafe {
                end_r = end_r.sub(1);
                ptr::swap(l, r.sub(usize::from(*end_r) + 1));
                l = l.add(1);
            }
        }
        width(v.as_mut_ptr(), l)
    } else {
        width(v.as_mut_ptr(), l)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: partition_equal, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

-----------------------------------------------------------------
Checking unsafe block with 6 statements, complex: true, name: partition_equal, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

Found function with unsafe block in partition_equal:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs
Start Line: 636, End Line: 699
/// Partitions `v` into elements equal to `v[pivot]` followed by elements greater than `v[pivot]`.
///
/// Returns the number of elements equal to the pivot. It is assumed that `v` does not contain
/// elements smaller than the pivot.
fn partition_equal<T, F>(v: &mut [T], pivot: usize, is_less: &F) -> usize
where
    F: Fn(&T, &T) -> bool,
{
    v.swap(0, pivot);
    let (pivot, v) = v.split_at_mut(1);
    let pivot = &mut pivot[0];
    let tmp = mem::ManuallyDrop::new(unsafe { ptr::read(pivot) });
    let _pivot_guard = InsertionHole {
        src: &*tmp,
        dest: pivot,
    };
    let pivot = &*tmp;
    let len = v.len();
    if len == 0 {
        return 0;
    }
    let mut l = 0;
    let mut r = len;
    loop {
        unsafe {
            while l < r && !is_less(pivot, v.get_unchecked(l)) {
                l += 1;
            }
            loop {
                r -= 1;
                if l >= r || !is_less(pivot, v.get_unchecked(r)) {
                    break;
                }
            }
            if l >= r {
                break;
            }
            let ptr = v.as_mut_ptr();
            ptr::swap(ptr.add(l), ptr.add(r));
            l += 1;
        }
    }
    l + 1
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: true, name: choose_pivot, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

Found function with unsafe block in choose_pivot:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs
Start Line: 753, End Line: 821
/// Chooses a pivot in `v` and returns the index and `true` if the slice is likely already sorted.
///
/// Elements in `v` might be reordered in the process.
fn choose_pivot<T, F>(v: &mut [T], is_less: &F) -> (usize, bool)
where
    F: Fn(&T, &T) -> bool,
{
    const SHORTEST_MEDIAN_OF_MEDIANS: usize = 50;
    const MAX_SWAPS: usize = 4 * 3;
    let len = v.len();
    #[allow(clippy::identity_op)]
    let mut a = len / 4 * 1;
    let mut b = len / 4 * 2;
    let mut c = len / 4 * 3;
    let mut swaps = 0;
    if len >= 8 {
        let mut sort2 = |a: &mut usize, b: &mut usize| unsafe {
            if is_less(v.get_unchecked(*b), v.get_unchecked(*a)) {
                ptr::swap(a, b);
                swaps += 1;
            }
        };
        let mut sort3 = |a: &mut usize, b: &mut usize, c: &mut usize| {
            sort2(a, b);
            sort2(b, c);
            sort2(a, b);
        };
        if len >= SHORTEST_MEDIAN_OF_MEDIANS {
            let mut sort_adjacent = |a: &mut usize| {
                let tmp = *a;
                sort3(&mut (tmp - 1), a, &mut (tmp + 1));
            };
            sort_adjacent(&mut a);
            sort_adjacent(&mut b);
            sort_adjacent(&mut c);
        }
        sort3(&mut a, &mut b, &mut c);
    }
    if swaps < MAX_SWAPS {
        (b, swaps == 0)
    } else {
        v.reverse();
        (len - 1 - b, true)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: find_streak, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

Found function with unsafe block in find_streak:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs
Start Line: 1240, End Line: 1272
/// Finds a streak of presorted elements starting at the beginning of the slice. Returns the first
/// value that is not part of said streak, and a bool denoting whether the streak was reversed.
/// Streaks can be increasing or decreasing.
fn find_streak<T, F>(v: &[T], is_less: &F) -> (usize, bool)
where
    F: Fn(&T, &T) -> bool,
{
    let len = v.len();
    if len < 2 {
        return (len, false);
    }
    let mut end = 2;
    unsafe {
        let assume_reverse = is_less(v.get_unchecked(1), v.get_unchecked(0));
        if assume_reverse {
            while end < len && is_less(v.get_unchecked(end), v.get_unchecked(end - 1)) {
                end += 1;
            }
            (end, true)
        } else {
            while end < len && !is_less(v.get_unchecked(end), v.get_unchecked(end - 1)) {
                end += 1;
            }
            (end, false)
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: false, name: par_merge, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

Found function with unsafe block in par_merge:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs
Start Line: 1333, End Line: 1421
/// Merges slices `left` and `right` in parallel and stores the result into `dest`.
///
/// # Safety
///
/// The `dest` pointer must have enough space to store the result.
///
/// Even if `is_less` panics at any point during the merge process, this function will fully copy
/// all elements from `left` and `right` into `dest` (not necessarily in sorted order).
unsafe fn par_merge<T, F>(left: &mut [T], right: &mut [T], dest: *mut T, is_less: &F)
where
    T: Send,
    F: Fn(&T, &T) -> bool + Sync,
{
    const MAX_SEQUENTIAL: usize = 5000;
    let left_len = left.len();
    let right_len = right.len();
    let mut s = State {
        left_start: left.as_mut_ptr(),
        left_end: left.as_mut_ptr().add(left_len),
        right_start: right.as_mut_ptr(),
        right_end: right.as_mut_ptr().add(right_len),
        dest,
    };
    if left_len == 0 || right_len == 0 || left_len + right_len < MAX_SEQUENTIAL {
        while s.left_start < s.left_end && s.right_start < s.right_end {
            let is_l = is_less(&*s.right_start, &*s.left_start);
            let to_copy = if is_l { s.right_start } else { s.left_start };
            ptr::copy_nonoverlapping(to_copy, s.dest, 1);
            s.dest = s.dest.add(1);
            s.right_start = s.right_start.add(is_l as usize);
            s.left_start = s.left_start.add(!is_l as usize);
        }
    } else {
        let (left_mid, right_mid) = split_for_merge(left, right, is_less);
        let (left_l, left_r) = left.split_at_mut(left_mid);
        let (right_l, right_r) = right.split_at_mut(right_mid);
        mem::forget(s);
        let dest_l = SendPtr(dest);
        let dest_r = SendPtr(dest.add(left_l.len() + right_l.len()));
        rayon_core::join(
            move || par_merge(left_l, right_l, dest_l.get(), is_less),
            move || par_merge(left_r, right_r, dest_r.get(), is_less),
        );
    }
    struct State<T> {
        left_start: *mut T,
        left_end: *mut T,
        right_start: *mut T,
        right_end: *mut T,
        dest: *mut T,
    }
    impl<T> Drop for State<T> {
        fn drop(&mut self) {
            unsafe {
                let left_len = self.left_end.offset_from(self.left_start) as usize;
                ptr::copy_nonoverlapping(self.left_start, self.dest, left_len);
                self.dest = self.dest.add(left_len);
                let right_len = self.right_end.offset_from(self.right_start) as usize;
                ptr::copy_nonoverlapping(self.right_start, self.dest, right_len);
            }
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: par_mergesort, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: par_mergesort, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: par_mergesort, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs 

Found function with unsafe block in par_mergesort:
File: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\sort.rs
Start Line: 1510, End Line: 1608
/// Sorts `v` using merge sort in parallel.
///
/// The algorithm is stable, allocates memory, and `O(n log n)` worst-case.
/// The allocated temporary buffer is of the same length as is `v`.
pub(super) fn par_mergesort<T, F>(v: &mut [T], is_less: F)
where
    T: Send,
    F: Fn(&T, &T) -> bool + Sync,
{
    const MAX_INSERTION: usize = 20;
    const CHUNK_LENGTH: usize = 2000;
    if mem::size_of::<T>() == 0 {
        return;
    }
    let len = v.len();
    if len <= MAX_INSERTION {
        if len >= 2 {
            insertion_sort_shift_left(v, 1, &is_less);
        }
        return;
    }
    let mut buf = Vec::<T>::with_capacity(len);
    let buf = buf.as_mut_ptr();
    if len <= CHUNK_LENGTH {
        let res = unsafe { merge_sort(v, buf, &is_less) };
        if res == MergeSortResult::Descending {
            v.reverse();
        }
        return;
    }
    let mut iter = {
        let buf = SendPtr(buf);
        let is_less = &is_less;
        v.par_chunks_mut(CHUNK_LENGTH)
            .with_max_len(1)
            .enumerate()
            .map(move |(i, chunk)| {
                let l = CHUNK_LENGTH * i;
                let r = l + chunk.len();
                unsafe {
                    let buf = buf.get().add(l);
                    (l, r, merge_sort(chunk, buf, is_less))
                }
            })
            .collect::<Vec<_>>()
            .into_iter()
            .peekable()
    };
    let mut chunks = Vec::with_capacity(iter.len());
    while let Some((a, mut b, res)) = iter.next() {
        if res != MergeSortResult::Sorted {
            while let Some(&(x, y, r)) = iter.peek() {
                if r == res
                    && (r == MergeSortResult::Descending) == is_less(&v[x], &v[x - 1])
                {
                    b = y;
                    iter.next();
                } else {
                    break;
                }
            }
        }
        if res == MergeSortResult::Descending {
            v[a..b].reverse();
        }
        chunks.push((a, b));
    }
    unsafe {
        merge_recurse(v.as_mut_ptr(), buf, &chunks, false, &is_less);
    }
}



Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\slice\test.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\split_producer.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\str.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\string.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\src\vec.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\tests\chars.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\tests\clones.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\tests\collect.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\tests\cross-pool.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\tests\debug.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\tests\drain_vec.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\tests\intersperse.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\tests\issue671-unzip.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\tests\issue671.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\tests\iter_panic.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\tests\named-threads.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\tests\octillion.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\tests\par_bridge_recursion.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\tests\producer_split_at.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\tests\sort-panic-safe.rs
Processing file: overunsafe库\当前流行的rust库\rayon-main\rayon-main\tests\str.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\examples\blocking.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\examples\form.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\examples\h3_simple.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\examples\json_dynamic.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\examples\json_typed.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\examples\simple.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\examples\tor_socks.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\examples\wasm_github_fetch\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\async_impl\body.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\async_impl\client.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\async_impl\decoder.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\async_impl\h3_client\connect.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\async_impl\h3_client\dns.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\async_impl\h3_client\mod.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\async_impl\h3_client\pool.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\async_impl\mod.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\async_impl\multipart.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\async_impl\request.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\async_impl\response.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\async_impl\upgrade.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\blocking\body.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: send_future, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\blocking\body.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: send_future, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\blocking\body.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: send_future, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\blocking\body.rs 

Found function with unsafe block in send_future:
File: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\blocking\body.rs
Start Line: 275, End Line: 350
async fn send_future(sender: Sender) -> Result<(), crate::Error> {
    use bytes::{BufMut, BytesMut};
    use futures_util::SinkExt;
    use std::cmp;
    let con_len = sender.body.1;
    let cap = cmp::min(sender.body.1.unwrap_or(8192), 8192);
    let mut written = 0;
    let mut buf = BytesMut::with_capacity(cap as usize);
    let mut body = sender.body.0;
    let mut tx = Some(sender.tx);
    loop {
        if Some(written) == con_len {
            return Ok(());
        }
        if buf.is_empty() {
            if buf.remaining_mut() == 0 {
                buf.reserve(8192);
                let uninit = buf.chunk_mut();
                unsafe {
                    ptr::write_bytes(uninit.as_mut_ptr(), 0, uninit.len());
                }
            }
            let bytes = unsafe {
                mem::transmute::<&mut UninitSlice, &mut [u8]>(buf.chunk_mut())
            };
            match body.read(bytes) {
                Ok(0) => {
                    return Ok(());
                }
                Ok(n) => {
                    unsafe {
                        buf.advance_mut(n);
                    }
                }
                Err(e) => {
                    let _ = tx
                        .take()
                        .expect("tx only taken on error")
                        .clone()
                        .try_send(Err(Abort));
                    return Err(crate::error::body(e));
                }
            }
        }
        let buf_len = buf.len() as u64;
        tx.as_mut()
            .expect("tx only taken on error")
            .send(Ok(buf.split().freeze()))
            .await
            .map_err(crate::error::body)?;
        written += buf_len;
    }
}



Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\blocking\client.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\blocking\mod.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\blocking\multipart.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\blocking\request.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\blocking\response.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\blocking\wait.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\connect.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\cookie.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\dns\gai.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\dns\hickory.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\dns\mod.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\dns\resolve.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\error.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\into_url.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\proxy.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\redirect.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\response.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\tls.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\util.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\wasm\body.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\wasm\client.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\wasm\mod.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\wasm\multipart.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\wasm\request.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\src\wasm\response.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\tests\badssl.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\tests\blocking.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\tests\brotli.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\tests\client.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\tests\cookie.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\tests\deflate.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\tests\gzip.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\tests\multipart.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\tests\proxy.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\tests\redirect.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\tests\support\delay_server.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\tests\support\mod.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\tests\support\server.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\tests\timeouts.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\tests\upgrade.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\tests\wasm_simple.rs
Processing file: overunsafe库\当前流行的rust库\reqwest-master\reqwest-master\tests\zstd.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\benchmarks\src\bench.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\benchmarks\src\routing.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\db_pools\codegen\src\database.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\db_pools\codegen\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\db_pools\codegen\tests\ui-fail\database-syntax.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\db_pools\codegen\tests\ui-fail\database-types.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\db_pools\codegen\tests\ui-fail-nightly\database-syntax.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\db_pools\codegen\tests\ui-fail-nightly\database-types.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\db_pools\codegen\tests\ui-fail-stable\database-syntax.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\db_pools\codegen\tests\ui-fail-stable\database-types.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\db_pools\codegen\tests\ui-fail.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\db_pools\lib\src\config.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\db_pools\lib\src\database.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\db_pools\lib\src\diesel.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\db_pools\lib\src\error.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\db_pools\lib\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\db_pools\lib\src\pool.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\db_pools\lib\tests\databases.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\dyn_templates\src\context.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\dyn_templates\src\engine\handlebars.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\dyn_templates\src\engine\minijinja.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\dyn_templates\src\engine\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\dyn_templates\src\engine\tera.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\dyn_templates\src\fairing.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\dyn_templates\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\dyn_templates\src\metadata.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\dyn_templates\src\template.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\dyn_templates\tests\templates.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\sync_db_pools\codegen\src\database.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\sync_db_pools\codegen\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\sync_db_pools\codegen\tests\ui-fail\database-syntax.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\sync_db_pools\codegen\tests\ui-fail\database-types.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\sync_db_pools\codegen\tests\ui-fail-nightly\database-syntax.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\sync_db_pools\codegen\tests\ui-fail-nightly\database-types.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\sync_db_pools\codegen\tests\ui-fail-stable\database-syntax.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\sync_db_pools\codegen\tests\ui-fail-stable\database-types.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\sync_db_pools\codegen\tests\ui-fail.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\sync_db_pools\lib\build.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\sync_db_pools\lib\src\config.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\sync_db_pools\lib\src\connection.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\sync_db_pools\lib\src\error.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\sync_db_pools\lib\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\sync_db_pools\lib\src\poolable.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\sync_db_pools\lib\tests\databases.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\sync_db_pools\lib\tests\shutdown.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\ws\src\duplex.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\ws\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\contrib\ws\src\websocket.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\attribute\async_bound\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\attribute\catch\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\attribute\catch\parse.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\attribute\entry\launch.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\attribute\entry\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\attribute\entry\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\attribute\entry\test.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\attribute\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\attribute\param\guard.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\attribute\param\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\attribute\param\parse.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\attribute\route\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\attribute\route\parse.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\attribute\suppress\lint.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\attribute\suppress\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\bang\export.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\bang\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\bang\test_guide.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\bang\typed_stream.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\bang\uri.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\bang\uri_parsing.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\derive\form_field.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\derive\from_form.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\derive\from_form_field.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\derive\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\derive\responder.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\derive\uri_display.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\exports.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\http_codegen.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\name.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\proc_macro_ext.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\src\syn_ext.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\async-entry.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\async-routes.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\catcher.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\expansion.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\from_form.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\from_form_field.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\responder.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\route-data.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\route-format.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\route-ranking.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\route-raw.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\route-uniqueness.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\route.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\segment-ignore.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\typed-uris.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\async-entry.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\bad-ignored-segments.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\catch.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\catchers.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\catch_type_errors.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\from_form.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\from_form_field.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\from_form_type_errors.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\responder-types.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\responder.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\route-attribute-general-syntax.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\route-path-bad-syntax.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\route-type-errors.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\route-warnings.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\routes.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\typed-uri-bad-type.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\typed-uris-bad-params.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\typed-uris-invalid-syntax.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\uri_display.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail\uri_display_type_errors.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\async-entry.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\bad-ignored-segments.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\catch.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\catchers.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\catch_type_errors.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\from_form.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\from_form_field.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\from_form_type_errors.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\responder-types.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\responder.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\route-attribute-general-syntax.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\route-path-bad-syntax.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\route-type-errors.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\route-warnings.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\routes.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\typed-uri-bad-type.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\typed-uris-bad-params.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\typed-uris-invalid-syntax.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\uri_display.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-nightly\uri_display_type_errors.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\async-entry.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\bad-ignored-segments.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\catch.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\catchers.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\catch_type_errors.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\from_form.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\from_form_field.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\from_form_type_errors.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\responder-types.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\responder.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\route-attribute-general-syntax.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\route-path-bad-syntax.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\route-type-errors.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\route-warnings.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\routes.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\typed-uri-bad-type.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\typed-uris-bad-params.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\typed-uris-invalid-syntax.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\uri_display.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail-stable\uri_display_type_errors.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\ui-fail.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\codegen\tests\uri_display.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\ext.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\header\accept.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\header\content_type.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\header\header.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\header\known_media_types.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\header\media_type.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\header\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\header\proxy_proto.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\method.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\parse\accept.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\parse\checkers.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\parse\indexed.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\parse\media_type.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\parse\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\parse\uri\error.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\parse\uri\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\parse\uri\parser.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: authority, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\parse\uri\parser.rs 

Found function with unsafe block in authority:
File: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\parse\uri\parser.rs
Start Line: 59, End Line: 81
#[parser]
pub fn authority<'a>(input: &mut RawInput<'a>) -> Result<'a, Authority<'a>> {
    let prefix = take_while(is_reg_name_char)?;
    let (user_info, host, port) = switch! {
        peek(b'[') if prefix.is_empty() => (None, host() ?, port() ?), eat(b':') => { let
        suffix = take_while(is_reg_name_char) ?; switch! { peek(b':') => { let end =
        (take_while(is_user_info_char) ?, eat(b'@') ?).0; (input.span(prefix, end),
        host() ?, port() ?) }, eat(b'@') => (input.span(prefix, suffix), host() ?, port()
        ?), _ => (None, prefix, maybe_port(& suffix) ?) } }, eat(b'@') => (Some(prefix),
        host() ?, port() ?), _ => (None, prefix, None),
    };
    unsafe { Authority::raw(input.start.into(), user_info, host, port) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: absolute, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\parse\uri\parser.rs 

Found function with unsafe block in absolute:
File: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\parse\uri\parser.rs
Start Line: 94, End Line: 98
#[parser]
pub fn absolute<'a>(input: &mut RawInput<'a>) -> Result<'a, Absolute<'a>> {
    let scheme = scheme()?;
    let (_, (authority, path), query) = (eat(b':')?, hier_part()?, query()?);
    unsafe { Absolute::raw(input.start.into(), scheme, authority, path, query) }
}



Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\parse\uri\tables.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\parse\uri\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\raw_str.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: _replace_plus, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\raw_str.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: html_escape, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\raw_str.rs 

Found method with unsafe block in html_escape:
File: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\raw_str.rs
Start Line: 404, End Line: 467
/// Returns an HTML escaped version of `self`. Allocates only when
/// characters need to be escaped.
///
/// The following characters are escaped: `&`, `<`, `>`, `"`, `'`, `/`,
/// <code>`</code>. **This suffices as long as the escaped string is not
/// used in an execution context such as inside of &lt;script> or &lt;style>
/// tags!** See the [OWASP XSS Prevention Rules] for more information.
///
/// [OWASP XSS Prevention Rules]: https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet#XSS_Prevention_Rules
///
/// # Example
///
/// Strings with HTML sequences are escaped:
///
/// ```rust
/// # extern crate rocket;
/// use rocket::http::RawStr;
///
/// let raw_str: &RawStr = "<b>Hi!</b>".into();
/// let escaped = raw_str.html_escape();
/// assert_eq!(escaped, "&lt;b&gt;Hi!&lt;&#x2F;b&gt;");
///
/// let raw_str: &RawStr = "Hello, <i>world!</i>".into();
/// let escaped = raw_str.html_escape();
/// assert_eq!(escaped, "Hello, &lt;i&gt;world!&lt;&#x2F;i&gt;");
/// ```
///
/// Strings without HTML sequences remain untouched:
///
/// ```rust
/// # extern crate rocket;
/// use rocket::http::RawStr;
///
/// let raw_str: &RawStr = "Hello!".into();
/// let escaped = raw_str.html_escape();
/// assert_eq!(escaped, "Hello!");
///
/// let raw_str: &RawStr = "大阪".into();
/// let escaped = raw_str.html_escape();
/// assert_eq!(escaped, "大阪");
/// ```
pub fn html_escape(&self) -> Cow<'_, str> {
    let mut escaped = false;
    let mut allocated = Vec::new();
    for c in self.as_bytes() {
        match *c {
            b'&' | b'<' | b'>' | b'"' | b'\'' | b'/' | b'`' => {
                if !escaped {
                    let i = (c as *const u8 as usize) - (self.as_ptr() as usize);
                    allocated = Vec::with_capacity(self.len() * 2);
                    allocated.extend_from_slice(&self.as_bytes()[..i]);
                }
                match *c {
                    b'&' => allocated.extend_from_slice(b"&amp;"),
                    b'<' => allocated.extend_from_slice(b"&lt;"),
                    b'>' => allocated.extend_from_slice(b"&gt;"),
                    b'"' => allocated.extend_from_slice(b"&quot;"),
                    b'\'' => allocated.extend_from_slice(b"&#x27;"),
                    b'/' => allocated.extend_from_slice(b"&#x2F;"),
                    b'`' => allocated.extend_from_slice(b"&#96;"),
                    _ => unreachable!(),
                }
                escaped = true;
            }
            _ if escaped => allocated.push(*c),
            _ => {}
        }
    }
    if escaped {
        unsafe { Cow::Owned(String::from_utf8_unchecked(allocated)) }
    } else {
        Cow::Borrowed(self.as_str())
    }
}



-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: false, name: split_at_byte, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\raw_str.rs 

Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\status.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\uri\absolute.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\uri\asterisk.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\uri\authority.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\uri\error.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\uri\fmt\encoding.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\uri\fmt\formatter.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: with_prefix, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\uri\fmt\formatter.rs 

Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\uri\fmt\from_uri_param.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\uri\fmt\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\uri\fmt\part.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\uri\fmt\uri_display.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\uri\host.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\uri\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\uri\origin.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\uri\path_query.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\uri\reference.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\uri\segments.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\http\src\uri\uri.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\build.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\fuzz\targets\collision-matching.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\fuzz\targets\uri-normalization.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\fuzz\targets\uri-parsing.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\fuzz\targets\uri-roundtrip.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\catcher\catcher.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\catcher\handler.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\catcher\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\config\cli_colors.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\config\config.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\config\http_header.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\config\ident.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\config\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\config\secret_key.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\config\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\data\capped.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\data\data.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\data\data_stream.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\data\from_data.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\data\io_stream.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\data\limits.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\data\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\data\peekable.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\data\transform.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\erased.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: make_io_handler, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\erased.rs 

Found method with unsafe block in make_io_handler:
File: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\erased.rs
Start Line: 143, End Line: 159
pub fn make_io_handler<'a, T: 'static>(
    &'a mut self,
    constructor: impl for<'r> FnOnce(
        &'r Request<'r>,
        &'a mut Response<'r>,
    ) -> Option<(T, Box<dyn IoHandler + 'r>)>,
) -> Option<(T, ErasedIoHandler)> {
    let parent: Arc<ErasedRequest> = self._request.clone();
    let io: Option<(T, Box<dyn IoHandler + '_>)> = {
        let parent: &ErasedRequest = &parent;
        let parent: &'static ErasedRequest = unsafe { transmute(parent) };
        let request: &Request<'_> = &parent.request;
        constructor(request, &mut self.response)
    };
    io.map(|(v, io)| (
        v,
        ErasedIoHandler {
            _request: parent,
            io,
        },
    ))
}



Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\error.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\fairing\ad_hoc.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\fairing\fairings.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\fairing\info_kind.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\fairing\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\form\buffer.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\form\context.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\form\error.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\form\field.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\form\form.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\form\from_form.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\form\from_form_field.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\form\lenient.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\form\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\form\name\buf.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\form\name\key.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\form\name\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\form\name\name.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\form\name\view.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\form\options.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\form\parser.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\form\strict.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\form\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\form\validate.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\fs\file_name.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\fs\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\fs\named_file.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\fs\rewrite.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\fs\server.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\fs\temp_file.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\http\cookies.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\http\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\lifecycle.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\listener\bind.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\listener\bounced.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\listener\cancellable.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\listener\connection.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\listener\default.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\listener\endpoint.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\listener\listener.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\listener\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\listener\quic.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\listener\tcp.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\listener\unix.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\local\asynchronous\client.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\local\asynchronous\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\local\asynchronous\request.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\local\asynchronous\response.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\local\blocking\client.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\local\blocking\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\local\blocking\request.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\local\blocking\response.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\local\client.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\local\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\local\request.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\local\response.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\mtls\certificate.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\mtls\config.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\mtls\error.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\mtls\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\mtls\name.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\outcome.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\phase.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\request\atomic_method.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\request\from_param.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\request\from_request.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\request\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\request\request.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\request\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\response\body.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\response\content.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\response\debug.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\response\flash.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\response\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\response\redirect.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\response\responder.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\response\response.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\response\status.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\response\stream\bytes.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\response\stream\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\response\stream\one.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\response\stream\raw_sse.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\response\stream\reader.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\response\stream\sse.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\response\stream\text.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\rocket.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\route\handler.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\route\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\route\route.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\route\segment.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\route\uri.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\router\collider.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\router\matcher.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\router\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\router\router.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\sentinel.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\serde\json.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\serde\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\serde\msgpack.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\serde\uuid.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\server.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\shield\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\shield\policy.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\shield\shield.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\shutdown\config.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\shutdown\handle.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\shutdown\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\shutdown\sig.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\shutdown\tripwire.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\state.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\tls\config.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\tls\error.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\tls\listener.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\tls\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\tls\resolver.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\trace\level.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\trace\macros.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\trace\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\trace\subscriber\common.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\trace\subscriber\compact.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\trace\subscriber\dynamic.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\trace\subscriber\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\trace\subscriber\pretty.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\trace\subscriber\request_id.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\trace\subscriber\visit.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\trace\traceable.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\util\chain.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\util\join.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\util\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\util\reader_stream.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\util\unix.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: lock_exclusive_nonblocking, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\util\unix.rs 

Found function with unsafe block in lock_exclusive_nonblocking:
File: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\util\unix.rs
Start Line: 4, End Line: 14
pub fn lock_exclusive_nonblocking<T: AsRawFd>(file: &T) -> io::Result<()> {
    let raw_fd = file.as_raw_fd();
    let res = unsafe { libc::flock(raw_fd, libc::LOCK_EX | libc::LOCK_NB) };
    match res {
        0 => Ok(()),
        _ => Err(io::Error::last_os_error()),
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: unlock_nonblocking, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\util\unix.rs 

Found function with unsafe block in unlock_nonblocking:
File: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\src\util\unix.rs
Start Line: 16, End Line: 25
pub fn unlock_nonblocking<T: AsRawFd>(file: &T) -> io::Result<()> {
    let res = unsafe { libc::flock(file.as_raw_fd(), libc::LOCK_UN | libc::LOCK_NB) };
    match res {
        0 => Ok(()),
        _ => Err(io::Error::last_os_error()),
    }
}



Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\absolute-uris-okay-issue-443.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\adhoc-uri-normalizer.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\byte-slices-form-field-issue-2148.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\can-correct-bad-local-uri.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\can-launch-tls.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\catcher-cookies-1213.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\conditionally-set-server-header-996.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\config-proxy-proto-header.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\config-real-ip-header.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\config-secret-key-1500.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\content-length.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\cookies-private.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\derive-reexports.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\deserialize-limits-issue-2268.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\encoded-uris.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\fairing_before_head_strip-issue-546.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\file_server.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\flash-lazy-removes-issue-466.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\form-validation-names.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\form_method-issue-45.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\form_value_decoding-issue-82.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\form_value_from_encoded_str-issue-1425.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\forward-includes-status-1560.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\head_handling.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\http_serde.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\launch-inspect.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\limits.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\local-client-access-runtime-in-drop.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\local-client-json.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\local-request-content-type-issue-505.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\local_request_private_cookie-issue-368.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\many-cookie-jars-at-once.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\mapped-base-issue-1262.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\mount_point.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\multipart-limit.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\nested-fairing-attaches.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\on_launch_fairing_can_inspect_port.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\panic-handling.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\precise-content-type-matching.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\raw-strings-multipart-files-1987.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\recursive-singleton-fairing.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\redirect_from_catcher-issue-113.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\replace-content-type-518.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\responder_lifetime-issue-345.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\route_guard.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\scoped-uri.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\segments-issues-41-86.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\sentinel.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\session-cookies-issue-1506.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\shield.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\shutdown-fairings.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\strict_and_lenient_forms.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\timer-on-attach.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\tls-config-from-source-1503.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\twice_managed_state.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\typed-uri-docs-redef-issue-1373.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\unsound-local-request-1312.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\untracked-vs-tracked.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\core\lib\tests\uri-percent-encoding-issue-808.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\docs\tests\src\guide.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\docs\tests\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\docs\tests\src\readme.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\chat\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\chat\src\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\config\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\config\src\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\cookies\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\cookies\src\message.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\cookies\src\session.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\cookies\src\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\databases\src\diesel_mysql.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\databases\src\diesel_sqlite.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\databases\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\databases\src\rusqlite.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\databases\src\sqlx.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\databases\src\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\error-handling\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\error-handling\src\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\fairings\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\fairings\src\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\forms\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\forms\src\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\hello\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\hello\src\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\manual-routing\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\manual-routing\src\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\pastebin\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\pastebin\src\paste_id.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\pastebin\src\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\responders\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\responders\src\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\serialization\src\json.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\serialization\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\serialization\src\msgpack.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\serialization\src\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\serialization\src\uuid.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\state\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\state\src\managed_hit_count.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\state\src\managed_queue.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\state\src\request_local.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\state\src\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\static-files\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\static-files\src\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\templating\src\hbs.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\templating\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\templating\src\minijinja.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\templating\src\tera.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\templating\src\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\testing\src\async_required.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\testing\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\tls\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\tls\src\redirector.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\tls\src\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\todo\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\todo\src\task.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\todo\src\tests.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\examples\upgrade\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\testbench\src\client.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\testbench\src\config.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\testbench\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\testbench\src\main.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\testbench\src\runner.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\testbench\src\server.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\testbench\src\servers\bind.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\testbench\src\servers\ignite_failure.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\testbench\src\servers\infinite_stream.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\testbench\src\servers\mod.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\testbench\src\servers\mtls.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\testbench\src\servers\sni_resolver.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\testbench\src\servers\tls.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\testbench\src\servers\tls_resolver.rs
Processing file: overunsafe库\当前流行的rust库\Rocket-master\Rocket-master\testbench\src\servers\tracing.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\actix_example\api\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\actix_example\entity\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\actix_example\entity\src\post.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\actix_example\migration\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\actix_example\migration\src\m20220120_000001_create_post_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\actix_example\migration\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\actix_example\service\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\actix_example\service\src\mutation.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\actix_example\service\src\query.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\actix_example\service\tests\mock.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\actix_example\service\tests\prepare.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\actix_example\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\axum_example\api\src\flash.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\axum_example\api\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\axum_example\entity\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\axum_example\entity\src\post.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\axum_example\migration\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\axum_example\migration\src\m20220120_000001_create_post_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\axum_example\migration\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\axum_example\service\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\axum_example\service\src\mutation.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\axum_example\service\src\query.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\axum_example\service\tests\mock.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\axum_example\service\tests\prepare.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\axum_example\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\basic\src\entities.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\basic\src\example_cake.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\basic\src\example_cake_filling.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\basic\src\example_filling.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\basic\src\example_fruit.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\basic\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\basic\src\operation.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\basic\src\sea_orm_active_enums.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\basic\src\select.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\graphql_example\api\src\db.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\graphql_example\api\src\graphql\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\graphql_example\api\src\graphql\mutation\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\graphql_example\api\src\graphql\mutation\note.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\graphql_example\api\src\graphql\query\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\graphql_example\api\src\graphql\query\note.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\graphql_example\api\src\graphql\schema.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\graphql_example\api\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\graphql_example\entity\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\graphql_example\entity\src\note.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\graphql_example\migration\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\graphql_example\migration\src\m20220101_000001_create_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\graphql_example\migration\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\graphql_example\service\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\graphql_example\service\src\mutation.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\graphql_example\service\src\query.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\graphql_example\service\tests\mock.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\graphql_example\service\tests\prepare.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\graphql_example\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\jsonrpsee_example\api\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\jsonrpsee_example\entity\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\jsonrpsee_example\entity\src\post.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\jsonrpsee_example\migration\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\jsonrpsee_example\migration\src\m20220120_000001_create_post_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\jsonrpsee_example\migration\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\jsonrpsee_example\service\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\jsonrpsee_example\service\src\mutation.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\jsonrpsee_example\service\src\query.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\jsonrpsee_example\service\tests\mock.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\jsonrpsee_example\service\tests\prepare.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\jsonrpsee_example\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_example\migration\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_example\migration\src\m20231103_114510_notes.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_example\migration\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_example\src\app.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_example\src\bin\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_example\src\controllers\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_example\src\controllers\notes.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_example\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_example\src\models\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_example\src\models\notes.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_example\src\models\_entities\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_example\src\models\_entities\notes.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_example\src\models\_entities\prelude.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_example\tests\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_example\tests\models\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_example\tests\requests\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_example\tests\requests\notes.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_example\tests\tasks\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_example\tests\tasks\seed.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\examples\playground.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\migration\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\migration\src\m20220101_000001_users.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\migration\src\m20231103_114510_notes.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\migration\src\m20240520_173001_files.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\migration\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\app.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\bin\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\controllers\auth.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\controllers\files.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\controllers\graphql.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\controllers\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\controllers\notes.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\controllers\user.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\graphql\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\graphql\query_root.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\mailers\auth.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\mailers\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\models\files.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\models\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\models\notes.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\models\users.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\models\_entities\files.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\models\_entities\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\models\_entities\notes.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\models\_entities\prelude.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\models\_entities\users.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\tasks\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\tasks\seed.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\views\auth.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\views\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\views\user.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\workers\downloader.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_seaography\src\workers\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\examples\playground.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\migration\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\migration\src\m20220101_000001_users.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\migration\src\m20231103_114510_notes.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\migration\src\m20240520_173001_files.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\migration\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\app.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\bin\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\controllers\auth.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\controllers\files.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\controllers\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\controllers\notes.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\controllers\user.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\mailers\auth.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\mailers\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\models\files.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\models\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\models\notes.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\models\users.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\models\_entities\files.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\models\_entities\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\models\_entities\notes.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\models\_entities\prelude.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\models\_entities\users.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\tasks\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\tasks\seed.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\views\auth.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\views\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\views\user.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\workers\downloader.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\loco_starter\src\workers\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\poem_example\api\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\poem_example\entity\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\poem_example\entity\src\post.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\poem_example\migration\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\poem_example\migration\src\m20220120_000001_create_post_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\poem_example\migration\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\poem_example\service\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\poem_example\service\src\mutation.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\poem_example\service\src\query.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\poem_example\service\tests\mock.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\poem_example\service\tests\prepare.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\poem_example\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\proxy_gluesql_example\src\entity\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\proxy_gluesql_example\src\entity\post.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\proxy_gluesql_example\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_example\api\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_example\api\src\pool.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_example\entity\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_example\entity\src\post.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_example\migration\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_example\migration\src\m20220120_000001_create_post_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_example\migration\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_example\service\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_example\service\src\mutation.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_example\service\src\query.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_example\service\tests\mock.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_example\service\tests\prepare.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_example\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_okapi_example\api\src\error.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_okapi_example\api\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_okapi_example\api\src\okapi_example.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_okapi_example\api\src\pool.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_okapi_example\dto\src\dto.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_okapi_example\dto\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_okapi_example\entity\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_okapi_example\entity\src\post.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_okapi_example\migration\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_okapi_example\migration\src\m20220120_000001_create_post_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_okapi_example\migration\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_okapi_example\service\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_okapi_example\service\src\mutation.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_okapi_example\service\src\query.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_okapi_example\service\tests\mock.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_okapi_example\service\tests\prepare.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\rocket_okapi_example\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\salvo_example\api\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\salvo_example\entity\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\salvo_example\entity\src\post.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\salvo_example\migration\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\salvo_example\migration\src\m20220120_000001_create_post_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\salvo_example\migration\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\salvo_example\service\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\salvo_example\service\src\mutation.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\salvo_example\service\src\query.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\salvo_example\service\tests\mock.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\salvo_example\service\tests\prepare.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\salvo_example\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\graphql\src\entities\baker.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\graphql\src\entities\bakery.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\graphql\src\entities\cake.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\graphql\src\entities\cake_baker.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\graphql\src\entities\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\graphql\src\entities\prelude.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\graphql\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\graphql\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\graphql\src\query_root.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\migration\src\entity\baker.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\migration\src\entity\bakery.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\migration\src\entity\cake.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\migration\src\entity\cake_baker.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\migration\src\entity\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\migration\src\entity\prelude.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\migration\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\migration\src\m20230101_000001_create_bakery_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\migration\src\m20230101_000002_create_baker_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\migration\src\m20230101_000003_create_cake_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\migration\src\m20230101_000004_create_cake_baker_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\migration\src\m20230101_000005_create_customer_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\migration\src\m20230101_000006_create_order_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\migration\src\m20230101_000007_create_lineitem_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\migration\src\m20230102_000001_seed_bakery_data.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\seaography_example\migration\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\tonic_example\api\build.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\tonic_example\api\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\tonic_example\entity\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\tonic_example\entity\src\post.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\tonic_example\migration\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\tonic_example\migration\src\m20220120_000001_create_post_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\tonic_example\migration\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\tonic_example\service\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\tonic_example\service\src\mutation.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\tonic_example\service\src\query.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\tonic_example\service\tests\mock.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\tonic_example\service\tests\prepare.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\tonic_example\src\client.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\examples\tonic_example\src\server.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\1143\src\entity\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\1143\src\entity\sea_orm_active_enums.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\1143\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\1278\src\entity.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\1278\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\1357\src\entity.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\1357\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\1473\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\1599\entity\src\cake.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\1599\entity\src\cake_filling.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\1599\entity\src\filling.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\1599\entity\src\fruit.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\1599\entity\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\1599\graphql\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\1599\graphql\src\query_root.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\1790\insert_test.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\249\app\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\249\service\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\262\src\cake.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\262\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\319\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\319\src\material.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\324\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\324\src\model.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\352\src\binary_primary_key.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\352\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\352\src\quaternary_primary_key.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\352\src\quinary_primary_key.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\352\src\senary_primary_key.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\352\src\ternary_primary_key.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\352\src\unary_primary_key.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\356\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\356\src\model.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\400\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\400\src\model.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\471\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\471\src\post.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\471\src\setup.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\630\src\entity\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\630\src\entity\prelude.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\630\src\entity\underscores.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\630\src\entity\underscores_workaround.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\630\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\693\src\container.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\693\src\content.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\693\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\86\src\cake.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\86\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\issues\892\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-cli\src\bin\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-cli\src\bin\sea.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-cli\src\cli.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-cli\src\commands\generate.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-cli\src\commands\migrate.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-cli\src\commands\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-cli\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-cli\template\migration\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-cli\template\migration\src\m20220101_000001_create_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-cli\template\migration\src\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\entity\active_enum.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\entity\base_entity.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\entity\column.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\entity\conjunct_relation.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\entity\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\entity\primary_key.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\entity\relation.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\entity\transformer.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\entity\writer.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\error.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\duplicated_many_to_many_paths\bills.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\duplicated_many_to_many_paths\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\duplicated_many_to_many_paths\prelude.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\duplicated_many_to_many_paths\users.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\duplicated_many_to_many_paths\users_saved_bills.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\duplicated_many_to_many_paths\users_votes.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\many_to_many\bills.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\many_to_many\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\many_to_many\prelude.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\many_to_many\users.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\many_to_many\users_votes.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\many_to_many_multiple\bills.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\many_to_many_multiple\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\many_to_many_multiple\prelude.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\many_to_many_multiple\users.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\many_to_many_multiple\users_votes.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\self_referencing\bills.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\self_referencing\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\self_referencing\prelude.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\tests_cfg\self_referencing\users.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\src\util.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact\cake.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact\cake_filling.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact\cake_filling_price.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact\cake_with_double.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact\cake_with_float.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact\child.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact\collection.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact\collection_float.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact\filling.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact\fruit.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact\parent.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact\prelude.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact\rust_keyword.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact\vendor.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_attributes\cake_multiple.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_attributes\cake_none.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_attributes\cake_one.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_derives\cake_multiple.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_derives\cake_none.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_derives\cake_one.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_schema_name\cake.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_schema_name\cake_filling.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_schema_name\cake_filling_price.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_schema_name\cake_with_double.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_schema_name\cake_with_float.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_schema_name\child.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_schema_name\collection.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_schema_name\collection_float.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_schema_name\filling.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_schema_name\fruit.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_schema_name\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_schema_name\parent.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_schema_name\prelude.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_schema_name\rust_keyword.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_schema_name\vendor.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_serde\cake_both.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_serde\cake_deserialize.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_serde\cake_none.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_serde\cake_serialize.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\compact_with_serde\cake_serialize_with_hidden_column.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded\cake.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded\cake_filling.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded\cake_filling_price.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded\cake_with_double.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded\cake_with_float.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded\child.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded\collection.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded\collection_float.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded\filling.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded\fruit.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded\parent.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded\prelude.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded\rust_keyword.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded\vendor.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_attributes\cake_multiple.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_attributes\cake_none.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_attributes\cake_one.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_derives\cake_multiple.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_derives\cake_none.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_derives\cake_one.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_schema_name\cake.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_schema_name\cake_filling.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_schema_name\cake_filling_price.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_schema_name\cake_with_double.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_schema_name\cake_with_float.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_schema_name\child.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_schema_name\collection.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_schema_name\collection_float.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_schema_name\filling.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_schema_name\fruit.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_schema_name\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_schema_name\parent.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_schema_name\prelude.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_schema_name\rust_keyword.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_schema_name\vendor.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_serde\cake_both.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_serde\cake_deserialize.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_serde\cake_none.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_serde\cake_serialize.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\expanded_with_serde\cake_serialize_with_hidden_column.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\postgres\binary_json.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\postgres\binary_json_expanded.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\with_seaography\cake.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-codegen\tests\with_seaography\cake_expanded.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\active_enum.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\active_enum_display.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\active_model.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\active_model_behavior.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\attributes.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\case_style.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\column.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\derive_iden.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\entity.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\entity_model.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\from_query_result.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\into_active_model.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\migration.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\model.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\partial_model.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\primary_key.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\related_entity.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\relation.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\sql_type_match.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\try_getable_from_json.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\util.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\derives\value_type.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\strum\enum_iter.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\strum\helpers\case_style.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\strum\helpers\metadata.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\strum\helpers\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\strum\helpers\type_props.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\strum\helpers\variant_props.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\src\strum\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\tests\derive_active_enum_test.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\tests\derive_entity_model_column_name_test.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-macros\tests\derive_value_type_test.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\src\cli.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\src\connection.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\src\manager.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\src\migrator.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\src\prelude.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\src\schema.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\src\seaql_migrations.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\src\util.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\tests\common\migration\m20220118_000001_create_cake_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\tests\common\migration\m20220118_000002_create_fruit_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\tests\common\migration\m20220118_000003_seed_cake_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\tests\common\migration\m20220118_000004_create_tea_enum.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\tests\common\migration\m20220923_000001_seed_cake_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\tests\common\migration\m20230109_000001_seed_cake_table.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\tests\common\migration\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\tests\common\migrator\default.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\tests\common\migrator\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\tests\common\migrator\override_migration_table_name.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\tests\common\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-migration\tests\main.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-rocket\codegen\src\database.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-rocket\codegen\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-rocket\lib\src\config.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-rocket\lib\src\database.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-rocket\lib\src\error.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-rocket\lib\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\sea-orm-rocket\lib\src\pool.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\database\connection.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\database\db_connection.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\database\mock.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\database\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\database\proxy.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\database\statement.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\database\stream\metric.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\database\stream\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\database\stream\query.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\database\stream\transaction.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\database\transaction.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\docs.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\driver\mock.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\driver\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\driver\proxy.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\driver\sqlx_common.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\driver\sqlx_mysql.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\driver\sqlx_postgres.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\driver\sqlx_sqlite.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\entity\active_enum.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\entity\active_model.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\entity\base_entity.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\entity\column.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\entity\identity.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\entity\link.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\entity\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\entity\model.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\entity\partial_model.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\entity\prelude.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\entity\primary_key.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\entity\relation.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\error.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\executor\cursor.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\executor\delete.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\executor\execute.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\executor\insert.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\executor\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\executor\paginator.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\executor\query.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\executor\select.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\executor\update.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\metric.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\query\combine.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\query\delete.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\query\helper.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\query\insert.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\query\join.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\query\json.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\query\loader.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\query\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\query\select.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\query\traits.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\query\update.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\query\util.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\schema\entity.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\schema\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\tests_cfg\cake.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\tests_cfg\cake_expanded.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\tests_cfg\cake_filling.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\tests_cfg\cake_filling_price.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\tests_cfg\cake_seaography.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\tests_cfg\entity_linked.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\tests_cfg\filling.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\tests_cfg\fruit.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\tests_cfg\indexes.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\tests_cfg\lunch_set.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\tests_cfg\lunch_set_expanded.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\tests_cfg\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\tests_cfg\rust_keyword.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\tests_cfg\sea_orm_active_enums.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\tests_cfg\vendor.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\src\util.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\active_enum_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\basic.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\bits_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\byte_primary_key_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\collection_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\bakery_chain\baker.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\bakery_chain\bakery.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\bakery_chain\cake.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\bakery_chain\cakes_bakers.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\bakery_chain\customer.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\bakery_chain\lineitem.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\bakery_chain\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\bakery_chain\order.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\bakery_chain\schema.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\active_enum.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\active_enum_child.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\active_enum_vec.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\applog.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\binary.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\bits.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\byte_primary_key.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\categories.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\collection.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\collection_expanded.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\custom_active_model.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\dyn_table_name_lazy_static.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\edit_log.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\event_trigger.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\insert_default.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\json_struct.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\json_vec.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\json_vec_derive.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\metadata.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\pi.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\repository.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\satellite.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\schema.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\sea_orm_active_enums.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\self_join.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\teas.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\transaction_log.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\uuid_fmt.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\features\value_type.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\runtime.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\common\setup\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\connection_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\crud\create_baker.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\crud\create_cake.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\crud\create_lineitem.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\crud\create_order.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\crud\deletes.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\crud\error.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\crud\mod.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\crud\updates.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\crud_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\cursor_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\delete_by_id_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\derive_iden_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\derive_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\dyn_table_name_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\empty_insert_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\enum_primary_key_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\event_trigger_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\execute_unprepared_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\insert_default_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\json_struct_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\json_vec_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\loader_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\parallel_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\partial_model_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\pi_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\query_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\relational_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\returning_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\self_join_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\sequential_op_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\sql_err_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\stream_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\string_primary_key_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\timestamp_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\time_crate_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\transaction_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\type_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\upsert_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\uuid_fmt_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\uuid_tests.rs
Processing file: overunsafe库\当前流行的rust库\sea-orm-master\sea-orm-master\tests\value_type_tests.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\build.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\src\de\format.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\src\de\ignored_any.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\src\de\impls.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\src\de\mod.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\src\de\seed.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\src\de\size_hint.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\src\de\value.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\src\integer128.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\src\macros.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\src\private\de.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\src\private\doc.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\src\private\mod.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\src\private\ser.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\src\ser\fmt.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\src\ser\impls.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\src\ser\impossible.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\src\ser\mod.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde\src\std_error.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive\build.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive\src\bound.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive\src\de.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive\src\dummy.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive\src\fragment.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive\src\internals\ast.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive\src\internals\attr.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive\src\internals\case.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive\src\internals\check.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive\src\internals\ctxt.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive\src\internals\mod.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive\src\internals\receiver.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive\src\internals\respan.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive\src\internals\symbol.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive\src\pretend.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive\src\ser.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive\src\this.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive_internals\build.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\serde_derive_internals\lib.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\no_std\src\main.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: panic, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\no_std\src\main.rs 

Found function with unsafe block in panic:
File: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\no_std\src\main.rs
Start Line: 15, End Line: 19
#[panic_handler]
fn panic(_info: &core::panic::PanicInfo) -> ! {
    unsafe {
        libc::abort();
    }
}



Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\bytes\mod.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\compiletest.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\macros\mod.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\regression\issue2371.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\regression\issue2409.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\regression\issue2415.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\regression.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\test_annotations.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\test_borrow.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\test_de.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\test_de_error.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\test_gen.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\test_identifier.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\test_ignored_any.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\test_macros.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\test_remote.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\test_roundtrip.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\test_self.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\test_ser.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\test_serde_path.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\test_unstable.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\test_value.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\borrow\bad_lifetimes.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\borrow\duplicate_lifetime.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\borrow\duplicate_variant.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\borrow\empty_lifetimes.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\borrow\no_lifetimes.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\borrow\struct_variant.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\borrow\wrong_lifetime.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\conflict\adjacent-tag.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\conflict\flatten-newtype-struct.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\conflict\flatten-tuple-struct.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\conflict\from-try-from.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\conflict\internal-tag-alias.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\conflict\internal-tag.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\default-attribute\enum.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\default-attribute\enum_path.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\default-attribute\tuple_struct.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\default-attribute\tuple_struct_path.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\duplicate-attribute\rename-and-ser.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\duplicate-attribute\rename-ser-rename-ser.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\duplicate-attribute\rename-ser-rename.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\duplicate-attribute\rename-ser-ser.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\duplicate-attribute\two-rename-ser.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\duplicate-attribute\with-and-serialize-with.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\enum-representation\content-no-tag.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\enum-representation\internal-tuple-variant.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\enum-representation\partially_tagged_wrong_order.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\enum-representation\untagged-and-adjacent.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\enum-representation\untagged-and-content.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\enum-representation\untagged-and-internal.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\enum-representation\untagged-struct.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\expected-string\boolean.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\expected-string\byte_character.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\expected-string\byte_string.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\expected-string\character.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\expected-string\float.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\expected-string\integer.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\identifier\both.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\identifier\field_struct.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\identifier\field_tuple.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\identifier\newtype_not_last.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\identifier\not_unit.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\identifier\other_not_last.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\identifier\other_untagged.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\identifier\other_variant.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\identifier\variant_struct.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\identifier\variant_tuple.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\malformed\bound.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\malformed\cut_off.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\malformed\not_list.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\malformed\rename.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\malformed\str_suffix.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\malformed\trailing_expr.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\on_unimplemented.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\precondition\deserialize_de_lifetime.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\precondition\deserialize_dst.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\precondition\serialize_field_identifier.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\precondition\serialize_variant_identifier.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\remote\bad_getter.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\remote\bad_remote.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\remote\double_generic.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\remote\enum_getter.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\remote\missing_field.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\remote\nonremote_getter.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\remote\unknown_field.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\remote\wrong_de.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\remote\wrong_getter.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\remote\wrong_ser.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\rename\container_unknown_rename_rule.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\rename\variant_unknown_rename_rule.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\struct-representation\internally-tagged-tuple.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\struct-representation\internally-tagged-unit.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\transparent\at_most_one.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\transparent\de_at_least_one.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\transparent\enum.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\transparent\ser_at_least_one.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\transparent\unit_struct.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\transparent\with_from.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\transparent\with_into.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\transparent\with_try_from.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\type-attribute\from.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\type-attribute\into.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\type-attribute\try_from.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\unexpected-literal\container.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\unexpected-literal\field.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\unexpected-literal\variant.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\unknown-attribute\container.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\unknown-attribute\field.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\unknown-attribute\variant.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\unsupported\union_de.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\unsupported\union_ser.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\with-variant\skip_de_newtype_field.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\with-variant\skip_de_struct_field.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\with-variant\skip_de_tuple_field.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\with-variant\skip_de_whole_variant.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\with-variant\skip_ser_newtype_field.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\with-variant\skip_ser_newtype_field_if.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\with-variant\skip_ser_struct_field.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\with-variant\skip_ser_struct_field_if.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\with-variant\skip_ser_tuple_field.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\with-variant\skip_ser_tuple_field_if.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\ui\with-variant\skip_ser_whole_variant.rs
Processing file: overunsafe库\当前流行的rust库\serde-master\serde-master\test_suite\tests\unstable\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\benches\copy.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\benches\fs.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\benches\rt_current_thread.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\benches\rt_multi_threaded.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\benches\signal.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: send_signal, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\benches\signal.rs 

Found function with unsafe block in send_signal:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\benches\signal.rs
Start Line: 36, End Line: 42
pub fn send_signal(signal: libc::c_int) {
    use libc::{getpid, kill};
    unsafe {
        assert_eq!(kill(getpid(), signal), 0);
    }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\benches\spawn.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\benches\sync_broadcast.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\benches\sync_mpsc.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\benches\sync_mpsc_oneshot.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\benches\sync_notify.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\benches\sync_rwlock.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\benches\sync_semaphore.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\benches\sync_watch.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\benches\time_now.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\benches\time_timeout.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\examples\chat.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\examples\connect.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\examples\custom-executor-tokio-context.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\examples\custom-executor.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\examples\dump.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\examples\echo-udp.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\examples\echo.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\examples\hello_world.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\examples\named-pipe-multi-client.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\examples\named-pipe-ready.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\examples\named-pipe.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\examples\print_each_packet.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\examples\proxy.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\examples\tinydb.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\examples\tinyhttp.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\examples\udp-client.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\examples\udp-codec.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\stress-test\examples\simple_echo_tcp.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tests-build\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tests-build\tests\fail\macros_core_no_default.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tests-build\tests\fail\macros_dead_code.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tests-build\tests\fail\macros_invalid_input.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tests-build\tests\fail\macros_type_mismatch.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tests-build\tests\macros.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tests-build\tests\macros_clippy.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tests-build\tests\pass\forward_args_and_output.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tests-build\tests\pass\macros_main_loop.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tests-build\tests\pass\macros_main_return.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tests-integration\src\bin\test-cat.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tests-integration\src\bin\test-mem.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tests-integration\src\bin\test-process-signal.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tests-integration\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tests-integration\tests\macros_main.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tests-integration\tests\macros_pin.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tests-integration\tests\macros_select.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tests-integration\tests\process_stdio.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tests-integration\tests\rt_yield.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\fuzz\fuzz_targets\fuzz_linked_list.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\blocking.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\doc\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\doc\os.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\canonicalize.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\copy.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\create_dir.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\create_dir_all.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\dir_builder.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\file\tests.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\file.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: as_fd, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\file.rs 

Found method with unsafe block in as_fd:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\file.rs
Start Line: 898, End Line: 902
fn as_fd(&self) -> std::os::unix::io::BorrowedFd<'_> {
    unsafe {
        std::os::unix::io::BorrowedFd::borrow_raw(
            std::os::unix::io::AsRawFd::as_raw_fd(self),
        )
    }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\hard_link.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\metadata.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\mocks.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\open_options\mock_open_options.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\open_options.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\read.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\read_dir.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\read_link.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\read_to_string.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\remove_dir.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\remove_dir_all.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\remove_file.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\rename.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\set_permissions.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\symlink.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\symlink_dir.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\symlink_file.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\symlink_metadata.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\try_exists.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fs\write.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\future\block_on.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\future\maybe_done.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\future\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\future\poll_fn.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\future\trace.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\future\try_join.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\fuzz.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\async_buf_read.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\async_fd.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\async_read.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\async_seek.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\async_write.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\blocking.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: ensure_capacity_for, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\blocking.rs 

Found method with unsafe block in ensure_capacity_for:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\blocking.rs
Start Line: 230, End Line: 242
pub(crate) fn ensure_capacity_for(&mut self, bytes: &ReadBuf<'_>, max_buf_size: usize) {
    assert!(self.is_empty());
    let len = cmp::min(bytes.remaining(), max_buf_size);
    if self.buf.len() < len {
        self.buf.reserve(len - self.buf.len());
    }
    unsafe {
        self.buf.set_len(len);
    }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\bsd\poll_aio.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\interest.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\join.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\poll_evented.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\ready.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\read_buf.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: filled_mut, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\read_buf.rs 

Found method with unsafe block in filled_mut:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\read_buf.rs
Start Line: 71, End Line: 76
/// Returns a mutable reference to the filled portion of the buffer.
#[inline]
pub fn filled_mut(&mut self) -> &mut [u8] {
    let slice = &mut self.buf[..self.filled];
    unsafe { slice_assume_init_mut(slice) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: initialized_mut, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\read_buf.rs 

Found method with unsafe block in initialized_mut:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\read_buf.rs
Start Line: 101, End Line: 106
/// Returns a mutable reference to the initialized portion of the buffer.
///
/// This includes the filled portion.
#[inline]
pub fn initialized_mut(&mut self) -> &mut [u8] {
    let slice = &mut self.buf[..self.initialized];
    unsafe { slice_assume_init_mut(slice) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: initialize_unfilled_to, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\read_buf.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: initialize_unfilled_to, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\read_buf.rs 

Found method with unsafe block in initialize_unfilled_to:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\read_buf.rs
Start Line: 156, End Line: 175
/// Returns a mutable reference to the first `n` bytes of the unfilled part of the buffer, ensuring it is
/// fully initialized.
///
/// # Panics
///
/// Panics if `self.remaining()` is less than `n`.
#[inline]
#[track_caller]
pub fn initialize_unfilled_to(&mut self, n: usize) -> &mut [u8] {
    assert!(self.remaining() >= n, "n overflows remaining");
    let end = self.filled + n;
    if self.initialized < end {
        unsafe {
            self.buf[self.initialized..end]
                .as_mut_ptr()
                .write_bytes(0, end - self.initialized);
        }
        self.initialized = end;
    }
    let slice = &mut self.buf[self.filled..end];
    unsafe { slice_assume_init_mut(slice) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: chunk_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\read_buf.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: chunk_mut, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\read_buf.rs 

Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\seek.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\split.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\stderr.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\stdin.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\stdio_common.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\stdout.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\async_buf_read_ext.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\async_read_ext.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\async_seek_ext.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\async_write_ext.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\buf_reader.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\buf_stream.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\buf_writer.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\chain.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\copy.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\copy_bidirectional.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\copy_buf.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\empty.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\fill_buf.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\flush.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\lines.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\mem.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\read.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\read_buf.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\read_exact.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\read_int.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\read_line.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\read_to_end.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\read_to_string.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\read_until.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\repeat.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\shutdown.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\sink.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\split.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\take.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\vec_with_initialized.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_read_buf, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\vec_with_initialized.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_read_buf, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\vec_with_initialized.rs 

-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: apply_read_buf, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\vec_with_initialized.rs 

Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\write.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\write_all.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\write_all_buf.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\write_buf.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\write_int.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\io\util\write_vectored.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\loom\mocked.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\loom\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\loom\std\atomic_u16.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\loom\std\atomic_u32.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\loom\std\atomic_u64.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\loom\std\atomic_u64_as_mutex.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\loom\std\atomic_u64_native.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\loom\std\atomic_u64_static_const_new.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\loom\std\atomic_u64_static_once_cell.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\loom\std\atomic_usize.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\loom\std\barrier.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\loom\std\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\loom\std\mutex.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\loom\std\parking_lot.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\loom\std\unsafe_cell.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\macros\addr_of.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\macros\cfg.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\macros\join.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\macros\loom.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\macros\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\macros\pin.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\macros\ready.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\macros\select.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\macros\support.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\macros\thread_local.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\macros\trace.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\macros\try_join.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\addr.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\lookup_host.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\tcp\listener.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\tcp\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\tcp\socket.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: from_std_stream, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\tcp\socket.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: from_std_stream, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\tcp\socket.rs 

Found method with unsafe block in from_std_stream:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\tcp\socket.rs
Start Line: 755, End Line: 771
/// Converts a [`std::net::TcpStream`] into a `TcpSocket`. The provided
/// socket must not have been connected prior to calling this function. This
/// function is typically used together with crates such as [`socket2`] to
/// configure socket options that are not available on `TcpSocket`.
///
/// [`std::net::TcpStream`]: struct@std::net::TcpStream
/// [`socket2`]: https://docs.rs/socket2/
///
/// # Notes
///
/// The caller is responsible for ensuring that the socket is in
/// non-blocking mode. Otherwise all I/O operations on the socket
/// will block the thread, which will cause unexpected behavior.
/// Non-blocking mode can be set using [`set_nonblocking`].
///
/// [`set_nonblocking`]: std::net::TcpStream::set_nonblocking
///
/// # Examples
///
/// ```
/// use tokio::net::TcpSocket;
/// use socket2::{Domain, Socket, Type};
///
/// #[tokio::main]
/// async fn main() -> std::io::Result<()> {
///     let socket2_socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;
///     socket2_socket.set_nonblocking(true)?;
///
///     let socket = TcpSocket::from_std_stream(socket2_socket.into());
///
///     Ok(())
/// }
/// ```
pub fn from_std_stream(std_stream: std::net::TcpStream) -> TcpSocket {
    #[cfg(unix)]
    {
        use std::os::unix::io::{FromRawFd, IntoRawFd};
        let raw_fd = std_stream.into_raw_fd();
        unsafe { TcpSocket::from_raw_fd(raw_fd) }
    }
    #[cfg(windows)]
    {
        use std::os::windows::io::{FromRawSocket, IntoRawSocket};
        let raw_socket = std_stream.into_raw_socket();
        unsafe { TcpSocket::from_raw_socket(raw_socket) }
    }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\tcp\split.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\tcp\split_owned.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\tcp\stream.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_read_priv, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\tcp\stream.rs 

Found method with unsafe block in poll_read_priv:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\tcp\stream.rs
Start Line: 1285, End Line: 1292
pub(crate) fn poll_read_priv(
    &self,
    cx: &mut Context<'_>,
    buf: &mut ReadBuf<'_>,
) -> Poll<io::Result<()>> {
    unsafe { self.io.poll_read(cx, buf) }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\udp.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_recv_from, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\udp.rs 

Found method with unsafe block in poll_recv_from:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\udp.rs
Start Line: 1339, End Line: 1360
/// Attempts to receive a single datagram on the socket.
///
/// Note that on multiple calls to a `poll_*` method in the `recv` direction, only the
/// `Waker` from the `Context` passed to the most recent call will be scheduled to
/// receive a wakeup.
///
/// # Return value
///
/// The function returns:
///
/// * `Poll::Pending` if the socket is not ready to read
/// * `Poll::Ready(Ok(addr))` reads data from `addr` into `ReadBuf` if the socket is ready
/// * `Poll::Ready(Err(e))` if an error is encountered.
///
/// # Errors
///
/// This function may encounter any standard I/O error except `WouldBlock`.
///
/// # Notes
/// Note that the socket address **cannot** be implicitly trusted, because it is relatively
/// trivial to send a UDP datagram with a spoofed origin in a [packet injection attack].
/// Because UDP is stateless and does not validate the origin of a packet,
/// the attacker does not need to be able to intercept traffic in order to interfere.
/// It is important to be aware of this when designing your application-level protocol.
///
/// [packet injection attack]: https://en.wikipedia.org/wiki/Packet_injection
pub fn poll_recv_from(
    &self,
    cx: &mut Context<'_>,
    buf: &mut ReadBuf<'_>,
) -> Poll<io::Result<SocketAddr>> {
    #[allow(clippy::blocks_in_conditions)]
    let (n, addr) = ready!(
        self.io.registration().poll_read_io(cx, || { let b = unsafe { & mut * (buf
        .unfilled_mut() as * mut [std::mem::MaybeUninit < u8 >] as * mut [u8]) }; self.io
        .recv_from(b) })
    )?;
    unsafe {
        buf.assume_init(n);
    }
    buf.advance(n);
    Poll::Ready(Ok(addr))
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_peek_from, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\udp.rs 

Found method with unsafe block in poll_peek_from:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\udp.rs
Start Line: 1595, End Line: 1616
/// Receives data from the socket, without removing it from the input queue.
/// On success, returns the sending address of the datagram.
///
/// # Notes
///
/// Note that on multiple calls to a `poll_*` method in the `recv` direction, only the
/// `Waker` from the `Context` passed to the most recent call will be scheduled to
/// receive a wakeup
///
/// On Windows, if the data is larger than the buffer specified, the buffer
/// is filled with the first part of the data, and peek returns the error
/// `WSAEMSGSIZE(10040)`. The excess data is lost.
/// Make sure to always use a sufficiently large buffer to hold the
/// maximum UDP packet size, which can be up to 65536 bytes in size.
///
/// MacOS will return an error if you pass a zero-sized buffer.
///
/// If you're merely interested in learning the sender of the data at the head of the queue,
/// try [`poll_peek_sender`].
///
/// Note that the socket address **cannot** be implicitly trusted, because it is relatively
/// trivial to send a UDP datagram with a spoofed origin in a [packet injection attack].
/// Because UDP is stateless and does not validate the origin of a packet,
/// the attacker does not need to be able to intercept traffic in order to interfere.
/// It is important to be aware of this when designing your application-level protocol.
///
/// # Return value
///
/// The function returns:
///
/// * `Poll::Pending` if the socket is not ready to read
/// * `Poll::Ready(Ok(addr))` reads data from `addr` into `ReadBuf` if the socket is ready
/// * `Poll::Ready(Err(e))` if an error is encountered.
///
/// # Errors
///
/// This function may encounter any standard I/O error except `WouldBlock`.
///
/// [`poll_peek_sender`]: method@Self::poll_peek_sender
/// [packet injection attack]: https://en.wikipedia.org/wiki/Packet_injection
pub fn poll_peek_from(
    &self,
    cx: &mut Context<'_>,
    buf: &mut ReadBuf<'_>,
) -> Poll<io::Result<SocketAddr>> {
    #[allow(clippy::blocks_in_conditions)]
    let (n, addr) = ready!(
        self.io.registration().poll_read_io(cx, || { let b = unsafe { & mut * (buf
        .unfilled_mut() as * mut [std::mem::MaybeUninit < u8 >] as * mut [u8]) }; self.io
        .peek_from(b) })
    )?;
    unsafe {
        buf.assume_init(n);
    }
    buf.advance(n);
    Poll::Ready(Ok(addr))
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\datagram\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\datagram\socket.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\listener.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\pipe.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: from_owned_fd_unchecked, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\pipe.rs 

Found method with unsafe block in from_owned_fd_unchecked:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\pipe.rs
Start Line: 494, End Line: 498
/// Creates a new `Sender` from an [`OwnedFd`] without checking pipe properties.
///
/// This function is intended to construct a pipe from an [`OwnedFd`] representing
/// an anonymous pipe or a special FIFO file. The conversion assumes nothing about
/// the underlying pipe; it is left up to the user to make sure that the file
/// descriptor represents the writing end of a pipe and the pipe is set in
/// non-blocking mode.
///
/// # Panics
///
/// This function panics if it is not called from within a runtime with
/// IO enabled.
///
/// The runtime is usually set implicitly when this function is called
/// from a future driven by a tokio runtime, otherwise runtime can be set
/// explicitly with [`Runtime::enter`](crate::runtime::Runtime::enter) function.
pub fn from_owned_fd_unchecked(owned_fd: OwnedFd) -> io::Result<Sender> {
    let mio_tx = unsafe { mio_pipe::Sender::from_raw_fd(owned_fd.into_raw_fd()) };
    Sender::from_mio(mio_tx)
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: into_nonblocking_fd, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\pipe.rs 

Found method with unsafe block in into_nonblocking_fd:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\pipe.rs
Start Line: 740, End Line: 748
/// Converts the pipe into an [`OwnedFd`] in nonblocking mode.
///
/// This function will deregister this pipe end from the event loop and
/// perform the conversion. The returned file descriptor will be in nonblocking
/// mode.
pub fn into_nonblocking_fd(self) -> io::Result<OwnedFd> {
    let mio_pipe = self.io.into_inner()?;
    let owned_fd = unsafe { OwnedFd::from_raw_fd(mio_pipe.into_raw_fd()) };
    Ok(owned_fd)
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: is_pipe, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\pipe.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: is_pipe, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\pipe.rs 

Found function with unsafe block in is_pipe:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\pipe.rs
Start Line: 1369, End Line: 1383
/// Checks if the file descriptor is a pipe or a FIFO.
fn is_pipe(fd: BorrowedFd<'_>) -> io::Result<bool> {
    let mut stat: libc::stat = unsafe { std::mem::zeroed() };
    let r = unsafe { libc::fstat(fd.as_raw_fd(), &mut stat) };
    if r == -1 {
        Err(io::Error::last_os_error())
    } else {
        Ok((stat.st_mode as libc::mode_t & libc::S_IFMT) == libc::S_IFIFO)
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_file_flags, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\pipe.rs 

Found function with unsafe block in get_file_flags:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\pipe.rs
Start Line: 1386, End Line: 1394
/// Gets file descriptor's flags by fcntl.
fn get_file_flags(fd: BorrowedFd<'_>) -> io::Result<libc::c_int> {
    let flags = unsafe { libc::fcntl(fd.as_raw_fd(), libc::F_GETFL) };
    if flags < 0 { Err(io::Error::last_os_error()) } else { Ok(flags) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_nonblocking, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\pipe.rs 

Found function with unsafe block in set_nonblocking:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\pipe.rs
Start Line: 1409, End Line: 1422
/// Sets file descriptor's flags with `O_NONBLOCK` by fcntl.
fn set_nonblocking(fd: BorrowedFd<'_>, current_flags: libc::c_int) -> io::Result<()> {
    let flags = current_flags | libc::O_NONBLOCK;
    if flags != current_flags {
        let ret = unsafe { libc::fcntl(fd.as_raw_fd(), libc::F_SETFL, flags) };
        if ret < 0 {
            return Err(io::Error::last_os_error());
        }
    }
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_blocking, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\pipe.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_blocking, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\pipe.rs 

Found function with unsafe block in set_blocking:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\pipe.rs
Start Line: 1425, End Line: 1442
/// Removes `O_NONBLOCK` from fd's flags.
fn set_blocking<T: AsRawFd>(fd: &T) -> io::Result<()> {
    let previous = unsafe { libc::fcntl(fd.as_raw_fd(), libc::F_GETFL) };
    if previous == -1 {
        return Err(io::Error::last_os_error());
    }
    let new = previous & !libc::O_NONBLOCK;
    let r = unsafe { libc::fcntl(fd.as_raw_fd(), libc::F_SETFL, new) };
    if r == -1 { Err(io::Error::last_os_error()) } else { Ok(()) }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\socket.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: datagram, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\socket.rs 

Found method with unsafe block in datagram:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\socket.rs
Start Line: 230, End Line: 245
/// Converts the socket into a [`UnixDatagram`].
///
/// Calling this function on a socket created by [`new_stream`] will return an error.
///
/// [`new_stream`]: `UnixSocket::new_stream`
pub fn datagram(self) -> io::Result<UnixDatagram> {
    if self.ty() == socket2::Type::STREAM {
        return Err(
            io::Error::new(
                io::ErrorKind::Other,
                "datagram cannot be called on a stream socket",
            ),
        );
    }
    let mio = {
        use std::os::unix::io::{FromRawFd, IntoRawFd};
        let raw_fd = self.inner.into_raw_fd();
        unsafe { mio::net::UnixDatagram::from_raw_fd(raw_fd) }
    };
    UnixDatagram::from_mio(mio)
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\socketaddr.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\split.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\split_owned.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\stream.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\ucred.rs
-----------------------------------------------------------------
Checking unsafe block with 8 statements, complex: true, name: get_peer_cred, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\ucred.rs 

Found function with unsafe block in get_peer_cred:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\unix\ucred.rs
Start Line: 83, End Line: 120
pub(crate) fn get_peer_cred(sock: &UnixStream) -> io::Result<super::UCred> {
    use std::os::unix::io::AsRawFd;
    unsafe {
        let raw_fd = sock.as_raw_fd();
        let mut ucred = ucred { pid: 0, uid: 0, gid: 0 };
        let ucred_size = mem::size_of::<ucred>();
        assert!(mem::size_of::< u32 > () <= mem::size_of::< usize > ());
        assert!(ucred_size <= u32::MAX as usize);
        let mut ucred_size = ucred_size as socklen_t;
        let ret = getsockopt(
            raw_fd,
            SOL_SOCKET,
            SO_PEERCRED,
            &mut ucred as *mut ucred as *mut c_void,
            &mut ucred_size,
        );
        if ret == 0 && ucred_size as usize == mem::size_of::<ucred>() {
            Ok(super::UCred {
                uid: ucred.uid as unix::uid_t,
                gid: ucred.gid as unix::gid_t,
                pid: Some(ucred.pid as unix::pid_t),
            })
        } else {
            Err(io::Error::last_os_error())
        }
    }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\windows\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\windows\named_pipe.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: as_handle, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\windows\named_pipe.rs 

Found method with unsafe block in as_handle:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\net\windows\named_pipe.rs
Start Line: 933, End Line: 935
fn as_handle(&self) -> BorrowedHandle<'_> {
    unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\process\kill.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\process\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\process\unix\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\process\unix\orphan.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\process\unix\pidfd_reaper.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\process\unix\reap.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\process\windows.rs
-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: true, name: duplicate_handle, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\process\windows.rs 

Found function with unsafe block in duplicate_handle:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\process\windows.rs
Start Line: 260, End Line: 283
fn duplicate_handle<T: AsRawHandle>(io: &T) -> io::Result<StdFile> {
    use std::os::windows::prelude::FromRawHandle;
    unsafe {
        let mut dup_handle = INVALID_HANDLE_VALUE;
        let cur_proc = GetCurrentProcess();
        let status = DuplicateHandle(
            cur_proc,
            io.as_raw_handle() as _,
            cur_proc,
            &mut dup_handle,
            0,
            0,
            DUPLICATE_SAME_ACCESS,
        );
        if status == 0 {
            return Err(io::Error::last_os_error());
        }
        Ok(StdFile::from_raw_handle(dup_handle as _))
    }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\blocking\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\blocking\pool.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\blocking\schedule.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\blocking\shutdown.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\blocking\task.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\builder.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\config.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\context\blocking.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\context\current.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\context\runtime.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\context\runtime_mt.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\context\scoped.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\context.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\coop.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\driver.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\dump.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\handle.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\id.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\io\driver\signal.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\io\driver.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: turn, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\io\driver.rs 

Found method with unsafe block in turn:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\io\driver.rs
Start Line: 140, End Line: 188
fn turn(&mut self, handle: &Handle, max_wait: Option<Duration>) {
    debug_assert!(! handle.registrations.is_shutdown(& handle.synced.lock()));
    handle.release_pending_registrations();
    let events = &mut self.events;
    match self.poll.poll(events, max_wait) {
        Ok(()) => {}
        Err(ref e) if e.kind() == io::ErrorKind::Interrupted => {}
        #[cfg(target_os = "wasi")]
        Err(e) if e.kind() == io::ErrorKind::InvalidInput => {}
        Err(e) => panic!("unexpected error when polling the I/O driver: {:?}", e),
    }
    let mut ready_count = 0;
    for event in events.iter() {
        let token = event.token();
        if token == TOKEN_WAKEUP {} else if token == TOKEN_SIGNAL {
            self.signal_ready = true;
        } else {
            let ready = Ready::from_mio(event);
            let ptr: *const ScheduledIo = token.0 as *const _;
            let io: &ScheduledIo = unsafe { &*ptr };
            io.set_readiness(Tick::Set, |curr| curr | ready);
            io.wake(ready);
            ready_count += 1;
        }
    }
    handle.metrics.incr_ready_count_by(ready_count);
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: add_source, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\io\driver.rs 

Found method with unsafe block in add_source:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\io\driver.rs
Start Line: 215, End Line: 239
/// Registers an I/O resource with the reactor for a given `mio::Ready` state.
///
/// The registration token is returned.
pub(super) fn add_source(
    &self,
    source: &mut impl mio::event::Source,
    interest: Interest,
) -> io::Result<Arc<ScheduledIo>> {
    let scheduled_io = self.registrations.allocate(&mut self.synced.lock())?;
    let token = scheduled_io.token();
    if let Err(e) = self.registry.register(source, token, interest.to_mio()) {
        unsafe { self.registrations.remove(&mut self.synced.lock(), &scheduled_io) };
        return Err(e);
    }
    self.metrics.incr_fd_count();
    Ok(scheduled_io)
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\io\metrics.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\io\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\io\registration.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\io\registration_set.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\io\scheduled_io.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\metrics\batch.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\metrics\histogram.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\metrics\io.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\metrics\mock.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\metrics\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\metrics\runtime.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\metrics\scheduler.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\metrics\worker.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\park.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: into_waker, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\park.rs 

Found method with unsafe block in into_waker:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\park.rs
Start Line: 291, End Line: 296
pub(crate) fn into_waker(self) -> Waker {
    unsafe {
        let raw = unparker_to_raw_waker(self.inner);
        Waker::from_raw(raw)
    }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\process.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\runtime.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\block_in_place.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\current_thread\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\defer.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\inject\metrics.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\inject\pop.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\inject\rt_multi_thread.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: push_batch, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\inject\rt_multi_thread.rs 

Found method with unsafe block in push_batch:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\inject\rt_multi_thread.rs
Start Line: 29, End Line: 59
/// Pushes several values into the queue.
///
/// # Safety
///
/// Must be called with the same `Synced` instance returned by `Inject::new`
#[inline]
pub(crate) unsafe fn push_batch<L, I>(&self, shared: L, mut iter: I)
where
    L: Lock<Synced>,
    I: Iterator<Item = task::Notified<T>>,
{
    let first = match iter.next() {
        Some(first) => first.into_raw(),
        None => return,
    };
    let mut prev = first;
    let mut counter = 1;
    iter.for_each(|next| {
        let next = next.into_raw();
        unsafe { prev.set_queue_next(Some(next)) };
        prev = next;
        counter += 1;
    });
    self.push_batch_inner(shared, first, prev, counter);
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: push_batch_inner, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\inject\rt_multi_thread.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: push_batch_inner, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\inject\rt_multi_thread.rs 

Found method with unsafe block in push_batch_inner:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\inject\rt_multi_thread.rs
Start Line: 66, End Line: 112
/// Inserts several tasks that have been linked together into the queue.
///
/// The provided head and tail may be be the same task. In this case, a
/// single task is inserted.
#[inline]
unsafe fn push_batch_inner<L>(
    &self,
    shared: L,
    batch_head: task::RawTask,
    batch_tail: task::RawTask,
    num: usize,
)
where
    L: Lock<Synced>,
{
    debug_assert!(unsafe { batch_tail.get_queue_next().is_none() });
    let mut synced = shared.lock();
    if synced.as_mut().is_closed {
        drop(synced);
        let mut curr = Some(batch_head);
        while let Some(task) = curr {
            curr = task.get_queue_next();
            let _ = unsafe { task::Notified::<T>::from_raw(task) };
        }
        return;
    }
    let synced = synced.as_mut();
    if let Some(tail) = synced.tail {
        unsafe {
            tail.set_queue_next(Some(batch_head));
        }
    } else {
        synced.head = Some(batch_head);
    }
    synced.tail = Some(batch_tail);
    let len = self.len.unsync_load();
    self.len.store(len + num, Release);
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\inject\shared.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\inject\synced.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\inject.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\lock.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\counters.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\handle\metrics.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\handle\taskdump.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\handle.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\idle.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\overflow.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\park.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\queue.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: make_fixed_size, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\queue.rs 

Found function with unsafe block in make_fixed_size:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\queue.rs
Start Line: 77, End Line: 82
fn make_fixed_size<T>(buffer: Box<[T]>) -> Box<[T; LOCAL_QUEUE_CAPACITY]> {
    assert_eq!(buffer.len(), LOCAL_QUEUE_CAPACITY);
    unsafe { Box::from_raw(Box::into_raw(buffer).cast()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: push_back, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\queue.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: push_back, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\queue.rs 

Found method with unsafe block in push_back:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\queue.rs
Start Line: 136, End Line: 177
/// Pushes a batch of tasks to the back of the queue. All tasks must fit in
/// the local queue.
///
/// # Panics
///
/// The method panics if there is not enough capacity to fit in the queue.
pub(crate) fn push_back(
    &mut self,
    tasks: impl ExactSizeIterator<Item = task::Notified<T>>,
) {
    let len = tasks.len();
    assert!(len <= LOCAL_QUEUE_CAPACITY);
    if len == 0 {
        return;
    }
    let head = self.inner.head.load(Acquire);
    let (steal, _) = unpack(head);
    let mut tail = unsafe { self.inner.tail.unsync_load() };
    if tail.wrapping_sub(steal) <= (LOCAL_QUEUE_CAPACITY - len) as UnsignedShort
    {} else {
        panic!()
    }
    for task in tasks {
        let idx = tail as usize & MASK;
        self.inner
            .buffer[idx]
            .with_mut(|ptr| {
                unsafe {
                    ptr::write((*ptr).as_mut_ptr(), task);
                }
            });
        tail = tail.wrapping_add(1);
    }
    self.inner.tail.store(tail, Release);
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: push_back_or_overflow, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\queue.rs 

Found method with unsafe block in push_back_or_overflow:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\queue.rs
Start Line: 185, End Line: 220
/// Pushes a task to the back of the local queue, if there is not enough
/// capacity in the queue, this triggers the overflow operation.
///
/// When the queue overflows, half of the current contents of the queue is
/// moved to the given Injection queue. This frees up capacity for more
/// tasks to be pushed into the local queue.
pub(crate) fn push_back_or_overflow<O: Overflow<T>>(
    &mut self,
    mut task: task::Notified<T>,
    overflow: &O,
    stats: &mut Stats,
) {
    let tail = loop {
        let head = self.inner.head.load(Acquire);
        let (steal, real) = unpack(head);
        let tail = unsafe { self.inner.tail.unsync_load() };
        if tail.wrapping_sub(steal) < LOCAL_QUEUE_CAPACITY as UnsignedShort {
            break tail;
        } else if steal != real {
            overflow.push(task);
            return;
        } else {
            match self.push_overflow(task, real, tail, overflow, stats) {
                Ok(_) => return,
                Err(v) => {
                    task = v;
                }
            }
        }
    };
    self.push_back_finish(task, tail);
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: push_back_finish, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\queue.rs 

Found method with unsafe block in push_back_finish:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\queue.rs
Start Line: 223, End Line: 241
fn push_back_finish(&self, task: task::Notified<T>, tail: UnsignedShort) {
    let idx = tail as usize & MASK;
    self.inner
        .buffer[idx]
        .with_mut(|ptr| {
            unsafe {
                ptr::write((*ptr).as_mut_ptr(), task);
            }
        });
    self.inner.tail.store(tail.wrapping_add(1), Release);
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: push_overflow, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\queue.rs 

Found method with unsafe block in push_overflow:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\queue.rs
Start Line: 250, End Line: 344
/// Moves a batch of tasks into the inject queue.
///
/// This will temporarily make some of the tasks unavailable to stealers.
/// Once `push_overflow` is done, a notification is sent out, so if other
/// workers "missed" some of the tasks during a steal, they will get
/// another opportunity.
#[inline(never)]
fn push_overflow<O: Overflow<T>>(
    &mut self,
    task: task::Notified<T>,
    head: UnsignedShort,
    tail: UnsignedShort,
    overflow: &O,
    stats: &mut Stats,
) -> Result<(), task::Notified<T>> {
    /// How many elements are we taking from the local queue.
    ///
    /// This is one less than the number of tasks pushed to the inject
    /// queue as we are also inserting the `task` argument.
    const NUM_TASKS_TAKEN: UnsignedShort = (LOCAL_QUEUE_CAPACITY / 2) as UnsignedShort;
    assert_eq!(
        tail.wrapping_sub(head) as usize, LOCAL_QUEUE_CAPACITY,
        "queue is not full; tail = {}; head = {}", tail, head
    );
    let prev = pack(head, head);
    if self
        .inner
        .head
        .compare_exchange(
            prev,
            pack(head.wrapping_add(NUM_TASKS_TAKEN), head.wrapping_add(NUM_TASKS_TAKEN)),
            Release,
            Relaxed,
        )
        .is_err()
    {
        return Err(task);
    }
    /// An iterator that takes elements out of the run queue.
    struct BatchTaskIter<'a, T: 'static> {
        buffer: &'a [UnsafeCell<MaybeUninit<task::Notified<T>>>; LOCAL_QUEUE_CAPACITY],
        head: UnsignedLong,
        i: UnsignedLong,
    }
    impl<'a, T: 'static> Iterator for BatchTaskIter<'a, T> {
        type Item = task::Notified<T>;
        #[inline]
        fn next(&mut self) -> Option<task::Notified<T>> {
            if self.i == UnsignedLong::from(NUM_TASKS_TAKEN) {
                None
            } else {
                let i_idx = self.i.wrapping_add(self.head) as usize & MASK;
                let slot = &self.buffer[i_idx];
                let task = slot.with(|ptr| unsafe { ptr::read((*ptr).as_ptr()) });
                self.i += 1;
                Some(task)
            }
        }
    }
    let batch_iter = BatchTaskIter {
        buffer: &self.inner.buffer,
        head: head as UnsignedLong,
        i: 0,
    };
    overflow.push_batch(batch_iter.chain(std::iter::once(task)));
    stats.incr_overflow_count();
    Ok(())
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: steal_into, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\queue.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: steal_into, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\queue.rs 

Found method with unsafe block in steal_into:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\queue.rs
Start Line: 394, End Line: 445
/// Steals half the tasks from self and place them into `dst`.
pub(crate) fn steal_into(
    &self,
    dst: &mut Local<T>,
    dst_stats: &mut Stats,
) -> Option<task::Notified<T>> {
    let dst_tail = unsafe { dst.inner.tail.unsync_load() };
    let (steal, _) = unpack(dst.inner.head.load(Acquire));
    if dst_tail.wrapping_sub(steal) > LOCAL_QUEUE_CAPACITY as UnsignedShort / 2 {
        return None;
    }
    let mut n = self.steal_into2(dst, dst_tail);
    if n == 0 {
        return None;
    }
    dst_stats.incr_steal_count(n as u16);
    dst_stats.incr_steal_operations();
    n -= 1;
    let ret_pos = dst_tail.wrapping_add(n);
    let ret_idx = ret_pos as usize & MASK;
    let ret = dst
        .inner
        .buffer[ret_idx]
        .with(|ptr| unsafe { ptr::read((*ptr).as_ptr()) });
    if n == 0 {
        return Some(ret);
    }
    dst.inner.tail.store(dst_tail.wrapping_add(n), Release);
    Some(ret)
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: steal_into2, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\queue.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: steal_into2, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\queue.rs 

Found method with unsafe block in steal_into2:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\queue.rs
Start Line: 449, End Line: 546
fn steal_into2(&self, dst: &mut Local<T>, dst_tail: UnsignedShort) -> UnsignedShort {
    let mut prev_packed = self.0.head.load(Acquire);
    let mut next_packed;
    let n = loop {
        let (src_head_steal, src_head_real) = unpack(prev_packed);
        let src_tail = self.0.tail.load(Acquire);
        if src_head_steal != src_head_real {
            return 0;
        }
        let n = src_tail.wrapping_sub(src_head_real);
        let n = n - n / 2;
        if n == 0 {
            return 0;
        }
        let steal_to = src_head_real.wrapping_add(n);
        assert_ne!(src_head_steal, steal_to);
        next_packed = pack(src_head_steal, steal_to);
        let res = self
            .0
            .head
            .compare_exchange(prev_packed, next_packed, AcqRel, Acquire);
        match res {
            Ok(_) => break n,
            Err(actual) => prev_packed = actual,
        }
    };
    assert!(n <= LOCAL_QUEUE_CAPACITY as UnsignedShort / 2, "actual = {}", n);
    let (first, _) = unpack(next_packed);
    for i in 0..n {
        let src_pos = first.wrapping_add(i);
        let dst_pos = dst_tail.wrapping_add(i);
        let src_idx = src_pos as usize & MASK;
        let dst_idx = dst_pos as usize & MASK;
        let task = self
            .0
            .buffer[src_idx]
            .with(|ptr| unsafe { ptr::read((*ptr).as_ptr()) });
        dst.inner
            .buffer[dst_idx]
            .with_mut(|ptr| unsafe { ptr::write((*ptr).as_mut_ptr(), task) });
    }
    let mut prev_packed = next_packed;
    loop {
        let head = unpack(prev_packed).1;
        next_packed = pack(head, head);
        let res = self
            .0
            .head
            .compare_exchange(prev_packed, next_packed, AcqRel, Acquire);
        match res {
            Ok(_) => return n,
            Err(actual) => {
                let (actual_steal, actual_real) = unpack(actual);
                assert_ne!(actual_steal, actual_real);
                prev_packed = actual;
            }
        }
    }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\stats.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\trace.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\trace_mock.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\worker\metrics.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\worker\taskdump.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: trace_core, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\worker\taskdump.rs 

Found method with unsafe block in trace_core:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\worker\taskdump.rs
Start Line: 11, End Line: 57
pub(super) fn trace_core(&self, mut core: Box<Core>) -> Box<Core> {
    core.is_traced = false;
    if core.is_shutdown {
        return core;
    }
    let timeout = Duration::from_millis(250);
    let barrier = if let Some(barrier) = self
        .shared
        .trace_status
        .trace_start
        .wait_timeout(timeout)
    {
        barrier
    } else {
        return core;
    };
    if !barrier.is_leader() {
        self.shared.trace_status.trace_end.wait();
        return core;
    }
    let owned = &self.shared.owned;
    let mut local = self.shared.steal_all();
    let synced = &self.shared.synced;
    let injection = &self.shared.inject;
    let traces = unsafe { trace_multi_thread(owned, &mut local, synced, injection) }
        .into_iter()
        .map(|(id, trace)| dump::Task::new(id, trace))
        .collect();
    let result = dump::Dump::new(traces);
    self.shared.trace_status.stash_result(result);
    self.shared.trace_status.trace_end.wait();
    core
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\worker\taskdump_mock.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\worker.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: push_remote_task, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\worker.rs 

Found method with unsafe block in push_remote_task:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread\worker.rs
Start Line: 1115, End Line: 1123
fn push_remote_task(&self, task: Notified) {
    self.shared.scheduler_metrics.inc_remote_schedule_count();
    let mut synced = self.shared.synced.lock();
    unsafe {
        self.shared.inject.push(&mut synced.inject, task);
    }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\counters.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\handle\metrics.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\handle\taskdump.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\handle.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\idle.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\overflow.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\park.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\queue.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\stats.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\trace.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\trace_mock.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\worker\metrics.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\worker\taskdump.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\worker\taskdump_mock.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\worker.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: next_remote_task_batch_synced, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\worker.rs 

Found method with unsafe block in next_remote_task_batch_synced:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\worker.rs
Start Line: 784, End Line: 814
fn next_remote_task_batch_synced(
    &self,
    cx: &Context,
    synced: &mut Synced,
    core: &mut Core,
    max: usize,
) -> Option<Notified> {
    super::counters::inc_num_remote_batch();
    let n = if core.is_searching {
        cx.shared().inject.len() / cx.shared().idle.num_searching() + 1
    } else {
        cx.shared().inject.len() / cx.shared().remotes.len() + 1
    };
    let n = usize::min(n, max) + 1;
    let mut tasks = unsafe { cx.shared().inject.pop_n(&mut synced.inject, n) };
    let ret = tasks.next();
    core.run_queue.push_back(tasks);
    ret
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: next_remote_task_synced, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\worker.rs 

Found method with unsafe block in next_remote_task_synced:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\worker.rs
Start Line: 1336, End Line: 1339
fn next_remote_task_synced(&self, synced: &mut Synced) -> Option<Notified> {
    unsafe { self.inject.pop(&mut synced.inject) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: push_remote_task_batch, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\worker.rs 

Found method with unsafe block in push_remote_task_batch:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\worker.rs
Start Line: 1438, End Line: 1445
fn push_remote_task_batch<I>(&self, iter: I)
where
    I: Iterator<Item = task::Notified<Arc<Handle>>>,
{
    unsafe {
        self.inject.push_batch(self, iter);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: push_remote_task_batch_synced, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\worker.rs 

Found method with unsafe block in push_remote_task_batch_synced:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\scheduler\multi_thread_alt\worker.rs
Start Line: 1447, End Line: 1454
fn push_remote_task_batch_synced<I>(&self, synced: &mut Synced, iter: I)
where
    I: Iterator<Item = task::Notified<Arc<Handle>>>,
{
    unsafe {
        self.inject.push_batch(&mut synced.inject, iter);
    }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\signal\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\abort.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\core.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: drop_future_or_output, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\core.rs 

Found method with unsafe block in drop_future_or_output:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\core.rs
Start Line: 345, End Line: 350
/// Drops the future.
///
/// # Safety
///
/// The caller must ensure it is safe to mutate the `stage` field.
pub(super) fn drop_future_or_output(&self) {
    unsafe {
        self.set_stage(Stage::Consumed);
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: store_output, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\core.rs 

Found method with unsafe block in store_output:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\core.rs
Start Line: 357, End Line: 362
/// Stores the task output.
///
/// # Safety
///
/// The caller must ensure it is safe to mutate the `stage` field.
pub(super) fn store_output(&self, output: super::Result<T::Output>) {
    unsafe {
        self.set_stage(Stage::Finished(output));
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_owner_id, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\core.rs 

Found method with unsafe block in get_owner_id:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\core.rs
Start Line: 399, End Line: 403
pub(super) fn get_owner_id(&self) -> Option<NonZeroU64> {
    unsafe { self.owner_id.with(|ptr| *ptr) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: wake_join, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\core.rs 

Found method with unsafe block in wake_join:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\core.rs
Start Line: 481, End Line: 486
pub(super) fn wake_join(&self) {
    self.waker
        .with(|ptr| match unsafe { &*ptr } {
            Some(waker) => waker.wake_by_ref(),
            None => panic!("waker missing"),
        });
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\error.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\harness.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: trailer, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\harness.rs 

Found method with unsafe block in trailer:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\harness.rs
Start Line: 42, End Line: 44
fn trailer(&self) -> &Trailer {
    unsafe { &self.cell.as_ref().trailer }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: core, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\harness.rs 

Found method with unsafe block in core:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\harness.rs
Start Line: 46, End Line: 48
fn core(&self) -> &Core<T, S> {
    unsafe { &self.cell.as_ref().core }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: dealloc, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\harness.rs 

Found method with unsafe block in dealloc:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\harness.rs
Start Line: 251, End Line: 274
pub(super) fn dealloc(self) {
    self.trailer().waker.with_mut(|_| ());
    self.core().stage.with_mut(|_| ());
    unsafe {
        drop(Box::from_raw(self.cell.as_ptr()));
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_new_task, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\harness.rs 

Found method with unsafe block in get_new_task:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\harness.rs
Start Line: 363, End Line: 367
/// Creates a new task that holds its own ref-count.
///
/// # Safety
///
/// Any use of `self` after this call must ensure that a ref-count to the
/// task holds the task alive until after the use of `self`. Passing the
/// returned Task to any method on `self` is unsound if dropping the Task
/// could drop `self` before the call on `self` returned.
fn get_new_task(&self) -> Task<S> {
    unsafe { Task::from_raw(self.cell.cast()) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: can_read_output, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\harness.rs 

Found function with unsafe block in can_read_output:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\harness.rs
Start Line: 370, End Line: 412
fn can_read_output(header: &Header, trailer: &Trailer, waker: &Waker) -> bool {
    let snapshot = header.state.load();
    debug_assert!(snapshot.is_join_interested());
    if !snapshot.is_complete() {
        let res = if snapshot.is_join_waker_set() {
            if unsafe { trailer.will_wake(waker) } {
                return false;
            }
            header
                .state
                .unset_waker()
                .and_then(|snapshot| set_join_waker(
                    header,
                    trailer,
                    waker.clone(),
                    snapshot,
                ))
        } else {
            set_join_waker(header, trailer, waker.clone(), snapshot)
        };
        match res {
            Ok(_) => return false,
            Err(snapshot) => {
                assert!(snapshot.is_complete());
            }
        }
    }
    true
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_join_waker, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\harness.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_join_waker, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\harness.rs 

Found function with unsafe block in set_join_waker:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\harness.rs
Start Line: 414, End Line: 440
fn set_join_waker(
    header: &Header,
    trailer: &Trailer,
    waker: Waker,
    snapshot: Snapshot,
) -> Result<Snapshot, Snapshot> {
    assert!(snapshot.is_join_interested());
    assert!(! snapshot.is_join_waker_set());
    unsafe {
        trailer.set_waker(Some(waker));
    }
    let res = header.state.set_join_waker();
    if res.is_err() {
        unsafe {
            trailer.set_waker(None);
        }
    }
    res
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\id.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\join.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\list.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: bind_inner, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\list.rs 

Found method with unsafe block in bind_inner:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\list.rs
Start Line: 106, End Line: 126
/// The part of `bind` that's the same for every type of future.
unsafe fn bind_inner(&self, task: Task<S>, notified: Notified<S>) -> Option<Notified<S>>
where
    S: Schedule,
{
    unsafe {
        task.header().set_owner_id(self.id);
    }
    let shard = self.list.lock_shard(&task);
    if self.closed.load(Ordering::Acquire) {
        drop(shard);
        task.shutdown();
        return None;
    }
    shard.push(task);
    Some(notified)
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_shard_id, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\mod.rs 

Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\raw.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: trailer_ptr, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\raw.rs 

Found method with unsafe block in trailer_ptr:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\raw.rs
Start Line: 179, End Line: 181
pub(super) fn trailer_ptr(&self) -> NonNull<Trailer> {
    unsafe { Header::get_trailer(self.ptr) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: drop_abort_handle, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\raw.rs 

Found method with unsafe block in drop_abort_handle:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\raw.rs
Start Line: 228, End Line: 231
pub(super) fn drop_abort_handle(self) {
    let vtable = self.header().vtable;
    unsafe { (vtable.drop_abort_handle)(self.ptr) }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\state.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\trace\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: with_current_collector, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\trace\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: trace_leaf, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\trace\mod.rs 

Found function with unsafe block in trace_leaf:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\trace\mod.rs
Start Line: 153, End Line: 210
/// If this is a sub-invocation of [`Trace::capture`], capture a backtrace.
///
/// The captured backtrace will be returned by [`Trace::capture`].
///
/// Invoking this function does nothing when it is not a sub-invocation
/// [`Trace::capture`].
#[inline(never)]
pub(crate) fn trace_leaf(cx: &mut task::Context<'_>) -> Poll<()> {
    let did_trace = unsafe {
        Context::try_with_current(|context_cell| {
                if let Some(mut collector) = context_cell.collector.take() {
                    let mut frames = vec![];
                    let mut above_leaf = false;
                    if let Some(active_frame) = context_cell.active_frame.get() {
                        let active_frame = active_frame.as_ref();
                        backtrace::trace(|frame| {
                            let below_root = !ptr::eq(
                                frame.symbol_address(),
                                active_frame.inner_addr,
                            );
                            if above_leaf && below_root {
                                frames.push(frame.to_owned().into());
                            }
                            if ptr::eq(frame.symbol_address(), trace_leaf as *const _) {
                                above_leaf = true;
                            }
                            below_root
                        });
                    }
                    collector.backtraces.push(frames);
                    context_cell.collector.set(Some(collector));
                    true
                } else {
                    false
                }
            })
            .unwrap_or(false)
    };
    if did_trace {
        context::with_scheduler(|scheduler| {
            if let Some(scheduler) = scheduler {
                match scheduler {
                    scheduler::Context::CurrentThread(s) => s.defer.defer(cx.waker()),
                    #[cfg(feature = "rt-multi-thread")]
                    scheduler::Context::MultiThread(s) => s.defer.defer(cx.waker()),
                    #[cfg(all(tokio_unstable, feature = "rt-multi-thread"))]
                    scheduler::Context::MultiThreadAlt(_) => unimplemented!(),
                }
            }
        });
        Poll::Pending
    } else {
        Poll::Ready(())
    }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\trace\symbol.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\trace\tree.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\task\waker.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\inject.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\loom_blocking.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\loom_current_thread\yield_now.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\loom_current_thread.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\loom_join_set.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\loom_local.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\loom_multi_thread\queue.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\loom_multi_thread\shutdown.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\loom_multi_thread\yield_now.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\loom_multi_thread.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\loom_multi_thread_alt\queue.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\loom_multi_thread_alt\shutdown.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\loom_multi_thread_alt\yield_now.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\loom_multi_thread_alt.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\loom_oneshot.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\queue.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\task.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\task_combinations.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: test_combination, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\task_combinations.rs 

Found function with unsafe block in test_combination:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\tests\task_combinations.rs
Start Line: 157, End Line: 488
#[allow(clippy::too_many_arguments)]
fn test_combination(
    rt: CombiRuntime,
    ls: CombiLocalSet,
    task: CombiTask,
    output: CombiOutput,
    ji: CombiJoinInterest,
    jh: CombiJoinHandle,
    ah: Option<CombiJoinHandle>,
    abort: CombiAbort,
    abort_src: CombiAbortSource,
) {
    match (abort_src, ah) {
        (CombiAbortSource::JoinHandle, _) if (jh as usize) < (abort as usize) => {
            return;
        }
        (CombiAbortSource::AbortHandle, Some(_)) => {
            return;
        }
        _ => {}
    }
    if (task == CombiTask::PanicOnDrop) && (output == CombiOutput::PanicOnDrop) {
        return;
    }
    if (task == CombiTask::PanicOnRunAndDrop)
        && (abort != CombiAbort::AbortedImmediately)
    {
        return;
    }
    is_debug(&rt);
    is_debug(&ls);
    is_debug(&task);
    is_debug(&output);
    is_debug(&ji);
    is_debug(&jh);
    is_debug(&ah);
    is_debug(&abort);
    is_debug(&abort_src);
    struct Rt {
        rt: crate::runtime::Runtime,
        ls: Option<crate::task::LocalSet>,
    }
    impl Rt {
        fn new(rt: CombiRuntime, ls: CombiLocalSet) -> Self {
            let rt = match rt {
                CombiRuntime::CurrentThread => {
                    Builder::new_current_thread().build().unwrap()
                }
                CombiRuntime::Multi1 => {
                    Builder::new_multi_thread().worker_threads(1).build().unwrap()
                }
                CombiRuntime::Multi2 => {
                    Builder::new_multi_thread().worker_threads(2).build().unwrap()
                }
            };
            let ls = match ls {
                CombiLocalSet::Yes => Some(crate::task::LocalSet::new()),
                CombiLocalSet::No => None,
            };
            Self { rt, ls }
        }
        fn block_on<T>(&self, task: T) -> T::Output
        where
            T: Future,
        {
            match &self.ls {
                Some(ls) => ls.block_on(&self.rt, task),
                None => self.rt.block_on(task),
            }
        }
        fn spawn<T>(&self, task: T) -> JoinHandle<T::Output>
        where
            T: Future + Send + 'static,
            T::Output: Send + 'static,
        {
            match &self.ls {
                Some(ls) => ls.spawn_local(task),
                None => self.rt.spawn(task),
            }
        }
    }
    struct Output {
        panic_on_drop: bool,
        on_drop: Option<oneshot::Sender<()>>,
    }
    impl Output {
        fn disarm(&mut self) {
            self.panic_on_drop = false;
        }
    }
    impl Drop for Output {
        fn drop(&mut self) {
            let _ = self.on_drop.take().unwrap().send(());
            if self.panic_on_drop {
                panic!("Panicking in Output");
            }
        }
    }
    struct FutWrapper<F> {
        inner: F,
        on_drop: Option<oneshot::Sender<()>>,
        panic_on_drop: bool,
    }
    impl<F: Future> Future for FutWrapper<F> {
        type Output = F::Output;
        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<F::Output> {
            unsafe {
                let me = Pin::into_inner_unchecked(self);
                let inner = Pin::new_unchecked(&mut me.inner);
                inner.poll(cx)
            }
        }
    }
    impl<F> Drop for FutWrapper<F> {
        fn drop(&mut self) {
            let _: Result<(), ()> = self.on_drop.take().unwrap().send(());
            if self.panic_on_drop {
                panic!("Panicking in FutWrapper");
            }
        }
    }
    struct Signals {
        on_first_poll: Option<oneshot::Sender<()>>,
        wait_complete: Option<oneshot::Receiver<()>>,
        on_output_drop: Option<oneshot::Sender<()>>,
    }
    async fn my_task(mut signal: Signals, task: CombiTask, out: CombiOutput) -> Output {
        let _ = signal.on_first_poll.take().unwrap().send(());
        let _ = signal.wait_complete.take().unwrap().await;
        crate::task::yield_now().await;
        if task == CombiTask::PanicOnRun || task == CombiTask::PanicOnRunAndDrop {
            panic!("Panicking in my_task on {:?}", std::thread::current().id());
        }
        Output {
            panic_on_drop: out == CombiOutput::PanicOnDrop,
            on_drop: signal.on_output_drop.take(),
        }
    }
    let rt = Rt::new(rt, ls);
    let (on_first_poll, wait_first_poll) = oneshot::channel();
    let (on_complete, wait_complete) = oneshot::channel();
    let (on_future_drop, wait_future_drop) = oneshot::channel();
    let (on_output_drop, wait_output_drop) = oneshot::channel();
    let signal = Signals {
        on_first_poll: Some(on_first_poll),
        wait_complete: Some(wait_complete),
        on_output_drop: Some(on_output_drop),
    };
    let mut handle = Some(
        rt
            .spawn(FutWrapper {
                inner: my_task(signal, task, output),
                on_drop: Some(on_future_drop),
                panic_on_drop: task == CombiTask::PanicOnDrop
                    || task == CombiTask::PanicOnRunAndDrop,
            }),
    );
    let mut aborted = false;
    if ji == CombiJoinInterest::Polled {
        assert!(
            handle.as_mut().unwrap().now_or_never().is_none(), "Polling handle succeeded"
        );
    }
    let mut abort_handle = if ah.is_some() || abort_src == CombiAbortSource::AbortHandle
    {
        handle.as_ref().map(JoinHandle::abort_handle)
    } else {
        None
    };
    let do_abort = |
        abort_handle: &mut Option<AbortHandle>,
        join_handle: Option<&mut JoinHandle<_>>|
    {
        match abort_src {
            CombiAbortSource::AbortHandle => abort_handle.take().unwrap().abort(),
            CombiAbortSource::JoinHandle => join_handle.unwrap().abort(),
        }
    };
    if abort == CombiAbort::AbortedImmediately {
        do_abort(&mut abort_handle, handle.as_mut());
        aborted = true;
    }
    if jh == CombiJoinHandle::DropImmediately {
        drop(handle.take().unwrap());
    }
    let got_polled = rt.block_on(wait_first_poll).is_ok();
    if !got_polled {
        assert!(
            aborted, "Task completed without ever being polled but was not aborted."
        );
    }
    if abort == CombiAbort::AbortedFirstPoll {
        do_abort(&mut abort_handle, handle.as_mut());
        aborted = true;
    }
    if jh == CombiJoinHandle::DropFirstPoll {
        drop(handle.take().unwrap());
    }
    if ah == Some(CombiJoinHandle::DropFirstPoll) {
        drop(abort_handle.take().unwrap());
    }
    let _ = on_complete.send(());
    assert!(
        rt.block_on(wait_future_drop).is_ok(), "The future should always be dropped."
    );
    if abort == CombiAbort::AbortedAfterFinish {
        do_abort(&mut abort_handle, handle.as_mut());
    }
    if jh == CombiJoinHandle::DropAfterNoConsume {
        if ah == Some(CombiJoinHandle::DropAfterNoConsume) {
            drop(handle.take().unwrap());
            let panic = panic::catch_unwind(
                panic::AssertUnwindSafe(|| {
                    drop(abort_handle.take().unwrap());
                }),
            );
            if panic.is_err() {
                assert!(
                    (output == CombiOutput::PanicOnDrop) && (! matches!(task,
                    CombiTask::PanicOnRun | CombiTask::PanicOnRunAndDrop)) && ! aborted,
                    "Dropping AbortHandle shouldn't panic here"
                );
            }
        } else {
            let panic = panic::catch_unwind(
                panic::AssertUnwindSafe(|| {
                    drop(handle.take().unwrap());
                }),
            );
            if panic.is_err() {
                assert!(
                    (output == CombiOutput::PanicOnDrop) && (! matches!(task,
                    CombiTask::PanicOnRun | CombiTask::PanicOnRunAndDrop)) && ! aborted,
                    "Dropping JoinHandle shouldn't panic here"
                );
            }
        }
    }
    if jh == CombiJoinHandle::DropAfterConsume {
        let result = rt.block_on(handle.as_mut().unwrap());
        match result {
            Ok(mut output) => {
                output.disarm();
                assert!(! aborted, "Task was aborted but returned output");
            }
            Err(err) if err.is_cancelled() => {
                assert!(aborted, "Cancelled output but not aborted")
            }
            Err(err) if err.is_panic() => {
                assert!(
                    (task == CombiTask::PanicOnRun) || (task == CombiTask::PanicOnDrop)
                    || (task == CombiTask::PanicOnRunAndDrop) || (output ==
                    CombiOutput::PanicOnDrop), "Panic but nothing should panic"
                );
            }
            _ => unreachable!(),
        }
        let mut handle = handle.take().unwrap();
        if abort == CombiAbort::AbortedAfterConsumeOutput {
            do_abort(&mut abort_handle, Some(&mut handle));
        }
        drop(handle);
        if ah == Some(CombiJoinHandle::DropAfterConsume) {
            drop(abort_handle.take());
        }
    }
    let output_created = rt.block_on(wait_output_drop).is_ok();
    assert_eq!(
        output_created, (! matches!(task, CombiTask::PanicOnRun |
        CombiTask::PanicOnRunAndDrop)) && ! aborted, "Creation of output object"
    );
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\thread_id.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\time\entry.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: read_state, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\time\entry.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: fire, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\time\entry.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: is_inner_init, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\time\entry.rs 

Found method with unsafe block in is_inner_init:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\time\entry.rs
Start Line: 489, End Line: 491
fn is_inner_init(&self) -> bool {
    unsafe { &*self.inner.get() }.is_some()
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\time\handle.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\time\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: process_at_sharded_time, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\time\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: true, name: clear_entry, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\time\mod.rs 

Found method with unsafe block in clear_entry:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\time\mod.rs
Start Line: 361, End Line: 371
/// Removes a registered timer from the driver.
///
/// The timer will be moved to the cancelled state. Wakers will _not_ be
/// invoked. If the timer is already completed, this function is a no-op.
///
/// This function always acquires the driver lock, even if the entry does
/// not appear to be registered.
///
/// SAFETY: The timer must not be registered with some other driver, and
/// `add_entry` must not be called concurrently.
pub(self) unsafe fn clear_entry(&self, entry: NonNull<TimerShared>) {
    unsafe {
        let mut lock = self.inner.lock_sharded_wheel(entry.as_ref().shard_id());
        if entry.as_ref().might_be_registered() {
            lock.remove(entry);
        }
        entry.as_ref().handle().fire(Ok(()));
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: lock_sharded_wheel, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\time\mod.rs 

Found method with unsafe block in lock_sharded_wheel:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\time\mod.rs
Start Line: 447, End Line: 454
/// Locks the driver's sharded wheel structure.
pub(super) fn lock_sharded_wheel(
    &self,
    shard_id: u32,
) -> crate::loom::sync::MutexGuard<'_, Wheel> {
    let index = shard_id % (self.wheels.len() as u32);
    unsafe { self.wheels.get_unchecked(index as usize).lock() }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\time\source.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\time\tests\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\time\wheel\level.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\time\wheel\mod.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: process_expiration, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\time\wheel\mod.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: process_expiration, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\time\wheel\mod.rs 

Found method with unsafe block in process_expiration:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\runtime\time\wheel\mod.rs
Start Line: 218, End Line: 251
/// iteratively find entries that are between the wheel's current
/// time and the expiration time.  for each in that population either
/// queue it for notification (in the case of the last level) or tier
/// it down to the next level (in all other cases).
pub(crate) fn process_expiration(&mut self, expiration: &Expiration) {
    let mut entries = self.take_entries(expiration);
    while let Some(item) = entries.pop_back() {
        if expiration.level == 0 {
            debug_assert_eq!(unsafe { item.cached_when() }, expiration.deadline);
        }
        match unsafe { item.mark_pending(expiration.deadline) } {
            Ok(()) => {
                self.pending.push_front(item);
            }
            Err(expiration_tick) => {
                let level = level_for(expiration.deadline, expiration_tick);
                unsafe {
                    self.levels[level].add_entry(item);
                }
            }
        }
    }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\signal\ctrl_c.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\signal\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\signal\registry.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\signal\reusable_box.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: try_set, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\signal\reusable_box.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: try_set, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\signal\reusable_box.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_pin, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\signal\reusable_box.rs 

Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\signal\unix.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: signal_enable, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\signal\unix.rs 

Found function with unsafe block in signal_enable:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\signal\unix.rs
Start Line: 256, End Line: 293
/// Enables this module to receive signal notifications for the `signal`
/// provided.
///
/// This will register the signal handler if it hasn't already been registered,
/// returning any error along the way if that fails.
fn signal_enable(signal: SignalKind, handle: &Handle) -> io::Result<()> {
    let signal = signal.0;
    if signal < 0 || signal_hook_registry::FORBIDDEN.contains(&signal) {
        return Err(
            Error::new(
                ErrorKind::Other,
                format!("Refusing to register signal {}", signal),
            ),
        );
    }
    handle.check_inner()?;
    let globals = globals();
    let siginfo = match globals.storage().get(signal as EventId) {
        Some(slot) => slot,
        None => return Err(io::Error::new(io::ErrorKind::Other, "signal too large")),
    };
    let mut registered = Ok(());
    siginfo
        .init
        .call_once(|| {
            registered = unsafe {
                signal_hook_registry::register(signal, move || action(globals, signal))
                    .map(|_| ())
            };
            if registered.is_ok() {
                siginfo.initialized.store(true, Ordering::Relaxed);
            }
        });
    registered?;
    if siginfo.initialized.load(Ordering::Relaxed) {
        Ok(())
    } else {
        Err(Error::new(ErrorKind::Other, "Failed to register signal handler"))
    }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\signal\windows\stub.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\signal\windows\sys.rs
-----------------------------------------------------------------
Checking unsafe block with 3 statements, complex: false, name: global_init, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\signal\windows\sys.rs 

Found function with unsafe block in global_init:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\signal\windows\sys.rs
Start Line: 90, End Line: 107
fn global_init() -> io::Result<()> {
    static INIT: Once = Once::new();
    let mut init = None;
    INIT.call_once(|| unsafe {
        let rc = console::SetConsoleCtrlHandler(Some(handler), 1);
        let ret = if rc == 0 { Err(io::Error::last_os_error()) } else { Ok(()) };
        init = Some(ret);
    });
    init.unwrap_or_else(|| Ok(()))
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\signal\windows.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\barrier.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\batch_semaphore.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: add_permits_locked, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\batch_semaphore.rs 

Found method with unsafe block in add_permits_locked:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\batch_semaphore.rs
Start Line: 306, End Line: 370
/// Release `rem` permits to the semaphore's wait list, starting from the
/// end of the queue.
///
/// If `rem` exceeds the number of permits needed by the wait list, the
/// remainder are assigned back to the semaphore.
fn add_permits_locked(&self, mut rem: usize, waiters: MutexGuard<'_, Waitlist>) {
    let mut wakers = WakeList::new();
    let mut lock = Some(waiters);
    let mut is_empty = false;
    while rem > 0 {
        let mut waiters = lock.take().unwrap_or_else(|| self.waiters.lock());
        'inner: while wakers.can_push() {
            match waiters.queue.last() {
                Some(waiter) => {
                    if !waiter.assign_permits(&mut rem) {
                        break 'inner;
                    }
                }
                None => {
                    is_empty = true;
                    break 'inner;
                }
            };
            let mut waiter = waiters.queue.pop_back().unwrap();
            if let Some(waker) = unsafe {
                waiter.as_mut().waker.with_mut(|waker| (*waker).take())
            } {
                wakers.push(waker);
            }
        }
        if rem > 0 && is_empty {
            let permits = rem;
            assert!(
                permits <= Self::MAX_PERMITS,
                "cannot add more than MAX_PERMITS permits ({})", Self::MAX_PERMITS
            );
            let prev = self.permits.fetch_add(rem << Self::PERMIT_SHIFT, Release);
            let prev = prev >> Self::PERMIT_SHIFT;
            assert!(
                prev + permits <= Self::MAX_PERMITS,
                "number of added permits ({}) would overflow MAX_PERMITS ({})", rem,
                Self::MAX_PERMITS
            );
            #[cfg(all(tokio_unstable, feature = "tracing"))]
            self.resource_span
                .in_scope(|| {
                    tracing::trace!(
                        target : "runtime::resource::state_update", permits = rem,
                        permits.op = "add",
                    )
                });
            rem = 0;
        }
        drop(waiters);
        wakers.wake_all();
    }
    assert_eq!(rem, 0);
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_acquire, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\batch_semaphore.rs 

-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: poll_acquire, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\batch_semaphore.rs 

Found method with unsafe block in poll_acquire:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\batch_semaphore.rs
Start Line: 397, End Line: 522
fn poll_acquire(
    &self,
    cx: &mut Context<'_>,
    num_permits: usize,
    node: Pin<&mut Waiter>,
    queued: bool,
) -> Poll<Result<(), AcquireError>> {
    let mut acquired = 0;
    let needed = if queued {
        node.state.load(Acquire) << Self::PERMIT_SHIFT
    } else {
        num_permits << Self::PERMIT_SHIFT
    };
    let mut lock = None;
    let mut curr = self.permits.load(Acquire);
    let mut waiters = loop {
        if curr & Self::CLOSED > 0 {
            return Poll::Ready(Err(AcquireError::closed()));
        }
        let mut remaining = 0;
        let total = curr
            .checked_add(acquired)
            .expect("number of permits must not overflow");
        let (next, acq) = if total >= needed {
            let next = curr - (needed - acquired);
            (next, needed >> Self::PERMIT_SHIFT)
        } else {
            remaining = (needed - acquired) - curr;
            (0, curr >> Self::PERMIT_SHIFT)
        };
        if remaining > 0 && lock.is_none() {
            lock = Some(self.waiters.lock());
        }
        match self.permits.compare_exchange(curr, next, AcqRel, Acquire) {
            Ok(_) => {
                acquired += acq;
                if remaining == 0 {
                    if !queued {
                        #[cfg(all(tokio_unstable, feature = "tracing"))]
                        self.resource_span
                            .in_scope(|| {
                                tracing::trace!(
                                    target : "runtime::resource::state_update", permits =
                                    acquired, permits.op = "sub",
                                );
                                tracing::trace!(
                                    target : "runtime::resource::async_op::state_update",
                                    permits_obtained = acquired, permits.op = "add",
                                )
                            });
                        return Poll::Ready(Ok(()));
                    } else if lock.is_none() {
                        break self.waiters.lock();
                    }
                }
                break lock.expect("lock must be acquired before waiting");
            }
            Err(actual) => curr = actual,
        }
    };
    if waiters.closed {
        return Poll::Ready(Err(AcquireError::closed()));
    }
    #[cfg(all(tokio_unstable, feature = "tracing"))]
    self.resource_span
        .in_scope(|| {
            tracing::trace!(
                target : "runtime::resource::state_update", permits = acquired, permits
                .op = "sub",
            )
        });
    if node.assign_permits(&mut acquired) {
        self.add_permits_locked(acquired, waiters);
        return Poll::Ready(Ok(()));
    }
    assert_eq!(acquired, 0);
    let mut old_waker = None;
    node.waker
        .with_mut(|waker| {
            let waker = unsafe { &mut *waker };
            if waker.as_ref().map_or(true, |waker| !waker.will_wake(cx.waker())) {
                old_waker = std::mem::replace(waker, Some(cx.waker().clone()));
            }
        });
    if !queued {
        let node = unsafe {
            let node = Pin::into_inner_unchecked(node) as *mut _;
            NonNull::new_unchecked(node)
        };
        waiters.queue.push_front(node);
    }
    drop(waiters);
    drop(old_waker);
    Poll::Pending
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\broadcast.rs
-----------------------------------------------------------------
Checking unsafe block with 4 statements, complex: true, name: notify_rx, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\broadcast.rs 

Found method with unsafe block in notify_rx:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\broadcast.rs
Start Line: 879, End Line: 941
fn notify_rx<'a, 'b: 'a>(&'b self, mut tail: MutexGuard<'a, Tail>) {
    let guard = Waiter::new();
    pin!(guard);
    let mut list = WaitersList::new(
        std::mem::take(&mut tail.waiters),
        guard.as_ref(),
        self,
    );
    let mut wakers = WakeList::new();
    'outer: loop {
        while wakers.can_push() {
            match list.pop_back_locked(&mut tail) {
                Some(waiter) => {
                    unsafe {
                        if let Some(waker) = (*waiter.as_ptr()).waker.take() {
                            wakers.push(waker);
                        }
                        let queued = &(*waiter.as_ptr()).queued;
                        assert!(queued.load(Relaxed));
                        queued.store(false, Release);
                    }
                }
                None => {
                    break 'outer;
                }
            }
        }
        drop(tail);
        wakers.wake_all();
        tail = self.tail.lock();
    }
    drop(tail);
    wakers.wake_all();
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: recv_ref, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\broadcast.rs 

Found method with unsafe block in recv_ref:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\broadcast.rs
Start Line: 1053, End Line: 1161
/// Locks the next value if there is one.
fn recv_ref(
    &mut self,
    waiter: Option<(&UnsafeCell<Waiter>, &Waker)>,
) -> Result<RecvGuard<'_, T>, TryRecvError> {
    let idx = (self.next & self.shared.mask as u64) as usize;
    let mut slot = self.shared.buffer[idx].read().unwrap();
    if slot.pos != self.next {
        drop(slot);
        let mut old_waker = None;
        let mut tail = self.shared.tail.lock();
        slot = self.shared.buffer[idx].read().unwrap();
        if slot.pos != self.next {
            let next_pos = slot.pos.wrapping_add(self.shared.buffer.len() as u64);
            if next_pos == self.next {
                if tail.closed {
                    return Err(TryRecvError::Closed);
                }
                if let Some((waiter, waker)) = waiter {
                    unsafe {
                        waiter
                            .with_mut(|ptr| {
                                match (*ptr).waker {
                                    Some(ref w) if w.will_wake(waker) => {}
                                    _ => {
                                        old_waker = std::mem::replace(
                                            &mut (*ptr).waker,
                                            Some(waker.clone()),
                                        );
                                    }
                                }
                                if !(*ptr).queued.load(Relaxed) {
                                    (*ptr).queued.store(true, Relaxed);
                                    tail.waiters.push_front(NonNull::new_unchecked(&mut *ptr));
                                }
                            });
                    }
                }
                drop(slot);
                drop(tail);
                drop(old_waker);
                return Err(TryRecvError::Empty);
            }
            let next = tail.pos.wrapping_sub(self.shared.buffer.len() as u64);
            let missed = next.wrapping_sub(self.next);
            drop(tail);
            if missed == 0 {
                self.next = self.next.wrapping_add(1);
                return Ok(RecvGuard { slot });
            }
            self.next = next;
            return Err(TryRecvError::Lagged(missed));
        }
    }
    self.next = self.next.wrapping_add(1);
    Ok(RecvGuard { slot })
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mpsc\block.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: observed_tail_position, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mpsc\block.rs 

Found method with unsafe block in observed_tail_position:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mpsc\block.rs
Start Line: 272, End Line: 282
/// Returns the `observed_tail_position` value, if set
pub(crate) fn observed_tail_position(&self) -> Option<usize> {
    if 0 == RELEASED & self.header.ready_slots.load(Acquire) {
        None
    } else {
        Some(self.header.observed_tail_position.with(|ptr| unsafe { *ptr }))
    }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mpsc\bounded.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mpsc\chan.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mpsc\error.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mpsc\list.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: find_block, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mpsc\list.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: find_block, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mpsc\list.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: find_block, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mpsc\list.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: find_block, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mpsc\list.rs 

Found method with unsafe block in find_block:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mpsc\list.rs
Start Line: 96, End Line: 179
fn find_block(&self, slot_index: usize) -> NonNull<Block<T>> {
    let start_index = block::start_index(slot_index);
    let offset = block::offset(slot_index);
    let mut block_ptr = self.block_tail.load(Acquire);
    let block = unsafe { &*block_ptr };
    let distance = block.distance(start_index);
    let mut try_updating_tail = distance > offset;
    loop {
        let block = unsafe { &(*block_ptr) };
        if block.is_at_index(start_index) {
            return unsafe { NonNull::new_unchecked(block_ptr) };
        }
        let next_block = block.load_next(Acquire).unwrap_or_else(|| block.grow());
        try_updating_tail &= block.is_final();
        if try_updating_tail {
            if self
                .block_tail
                .compare_exchange(block_ptr, next_block.as_ptr(), Release, Relaxed)
                .is_ok()
            {
                let tail_position = self.tail_position.fetch_add(0, Release);
                unsafe {
                    block.tx_release(tail_position);
                }
            } else {
                try_updating_tail = false;
            }
        }
        block_ptr = next_block.as_ptr();
        thread::yield_now();
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: try_advancing_head, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mpsc\list.rs 

Found method with unsafe block in try_advancing_head:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mpsc\list.rs
Start Line: 305, End Line: 330
/// Tries advancing the block pointer to the block referenced by `self.index`.
///
/// Returns `true` if successful, `false` if there is no next block to load.
fn try_advancing_head(&mut self) -> bool {
    let block_index = block::start_index(self.index);
    loop {
        let next_block = {
            let block = unsafe { self.head.as_ref() };
            if block.is_at_index(block_index) {
                return true;
            }
            block.load_next(Acquire)
        };
        let next_block = match next_block {
            Some(next_block) => next_block,
            None => {
                return false;
            }
        };
        self.head = next_block;
        thread::yield_now();
    }
}



-----------------------------------------------------------------
Checking unsafe block with 7 statements, complex: true, name: reclaim_blocks, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mpsc\list.rs 

Found method with unsafe block in reclaim_blocks:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mpsc\list.rs
Start Line: 332, End Line: 366
fn reclaim_blocks(&mut self, tx: &Tx<T>) {
    while self.free_head != self.head {
        unsafe {
            let block = self.free_head;
            let observed_tail_position = block.as_ref().observed_tail_position();
            let required_index = match observed_tail_position {
                Some(i) => i,
                None => return,
            };
            if required_index > self.index {
                return;
            }
            let next_block = block.as_ref().load_next(Relaxed);
            self.free_head = next_block.unwrap();
            tx.reclaim_block(block);
        }
        thread::yield_now();
    }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mpsc\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mpsc\unbounded.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mutex.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: skip_drop, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\mutex.rs 

Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\notify.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: notify_locked, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\notify.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: notify_locked, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\notify.rs 

Found function with unsafe block in notify_locked:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\notify.rs
Start Line: 747, End Line: 800
fn notify_locked(
    waiters: &mut WaitList,
    state: &AtomicUsize,
    curr: usize,
    strategy: NotifyOneStrategy,
) -> Option<Waker> {
    match get_state(curr) {
        EMPTY | NOTIFIED => {
            let res = state
                .compare_exchange(curr, set_state(curr, NOTIFIED), SeqCst, SeqCst);
            match res {
                Ok(_) => None,
                Err(actual) => {
                    let actual_state = get_state(actual);
                    assert!(actual_state == EMPTY || actual_state == NOTIFIED);
                    state.store(set_state(actual, NOTIFIED), SeqCst);
                    None
                }
            }
        }
        WAITING => {
            let waiter = match strategy {
                NotifyOneStrategy::Fifo => waiters.pop_back().unwrap(),
                NotifyOneStrategy::Lifo => waiters.pop_front().unwrap(),
            };
            let waiter = unsafe { waiter.as_ref() };
            let waker = unsafe { waiter.waker.with_mut(|waker| (*waker).take()) };
            waiter.notification.store_release(Notification::One(strategy));
            if waiters.is_empty() {
                state.store(set_state(curr, EMPTY), SeqCst);
            }
            waker
        }
        _ => unreachable!(),
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_notified, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\notify.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_notified, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\notify.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_notified, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\notify.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_notified, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\notify.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_notified, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\notify.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_notified, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\notify.rs 

Found method with unsafe block in poll_notified:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\notify.rs
Start Line: 933, End Line: 1144
fn poll_notified(self: Pin<&mut Self>, waker: Option<&Waker>) -> Poll<()> {
    let (notify, state, notify_waiters_calls, waiter) = self.project();
    'outer_loop: loop {
        match *state {
            State::Init => {
                let curr = notify.state.load(SeqCst);
                let res = notify
                    .state
                    .compare_exchange(
                        set_state(curr, NOTIFIED),
                        set_state(curr, EMPTY),
                        SeqCst,
                        SeqCst,
                    );
                if res.is_ok() {
                    *state = State::Done;
                    continue 'outer_loop;
                }
                let waker = waker.cloned();
                let mut waiters = notify.waiters.lock();
                let mut curr = notify.state.load(SeqCst);
                if get_num_notify_waiters_calls(curr) != *notify_waiters_calls {
                    *state = State::Done;
                    continue 'outer_loop;
                }
                loop {
                    match get_state(curr) {
                        EMPTY => {
                            let res = notify
                                .state
                                .compare_exchange(
                                    set_state(curr, EMPTY),
                                    set_state(curr, WAITING),
                                    SeqCst,
                                    SeqCst,
                                );
                            if let Err(actual) = res {
                                assert_eq!(get_state(actual), NOTIFIED);
                                curr = actual;
                            } else {
                                break;
                            }
                        }
                        WAITING => break,
                        NOTIFIED => {
                            let res = notify
                                .state
                                .compare_exchange(
                                    set_state(curr, NOTIFIED),
                                    set_state(curr, EMPTY),
                                    SeqCst,
                                    SeqCst,
                                );
                            match res {
                                Ok(_) => {
                                    *state = State::Done;
                                    continue 'outer_loop;
                                }
                                Err(actual) => {
                                    assert_eq!(get_state(actual), EMPTY);
                                    curr = actual;
                                }
                            }
                        }
                        _ => unreachable!(),
                    }
                }
                let mut old_waker = None;
                if waker.is_some() {
                    unsafe {
                        old_waker = waiter
                            .waker
                            .with_mut(|v| std::mem::replace(&mut *v, waker));
                    }
                }
                waiters.push_front(NonNull::from(waiter));
                *state = State::Waiting;
                drop(waiters);
                drop(old_waker);
                return Poll::Pending;
            }
            State::Waiting => {
                #[cfg(tokio_taskdump)]
                if let Some(waker) = waker {
                    let mut ctx = Context::from_waker(waker);
                    ready!(crate ::trace::trace_leaf(& mut ctx));
                }
                if waiter.notification.load(Acquire).is_some() {
                    drop(unsafe { waiter.waker.with_mut(|waker| (*waker).take()) });
                    waiter.notification.clear();
                    *state = State::Done;
                    return Poll::Ready(());
                }
                let mut old_waker = None;
                let mut waiters = notify.waiters.lock();
                if waiter.notification.load(Relaxed).is_some() {
                    old_waker = unsafe {
                        waiter.waker.with_mut(|waker| (*waker).take())
                    };
                    waiter.notification.clear();
                    drop(waiters);
                    drop(old_waker);
                    *state = State::Done;
                    return Poll::Ready(());
                }
                let curr = notify.state.load(SeqCst);
                if get_num_notify_waiters_calls(curr) != *notify_waiters_calls {
                    old_waker = unsafe {
                        waiter.waker.with_mut(|waker| (*waker).take())
                    };
                    unsafe { waiters.remove(NonNull::from(waiter)) };
                    *state = State::Done;
                } else {
                    unsafe {
                        waiter
                            .waker
                            .with_mut(|v| {
                                if let Some(waker) = waker {
                                    let should_update = match &*v {
                                        Some(current_waker) => !current_waker.will_wake(waker),
                                        None => true,
                                    };
                                    if should_update {
                                        old_waker = std::mem::replace(&mut *v, Some(waker.clone()));
                                    }
                                }
                            });
                    }
                    drop(waiters);
                    drop(old_waker);
                    return Poll::Pending;
                }
                drop(waiters);
                drop(old_waker);
            }
            State::Done => {
                #[cfg(tokio_taskdump)]
                if let Some(waker) = waker {
                    let mut ctx = Context::from_waker(waker);
                    ready!(crate ::trace::trace_leaf(& mut ctx));
                }
                return Poll::Ready(());
            }
        }
    }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\once_cell.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_or_init, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\once_cell.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_or_init, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\once_cell.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_or_try_init, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\once_cell.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_or_try_init, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\once_cell.rs 

Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\oneshot.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_closed, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\oneshot.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_closed, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\oneshot.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_closed, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\oneshot.rs 

Found method with unsafe block in poll_closed:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\oneshot.rs
Start Line: 793, End Line: 841
/// Checks whether the `oneshot` channel has been closed, and if not, schedules the
/// `Waker` in the provided `Context` to receive a notification when the channel is
/// closed.
///
/// A [`Receiver`] is closed by either calling [`close`] explicitly, or when the
/// [`Receiver`] value is dropped.
///
/// Note that on multiple calls to poll, only the `Waker` from the `Context` passed
/// to the most recent call will be scheduled to receive a wakeup.
///
/// [`Receiver`]: struct@crate::sync::oneshot::Receiver
/// [`close`]: fn@crate::sync::oneshot::Receiver::close
///
/// # Return value
///
/// This function returns:
///
///  * `Poll::Pending` if the channel is still open.
///  * `Poll::Ready(())` if the channel is closed.
///
/// # Examples
///
/// ```
/// use tokio::sync::oneshot;
///
/// use futures::future::poll_fn;
///
/// #[tokio::main]
/// async fn main() {
///     let (mut tx, mut rx) = oneshot::channel::<()>();
///
///     tokio::spawn(async move {
///         rx.close();
///     });
///
///     poll_fn(|cx| tx.poll_closed(cx)).await;
///
///     println!("the receiver dropped");
/// }
/// ```
pub fn poll_closed(&mut self, cx: &mut Context<'_>) -> Poll<()> {
    ready!(crate ::trace::trace_leaf(cx));
    let coop = ready!(crate ::runtime::coop::poll_proceed(cx));
    let inner = self.inner.as_ref().unwrap();
    let mut state = State::load(&inner.state, Acquire);
    if state.is_closed() {
        coop.made_progress();
        return Ready(());
    }
    if state.is_tx_task_set() {
        let will_notify = unsafe { inner.tx_task.will_wake(cx) };
        if !will_notify {
            state = State::unset_tx_task(&inner.state);
            if state.is_closed() {
                State::set_tx_task(&inner.state);
                coop.made_progress();
                return Ready(());
            } else {
                unsafe { inner.tx_task.drop_task() };
            }
        }
    }
    if !state.is_tx_task_set() {
        unsafe {
            inner.tx_task.set_task(cx);
        }
        state = State::set_tx_task(&inner.state);
        if state.is_closed() {
            coop.made_progress();
            return Ready(());
        }
    }
    Pending
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\rwlock\owned_read_guard.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\rwlock\owned_write_guard.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\rwlock\owned_write_guard_mapped.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\rwlock\read_guard.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\rwlock\write_guard.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\rwlock\write_guard_mapped.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\rwlock.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\semaphore.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\task\atomic_waker.rs
-----------------------------------------------------------------
Checking unsafe block with 7 statements, complex: true, name: do_register, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\task\atomic_waker.rs 

Found method with unsafe block in do_register:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\task\atomic_waker.rs
Start Line: 175, End Line: 298
fn do_register<W>(&self, waker: W)
where
    W: WakerRef,
{
    fn catch_unwind<F: FnOnce() -> R, R>(f: F) -> std::thread::Result<R> {
        std::panic::catch_unwind(AssertUnwindSafe(f))
    }
    match self
        .state
        .compare_exchange(WAITING, REGISTERING, Acquire, Acquire)
        .unwrap_or_else(|x| x)
    {
        WAITING => {
            unsafe {
                let new_waker_or_panic = catch_unwind(move || waker.into_waker());
                let mut maybe_panic = None;
                let mut old_waker = None;
                match new_waker_or_panic {
                    Ok(new_waker) => {
                        old_waker = self.waker.with_mut(|t| (*t).take());
                        self.waker.with_mut(|t| *t = Some(new_waker));
                    }
                    Err(panic) => maybe_panic = Some(panic),
                }
                let res = self
                    .state
                    .compare_exchange(REGISTERING, WAITING, AcqRel, Acquire);
                match res {
                    Ok(_) => {
                        let _ = catch_unwind(move || {
                            drop(old_waker);
                        });
                    }
                    Err(actual) => {
                        debug_assert_eq!(actual, REGISTERING | WAKING);
                        let mut waker = self.waker.with_mut(|t| (*t).take());
                        self.state.swap(WAITING, AcqRel);
                        if maybe_panic.is_some() {
                            old_waker = waker.take();
                        }
                        if let Some(old_waker) = old_waker {
                            let _ = catch_unwind(move || {
                                old_waker.wake();
                            });
                        }
                        if let Some(waker) = waker {
                            debug_assert!(maybe_panic.is_none());
                            waker.wake();
                        }
                    }
                }
                if let Some(panic) = maybe_panic {
                    resume_unwind(panic);
                }
            }
        }
        WAKING => {
            waker.wake();
            hint::spin_loop();
        }
        state => {
            debug_assert!(state == REGISTERING || state == REGISTERING | WAKING);
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: take_waker, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\task\atomic_waker.rs 

Found method with unsafe block in take_waker:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\task\atomic_waker.rs
Start Line: 313, End Line: 341
/// Attempts to take the `Waker` value out of the `AtomicWaker` with the
/// intention that the caller will wake the task later.
pub(crate) fn take_waker(&self) -> Option<Waker> {
    match self.state.fetch_or(WAKING, AcqRel) {
        WAITING => {
            let waker = unsafe { self.waker.with_mut(|t| (*t).take()) };
            self.state.fetch_and(!WAKING, Release);
            waker
        }
        state => {
            debug_assert!(
                state == REGISTERING || state == REGISTERING | WAKING || state == WAKING
            );
            None
        }
    }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\task\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\tests\atomic_waker.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\tests\loom_atomic_waker.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\tests\loom_broadcast.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\tests\loom_list.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\tests\loom_mpsc.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\tests\loom_notify.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\tests\loom_oneshot.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\tests\loom_rwlock.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\tests\loom_semaphore_batch.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\tests\loom_watch.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\tests\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\tests\notify.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\tests\semaphore_batch.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\sync\watch.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\task\blocking.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\task\builder.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\task\consume_budget.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\task\join_set.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\task\local.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: pop_local, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\task\local.rs 

Found method with unsafe block in pop_local:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\task\local.rs
Start Line: 735, End Line: 742
fn pop_local(&self) -> Option<task::Notified<Arc<Shared>>> {
    unsafe { self.context.shared.local_state.task_pop_front() }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\task\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\task\spawn.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\task\task_local.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\task\unconstrained.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\task\yield_now.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\time\clock.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\time\error.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\time\instant.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\time\interval.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\time\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\time\sleep.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\time\timeout.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\atomic_cell.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\bit.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\cacheline.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\error.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\idle_notified_set.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: pop_notified, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\idle_notified_set.rs 

Found method with unsafe block in pop_notified:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\idle_notified_set.rs
Start Line: 172, End Line: 204
/// Pop an entry from the notified list to poll it. The entry is moved to
/// the idle list atomically.
pub(crate) fn pop_notified(
    &mut self,
    waker: &Waker,
) -> Option<EntryInOneOfTheLists<'_, T>> {
    if self.length == 0 {
        return None;
    }
    let mut lock = self.lists.lock();
    let should_update_waker = match lock.waker.as_mut() {
        Some(cur_waker) => !waker.will_wake(cur_waker),
        None => true,
    };
    if should_update_waker {
        lock.waker = Some(waker.clone());
    }
    let entry = lock.notified.pop_back()?;
    lock.idle.push_front(entry.clone());
    entry
        .my_list
        .with_mut(|ptr| unsafe {
            *ptr = List::Idle;
        });
    drop(lock);
    Some(EntryInOneOfTheLists {
        entry,
        set: self,
    })
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: try_pop_notified, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\idle_notified_set.rs 

Found method with unsafe block in try_pop_notified:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\idle_notified_set.rs
Start Line: 208, End Line: 232
/// Tries to pop an entry from the notified list to poll it. The entry is moved to
/// the idle list atomically.
pub(crate) fn try_pop_notified(&mut self) -> Option<EntryInOneOfTheLists<'_, T>> {
    if self.length == 0 {
        return None;
    }
    let mut lock = self.lists.lock();
    let entry = lock.notified.pop_back()?;
    lock.idle.push_front(entry.clone());
    entry
        .my_list
        .with_mut(|ptr| unsafe {
            *ptr = List::Idle;
        });
    drop(lock);
    Some(EntryInOneOfTheLists {
        entry,
        set: self,
    })
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_ptrs, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\idle_notified_set.rs 

Found function with unsafe block in get_ptrs:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\idle_notified_set.rs
Start Line: 236, End Line: 249
fn get_ptrs<T>(list: &mut LinkedList<T>, ptrs: &mut Vec<*mut T>) {
    let mut node = list.last();
    while let Some(entry) = node {
        ptrs.push(
            entry
                .value
                .with_mut(|ptr| {
                    let ptr: *mut ManuallyDrop<T> = ptr;
                    let ptr: *mut T = ptr.cast();
                    ptr
                }),
        );
        let prev = entry.pointers.get_prev();
        node = prev.map(|prev| unsafe { &*prev.as_ptr() });
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: pop_next, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\idle_notified_set.rs 

Found method with unsafe block in pop_next:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\idle_notified_set.rs
Start Line: 299, End Line: 310
fn pop_next(&mut self) -> bool {
    if let Some(entry) = self.all_entries.pop_back() {
        entry
            .value
            .with_mut(|ptr| unsafe { (self.func)(ManuallyDrop::take(&mut *ptr)) });
        true
    } else {
        false
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: with_value_and_context, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\idle_notified_set.rs 

Found method with unsafe block in with_value_and_context:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\idle_notified_set.rs
Start Line: 403, End Line: 417
/// Access the value in this entry together with a context for its waker.
pub(crate) fn with_value_and_context<F, U>(&mut self, func: F) -> U
where
    F: FnOnce(&mut T, &mut Context<'_>) -> U,
    T: 'static,
{
    let waker = waker_ref(&self.entry);
    let mut context = Context::from_waker(&waker);
    self.entry.value.with_mut(|ptr| unsafe { func(&mut *ptr, &mut context) })
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\linked_list.rs
-----------------------------------------------------------------
Checking unsafe block with 5 statements, complex: true, name: push_front, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\linked_list.rs 

Found method with unsafe block in push_front:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\linked_list.rs
Start Line: 119, End Line: 138
/// Adds an element first in the list.
pub(crate) fn push_front(&mut self, val: L::Handle) {
    let val = ManuallyDrop::new(val);
    let ptr = L::as_raw(&val);
    assert_ne!(self.head, Some(ptr));
    unsafe {
        L::pointers(ptr).as_mut().set_next(self.head);
        L::pointers(ptr).as_mut().set_prev(None);
        if let Some(head) = self.head {
            L::pointers(head).as_mut().set_prev(Some(ptr));
        }
        self.head = Some(ptr);
        if self.tail.is_none() {
            self.tail = Some(ptr);
        }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, complex: true, name: pop_front, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\linked_list.rs 

Found method with unsafe block in pop_front:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\linked_list.rs
Start Line: 142, End Line: 158
/// Removes the first element from a list and returns it, or None if it is
/// empty.
pub(crate) fn pop_front(&mut self) -> Option<L::Handle> {
    unsafe {
        let head = self.head?;
        self.head = L::pointers(head).as_ref().get_next();
        if let Some(new_head) = L::pointers(head).as_ref().get_next() {
            L::pointers(new_head).as_mut().set_prev(None);
        } else {
            self.tail = None;
        }
        L::pointers(head).as_mut().set_prev(None);
        L::pointers(head).as_mut().set_next(None);
        Some(L::from_raw(head))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 6 statements, complex: true, name: pop_back, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\linked_list.rs 

Found method with unsafe block in pop_back:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\linked_list.rs
Start Line: 162, End Line: 178
/// Removes the last element from a list and returns it, or None if it is
/// empty.
pub(crate) fn pop_back(&mut self) -> Option<L::Handle> {
    unsafe {
        let last = self.tail?;
        self.tail = L::pointers(last).as_ref().get_prev();
        if let Some(prev) = L::pointers(last).as_ref().get_prev() {
            L::pointers(prev).as_mut().set_next(None);
        } else {
            self.head = None;
        }
        L::pointers(last).as_mut().set_prev(None);
        L::pointers(last).as_mut().set_next(None);
        Some(L::from_raw(last))
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_prev, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\linked_list.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: get_next, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\linked_list.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: set_prev, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\linked_list.rs 

-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: fuzz_linked_list, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\linked_list.rs 

Found function with unsafe block in fuzz_linked_list:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\linked_list.rs
Start Line: 742, End Line: 798
/// This is a fuzz test. You run it by entering `cargo fuzz run fuzz_linked_list` in CLI in `/tokio/` module.
#[cfg(fuzzing)]
pub fn fuzz_linked_list(ops: &[u8]) {
    enum Op {
        Push,
        Pop,
        Remove(usize),
    }
    use std::collections::VecDeque;
    let ops = ops
        .iter()
        .map(|i| match i % 3u8 {
            0 => Op::Push,
            1 => Op::Pop,
            2 => Op::Remove((i / 3u8) as usize),
            _ => unreachable!(),
        })
        .collect::<Vec<_>>();
    let mut ll = LinkedList::<&Entry, <&Entry as Link>::Target>::new();
    let mut reference = VecDeque::new();
    let entries: Vec<_> = (0..ops.len()).map(|i| entry(i as i32)).collect();
    for (i, op) in ops.iter().enumerate() {
        match op {
            Op::Push => {
                reference.push_front(i as i32);
                assert_eq!(entries[i].val, i as i32);
                ll.push_front(entries[i].as_ref());
            }
            Op::Pop => {
                if reference.is_empty() {
                    assert!(ll.is_empty());
                    continue;
                }
                let v = reference.pop_back();
                assert_eq!(v, ll.pop_back().map(| v | v.val));
            }
            Op::Remove(n) => {
                if reference.is_empty() {
                    assert!(ll.is_empty());
                    continue;
                }
                let idx = n % reference.len();
                let expect = reference.remove(idx).unwrap();
                unsafe {
                    let entry = ll.remove(ptr(&entries[expect as usize])).unwrap();
                    assert_eq!(expect, entry.val);
                }
            }
        }
    }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\markers.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\memchr.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\metric_atomics.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\once_cell.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: do_init, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\once_cell.rs 

Found method with unsafe block in do_init:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\once_cell.rs
Start Line: 44, End Line: 58
#[cold]
fn do_init(&self, init: impl FnOnce() -> T) {
    let value_ptr = self.value.get() as *mut T;
    self.once
        .call_once(|| {
            let set_to = init();
            unsafe {
                std::ptr::write(value_ptr, set_to);
            }
        });
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\rand\rt.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\rand\rt_unstable.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\rand.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\rc_cell.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\sharded_list.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: lock_shard, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\sharded_list.rs 

Found method with unsafe block in lock_shard:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\sharded_list.rs
Start Line: 94, End Line: 102
/// Gets the lock of `ShardedList`, makes us have the write permission.
pub(crate) fn lock_shard(&self, val: &L::Handle) -> ShardGuard<'_, L, L::Target> {
    let id = unsafe { L::get_shard_id(L::as_raw(val)) };
    ShardGuard {
        lock: self.shard_inner(id),
        added: &self.added,
        count: &self.count,
        id,
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: shard_inner, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\sharded_list.rs 

Found method with unsafe block in shard_inner:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\sharded_list.rs
Start Line: 129, End Line: 132
#[inline]
fn shard_inner(&self, id: usize) -> MutexGuard<'_, LinkedList<L, <L as Link>::Target>> {
    unsafe { self.lists.get_unchecked(id & self.shard_mask).lock() }
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\sync_wrapper.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\trace.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\try_lock.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\wake.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\wake_list.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: wake_all, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\wake_list.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: wake_all, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\wake_list.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: wake_all, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\wake_list.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: wake_all, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\wake_list.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: wake_all, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\src\util\wake_list.rs 

Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\async_send_sync.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\buffered.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\coop_budget.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\dump.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\duplex_stream.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\fs.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\fs_canonicalize_dir.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\fs_copy.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\fs_dir.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\fs_file.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: read_file_from_unix_fd, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\fs_file.rs 

Found function with unsafe block in read_file_from_unix_fd:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\fs_file.rs
Start Line: 243, End Line: 259
#[tokio::test]
#[cfg(unix)]
async fn read_file_from_unix_fd() {
    use std::os::unix::io::{FromRawFd, IntoRawFd};
    let mut tempfile = tempfile();
    tempfile.write_all(HELLO).unwrap();
    let file1 = File::open(tempfile.path()).await.unwrap();
    let raw_fd = file1.into_std().await.into_raw_fd();
    assert!(raw_fd > 0);
    let mut file2 = unsafe { File::from_raw_fd(raw_fd) };
    let mut buf = [0; 1024];
    let n = file2.read(&mut buf).await.unwrap();
    assert_eq!(n, HELLO.len());
    assert_eq!(& buf[..n], HELLO);
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\fs_link.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\fs_open_options.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\fs_open_options_windows.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\fs_remove_dir_all.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\fs_remove_file.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\fs_rename.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\fs_symlink_dir_windows.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\fs_symlink_file_windows.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\fs_try_exists.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_async_fd.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: send_oob_data, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_async_fd.rs 

Found function with unsafe block in send_oob_data:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_async_fd.rs
Start Line: 639, End Line: 653
#[cfg(any(target_os = "linux", target_os = "android"))]
fn send_oob_data<S: AsRawFd>(stream: &S, data: &[u8]) -> io::Result<usize> {
    unsafe {
        let res = libc::send(
            stream.as_raw_fd(),
            data.as_ptr().cast(),
            data.len(),
            libc::MSG_OOB,
        );
        if res == -1 { Err(io::Error::last_os_error()) } else { Ok(res as usize) }
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: configure_timestamping_socket, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_async_fd.rs 

Found function with unsafe block in configure_timestamping_socket:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_async_fd.rs
Start Line: 736, End Line: 755
#[cfg(target_os = "linux")]
fn configure_timestamping_socket(
    udp_socket: &std::net::UdpSocket,
) -> std::io::Result<libc::c_int> {
    let options = libc::SOF_TIMESTAMPING_SOFTWARE | libc::SOF_TIMESTAMPING_TX_SOFTWARE;
    let res = unsafe {
        libc::setsockopt(
            udp_socket.as_raw_fd(),
            libc::SOL_SOCKET,
            libc::SO_TIMESTAMP,
            &options as *const _ as *const libc::c_void,
            std::mem::size_of_val(&options) as libc::socklen_t,
        )
    };
    if res == -1 { Err(std::io::Error::last_os_error()) } else { Ok(res) }
}



-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: true, name: await_error_readiness_invalid_address, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_async_fd.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: await_error_readiness_invalid_address, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_async_fd.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: await_error_readiness_invalid_address, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_async_fd.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: await_error_readiness_invalid_address, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_async_fd.rs 

Found function with unsafe block in await_error_readiness_invalid_address:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_async_fd.rs
Start Line: 759, End Line: 824
#[tokio::test]
#[cfg(target_os = "linux")]
async fn await_error_readiness_invalid_address() {
    use std::net::{Ipv4Addr, SocketAddr};
    use tokio::io::{Interest, Ready};
    let socket_addr = SocketAddr::from((Ipv4Addr::LOCALHOST, 0));
    let socket = std::net::UdpSocket::bind(socket_addr).unwrap();
    let socket_fd = socket.as_raw_fd();
    let recv_err: libc::c_int = 1;
    unsafe {
        let res = libc::setsockopt(
            socket.as_raw_fd(),
            libc::SOL_IP,
            libc::IP_RECVERR,
            &recv_err as *const _ as *const libc::c_void,
            std::mem::size_of_val(&recv_err) as libc::socklen_t,
        );
        if res == -1 {
            panic!("{:?}", std::io::Error::last_os_error());
        }
    }
    tokio::spawn(async move {
        let mut dest_addr = unsafe {
            std::mem::MaybeUninit::<libc::sockaddr_in>::zeroed().assume_init()
        };
        dest_addr.sin_family = libc::AF_INET as _;
        dest_addr.sin_port = 512u16.to_be();
        let message = "Hello, Socket!";
        let mut iov = libc::iovec {
            iov_base: message.as_ptr() as *mut libc::c_void,
            iov_len: message.len(),
        };
        let dest_sockaddr: *const libc::sockaddr = &dest_addr as *const _
            as *const libc::sockaddr;
        let dest_addrlen: libc::socklen_t = std::mem::size_of_val(&dest_addr)
            as libc::socklen_t;
        let mut msg: libc::msghdr = unsafe {
            std::mem::MaybeUninit::zeroed().assume_init()
        };
        msg.msg_name = dest_sockaddr as *mut libc::c_void;
        msg.msg_namelen = dest_addrlen;
        msg.msg_iov = &mut iov;
        msg.msg_iovlen = 1;
        if unsafe { libc::sendmsg(socket_fd, &msg, 0) } == -1 {
            panic!("{:?}", std::io::Error::last_os_error())
        }
    });
    let fd = AsyncFd::new(socket).unwrap();
    let guard = fd.ready(Interest::ERROR).await.unwrap();
    assert_eq!(guard.ready(), Ready::ERROR);
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_async_read.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_buf_reader.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: maybe_pending_seek, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_buf_reader.rs 

Found function with unsafe block in maybe_pending_seek:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_buf_reader.rs
Start Line: 282, End Line: 352
#[tokio::test]
async fn maybe_pending_seek() {
    struct MaybePendingSeek<'a> {
        inner: Cursor<&'a [u8]>,
        ready: bool,
        seek_res: Option<io::Result<()>>,
    }
    impl<'a> MaybePendingSeek<'a> {
        fn new(inner: &'a [u8]) -> Self {
            Self {
                inner: Cursor::new(inner),
                ready: true,
                seek_res: None,
            }
        }
    }
    impl AsyncRead for MaybePendingSeek<'_> {
        fn poll_read(
            mut self: Pin<&mut Self>,
            cx: &mut Context<'_>,
            buf: &mut ReadBuf<'_>,
        ) -> Poll<io::Result<()>> {
            Pin::new(&mut self.inner).poll_read(cx, buf)
        }
    }
    impl AsyncBufRead for MaybePendingSeek<'_> {
        fn poll_fill_buf(
            mut self: Pin<&mut Self>,
            cx: &mut Context<'_>,
        ) -> Poll<io::Result<&[u8]>> {
            let this: *mut Self = &mut *self as *mut _;
            Pin::new(&mut unsafe { &mut *this }.inner).poll_fill_buf(cx)
        }
        fn consume(mut self: Pin<&mut Self>, amt: usize) {
            Pin::new(&mut self.inner).consume(amt)
        }
    }
    impl AsyncSeek for MaybePendingSeek<'_> {
        fn start_seek(mut self: Pin<&mut Self>, pos: SeekFrom) -> io::Result<()> {
            self.seek_res = Some(Pin::new(&mut self.inner).start_seek(pos));
            Ok(())
        }
        fn poll_complete(
            mut self: Pin<&mut Self>,
            cx: &mut Context<'_>,
        ) -> Poll<io::Result<u64>> {
            if self.ready {
                self.ready = false;
                self.seek_res.take().unwrap_or(Ok(()))?;
                Pin::new(&mut self.inner).poll_complete(cx)
            } else {
                self.ready = true;
                cx.waker().wake_by_ref();
                Poll::Pending
            }
        }
    }
    let inner: &[u8] = &[5, 6, 7, 0, 1, 2, 3, 4];
    let mut reader = BufReader::with_capacity(2, MaybePendingSeek::new(inner));
    assert_eq!(reader.seek(SeekFrom::Current(3)). await .unwrap(), 3);
    assert_eq!(run_fill_buf!(reader) .unwrap(), & [0, 1] [..]);
    assert!(reader.seek(SeekFrom::Current(i64::MIN)). await .is_err());
    assert_eq!(run_fill_buf!(reader) .unwrap(), & [0, 1] [..]);
    assert_eq!(reader.seek(SeekFrom::Current(1)). await .unwrap(), 4);
    assert_eq!(run_fill_buf!(reader) .unwrap(), & [1, 2] [..]);
    Pin::new(&mut reader).consume(1);
    assert_eq!(reader.seek(SeekFrom::Current(- 2)). await .unwrap(), 3);
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_buf_writer.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_chain.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_copy.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_copy_bidirectional.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_driver.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_driver_drop.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_fill_buf.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_join.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_lines.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_mem_stream.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_panic.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_poll_aio.rs
-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: fsync, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_poll_aio.rs 

Found method with unsafe block in fsync:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_poll_aio.rs
Start Line: 74, End Line: 80
fn fsync(mut self: Pin<&mut Self>) {
    let r = unsafe {
        let p = self.0.as_mut().get_unchecked_mut();
        libc::aio_fsync(libc::O_SYNC, p)
    };
    assert_eq!(0, r);
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: ll_fsync, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_poll_aio.rs 

-----------------------------------------------------------------
Checking unsafe block with 2 statements, complex: false, name: ll_fsync, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_poll_aio.rs 

Found function with unsafe block in ll_fsync:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_poll_aio.rs
Start Line: 148, End Line: 162
#[tokio::test]
async fn ll_fsync() {
    let f = tempfile().unwrap();
    let fd = f.as_raw_fd();
    let mut aiocb: libc::aiocb = unsafe { mem::MaybeUninit::zeroed().assume_init() };
    aiocb.aio_fildes = fd;
    let source = LlSource(Box::pin(aiocb));
    let mut poll_aio = Aio::new_for_aio(source).unwrap();
    let r = unsafe {
        let p = poll_aio.0.as_mut().get_unchecked_mut();
        libc::aio_fsync(libc::O_SYNC, p)
    };
    assert_eq!(0, r);
    let fut = LlFut(poll_aio);
    fut.await.unwrap();
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: reuse, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_poll_aio.rs 

Found function with unsafe block in reuse:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_poll_aio.rs
Start Line: 166, End Line: 192
/// A suitably crafted future type can reuse an Aio object
#[tokio::test]
async fn reuse() {
    let f = tempfile().unwrap();
    let fd = f.as_raw_fd();
    let mut aiocb: libc::aiocb = unsafe { mem::MaybeUninit::zeroed().assume_init() };
    aiocb.aio_fildes = fd;
    let source = LlSource(Box::pin(aiocb));
    let poll_aio = Aio::new_for_aio(source).unwrap();
    let mut fut = LlFut(poll_aio);
    {
        let mut pfut = Pin::new(&mut fut);
        pfut.as_mut().fsync();
        pfut.as_mut().await.unwrap();
    }
    let mut ctx = Context::from_waker(futures::task::noop_waker_ref());
    assert_pending!(fut.0.poll_ready(& mut ctx));
    {
        let mut pfut = Pin::new(&mut fut);
        pfut.as_mut().fsync();
        pfut.as_mut().await.unwrap();
    }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: onewrite, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_poll_aio.rs 

Found function with unsafe block in onewrite:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_poll_aio.rs
Start Line: 286, End Line: 303
/// An lio_listio operation with one fsync element
#[tokio::test]
async fn onewrite() {
    const WBUF: &[u8] = b"abcdef";
    let f = tempfile().unwrap();
    let mut aiocb: libc::aiocb = unsafe { mem::zeroed() };
    aiocb.aio_fildes = f.as_raw_fd();
    aiocb.aio_lio_opcode = libc::LIO_WRITE;
    aiocb.aio_nbytes = WBUF.len();
    aiocb.aio_buf = WBUF.as_ptr() as *mut _;
    let aiocb = pin!([& mut aiocb]);
    let source = LioSource::new(aiocb);
    let poll_aio = Aio::new_for_lio(source).unwrap();
    let mut fut = pin!(LioFut(poll_aio));
    fut.as_mut().submit();
    fut.await.unwrap();
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_read.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_read_buf.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: issue_5588, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_read_buf.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: issue_5588, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_read_buf.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: issue_5588, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_read_buf.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: issue_5588, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_read_buf.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: issue_5588, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_read_buf.rs 

Found function with unsafe block in issue_5588:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_read_buf.rs
Start Line: 40, End Line: 94
#[tokio::test]
#[cfg(feature = "io-util")]
async fn issue_5588() {
    use bytes::BufMut;
    let mut buf = [0; 8];
    let mut read_buf = ReadBuf::new(&mut buf);
    assert_eq!(read_buf.remaining_mut(), 8);
    assert_eq!(read_buf.chunk_mut().len(), 8);
    unsafe {
        read_buf.advance_mut(1);
    }
    assert_eq!(read_buf.remaining_mut(), 7);
    assert_eq!(read_buf.chunk_mut().len(), 7);
    unsafe {
        read_buf.advance_mut(5);
    }
    assert_eq!(read_buf.remaining_mut(), 2);
    assert_eq!(read_buf.chunk_mut().len(), 2);
    unsafe {
        read_buf.advance_mut(2);
    }
    assert_eq!(read_buf.remaining_mut(), 0);
    assert_eq!(read_buf.chunk_mut().len(), 0);
    let mut buf = [0; 8];
    let mut read_buf = ReadBuf::new(&mut buf);
    assert_eq!(read_buf.remaining_mut(), 8);
    assert_eq!(read_buf.chunk_mut().len(), 8);
    unsafe {
        read_buf.advance_mut(8);
    }
    assert_eq!(read_buf.remaining_mut(), 0);
    assert_eq!(read_buf.chunk_mut().len(), 0);
    let mut buf = [std::mem::MaybeUninit::new(1); 8];
    let mut uninit = ReadBuf::uninit(&mut buf);
    assert_eq!(uninit.remaining_mut(), 8);
    assert_eq!(uninit.chunk_mut().len(), 8);
    let mut buf = [std::mem::MaybeUninit::uninit(); 8];
    let mut uninit = ReadBuf::uninit(&mut buf);
    unsafe {
        uninit.advance_mut(4);
    }
    assert_eq!(uninit.remaining_mut(), 4);
    assert_eq!(uninit.chunk_mut().len(), 4);
    uninit.put_u8(1);
    assert_eq!(uninit.remaining_mut(), 3);
    assert_eq!(uninit.chunk_mut().len(), 3);
    uninit.put_slice(&[1, 2, 3]);
    assert_eq!(uninit.remaining_mut(), 0);
    assert_eq!(uninit.chunk_mut().len(), 0);
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_read_exact.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_read_line.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_read_to_end.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_read_to_string.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_read_until.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_repeat.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_sink.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_split.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_take.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_util_empty.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_write.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_write_all.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_write_all_buf.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_write_buf.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\io_write_int.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\join_handle_panic.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\macros_join.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\macros_pin.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\macros_rename_test.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\macros_select.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\macros_test.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\macros_try_join.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\net_bind_resource.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\net_lookup_host.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\net_named_pipe.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\net_panic.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\net_unix_pipe.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\no_rt.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\process_arg0.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\process_change_of_runtime.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\process_issue_2174.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\process_issue_42.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\process_kill_on_drop.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\process_raw_handle.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: obtain_raw_handle, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\process_raw_handle.rs 

Found function with unsafe block in obtain_raw_handle:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\process_raw_handle.rs
Start Line: 9, End Line: 23
#[tokio::test]
async fn obtain_raw_handle() {
    let mut cmd = Command::new("cmd");
    cmd.kill_on_drop(true);
    cmd.arg("/c");
    cmd.arg("pause");
    let child = cmd.spawn().unwrap();
    let orig_id = child.id().expect("missing id");
    assert!(orig_id > 0);
    let handle = child.raw_handle().expect("process stopped");
    let handled_id = unsafe { GetProcessId(handle as _) };
    assert_eq!(handled_id, orig_id);
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\process_smoke.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\rt_basic.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\rt_common.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\rt_handle.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\rt_handle_block_on.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\rt_metrics.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\rt_panic.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\rt_threaded.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\rt_threaded_alt.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\rt_time_start_paused.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\rt_unstable_metrics.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\signal_ctrl_c.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\signal_drop_recv.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\signal_drop_rt.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\signal_drop_signal.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\signal_multi_rt.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\signal_notify_both.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\signal_no_rt.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\signal_panic.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\signal_twice.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\signal_usr1.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\support\io_vec.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\support\leaked_buffers.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\support\mpsc_stream.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\support\panic.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\support\signal.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\sync_barrier.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\sync_broadcast.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\sync_errors.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\sync_mpsc.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\sync_mpsc_weak.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\sync_mutex.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\sync_mutex_owned.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\sync_notify.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\sync_once_cell.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\sync_oneshot.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\sync_panic.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\sync_rwlock.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\sync_semaphore.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\sync_semaphore_owned.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\sync_watch.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\task_abort.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\task_blocking.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\task_builder.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\task_id.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\task_join_set.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\task_local.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\task_local_set.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\task_panic.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\task_yield_now.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\tcp_accept.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\tcp_connect.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\tcp_echo.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\tcp_into_split.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\tcp_into_std.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\tcp_peek.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\tcp_shutdown.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\tcp_socket.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\tcp_split.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\tcp_stream.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\test_clock.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\time_interval.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\time_panic.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\time_pause.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\time_rt.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\time_sleep.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\time_timeout.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\tracing-instrumentation\tests\sync.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\tracing-instrumentation\tests\task.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\tracing-instrumentation\tests\time.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\udp.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\uds_cred.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: test_socket_pair, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\uds_cred.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: test_socket_pair, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\uds_cred.rs 

Found function with unsafe block in test_socket_pair:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\uds_cred.rs
Start Line: 15, End Line: 26
#[tokio::test]
#[cfg_attr(
    target_os = "netbsd",
    ignore = "NetBSD does not support getpeereid() for sockets created by socketpair()"
)]
async fn test_socket_pair() {
    let (a, b) = UnixStream::pair().unwrap();
    let cred_a = a.peer_cred().unwrap();
    let cred_b = b.peer_cred().unwrap();
    assert_eq!(cred_a, cred_b);
    let uid = unsafe { geteuid() };
    let gid = unsafe { getegid() };
    assert_eq!(cred_a.uid(), uid);
    assert_eq!(cred_a.gid(), gid);
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\uds_datagram.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\uds_socket.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\uds_split.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\uds_stream.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\unwindsafe.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio\tests\_require_full.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-macros\src\entry.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-macros\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-macros\src\select.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\fuzz\fuzz_targets\fuzz_stream_map.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\empty.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\iter.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\macros.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\once.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\pending.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\poll_fn.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_close.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\all.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\any.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\chain.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\chunks_timeout.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\collect.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\filter.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\filter_map.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\fold.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\fuse.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\map.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\map_while.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\merge.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\next.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\peekable.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\skip.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\skip_while.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\take.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\take_while.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\then.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\throttle.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\timeout.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\timeout_repeating.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext\try_next.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_ext.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\stream_map.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\wrappers\broadcast.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\wrappers\interval.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\wrappers\lines.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\wrappers\mpsc_bounded.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\wrappers\mpsc_unbounded.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\wrappers\read_dir.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\wrappers\signal_unix.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\wrappers\signal_windows.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\wrappers\split.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\wrappers\tcp_listener.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\wrappers\unix_listener.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\wrappers\watch.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\src\wrappers.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\tests\async_send_sync.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\tests\chunks_timeout.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\tests\stream_chain.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\tests\stream_close.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\tests\stream_collect.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\tests\stream_empty.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\tests\stream_fuse.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\tests\stream_iter.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\tests\stream_merge.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\tests\stream_once.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\tests\stream_panic.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\tests\stream_pending.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\tests\stream_stream_map.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\tests\stream_timeout.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\tests\support\mpsc.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\tests\time_throttle.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-stream\tests\watch.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-test\src\io.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-test\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-test\src\macros.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-test\src\stream_mock.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-test\src\task.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-test\tests\block_on.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-test\tests\io.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-test\tests\macros.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-test\tests\stream_mock.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-test\tests\task.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\cfg.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\codec\any_delimiter_codec.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\codec\bytes_codec.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\codec\decoder.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\codec\encoder.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\codec\framed.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\codec\framed_impl.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\codec\framed_read.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\codec\framed_write.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\codec\length_delimited.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\codec\lines_codec.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\codec\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\compat.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\context.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\either.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\io\copy_to_bytes.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\io\inspect.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\io\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\io\reader_stream.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\io\read_buf.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\io\sink_writer.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\io\stream_reader.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\io\sync_bridge.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\loom.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\net\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\net\unix\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\sync\cancellation_token\guard.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\sync\cancellation_token\tree_node.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\sync\cancellation_token.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\sync\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\sync\mpsc.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\sync\poll_semaphore.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\sync\reusable_box.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: reuse_pin_box, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\sync\reusable_box.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: reuse_pin_box, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\sync\reusable_box.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: reuse_pin_box, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\sync\reusable_box.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: reuse_pin_box, with_SAFETY_comment: true, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\sync\reusable_box.rs 

Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\sync\tests\loom_cancellation_token.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\sync\tests\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\task\join_map.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\task\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\task\spawn_pinned.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\task\task_tracker.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\time\delay_queue.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\time\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\time\wheel\level.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\time\wheel\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\time\wheel\stack.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\tracing.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\udp\frame.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\udp\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\util\maybe_dangling.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\util\mod.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\util\poll_buf.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_read_buf, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\util\poll_buf.rs 

-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: poll_read_buf, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\util\poll_buf.rs 

Found function with unsafe block in poll_read_buf:
File: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\src\util\poll_buf.rs
Start Line: 49, End Line: 80
/// Try to read data from an `AsyncRead` into an implementer of the [`BufMut`] trait.
///
/// [`BufMut`]: bytes::Buf
///
/// # Example
///
/// ```
/// use bytes::{Bytes, BytesMut};
/// use tokio_stream as stream;
/// use tokio::io::Result;
/// use tokio_util::io::{StreamReader, poll_read_buf};
/// use futures::future::poll_fn;
/// use std::pin::Pin;
/// # #[tokio::main]
/// # async fn main() -> std::io::Result<()> {
///
/// // Create a reader from an iterator. This particular reader will always be
/// // ready.
/// let mut read = StreamReader::new(stream::iter(vec![Result::Ok(Bytes::from_static(&[0, 1, 2, 3]))]));
///
/// let mut buf = BytesMut::new();
/// let mut reads = 0;
///
/// loop {
///     reads += 1;
///     let n = poll_fn(|cx| poll_read_buf(Pin::new(&mut read), cx, &mut buf)).await?;
///
///     if n == 0 {
///         break;
///     }
/// }
///
/// // one or more reads might be necessary.
/// assert!(reads >= 1);
/// assert_eq!(&buf[..], &[0, 1, 2, 3]);
/// # Ok(())
/// # }
/// ```
#[cfg_attr(not(feature = "io"), allow(unreachable_pub))]
pub fn poll_read_buf<T: AsyncRead + ?Sized, B: BufMut>(
    io: Pin<&mut T>,
    cx: &mut Context<'_>,
    buf: &mut B,
) -> Poll<io::Result<usize>> {
    if !buf.has_remaining_mut() {
        return Poll::Ready(Ok(0));
    }
    let n = {
        let dst = buf.chunk_mut();
        let dst = unsafe { &mut *(dst as *mut _ as *mut [MaybeUninit<u8>]) };
        let mut buf = ReadBuf::uninit(dst);
        let ptr = buf.filled().as_ptr();
        ready!(io.poll_read(cx, & mut buf) ?);
        assert_eq!(ptr, buf.filled().as_ptr());
        buf.filled().len()
    };
    unsafe {
        buf.advance_mut(n);
    }
    Poll::Ready(Ok(n))
}



Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\codecs.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\compat.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\context.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\framed.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\framed_read.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\framed_stream.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\framed_write.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\io_inspect.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\io_reader_stream.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\io_sink_writer.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\io_stream_reader.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\io_sync_bridge.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\length_delimited.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\mpsc.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\panic.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\poll_semaphore.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\reusable_box.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\spawn_pinned.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\sync_cancellation_token.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\task_join_map.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\task_tracker.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\time_delay_queue.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\udp.rs
Processing file: overunsafe库\当前流行的rust库\tokio-master\tokio-master\tokio-util\tests\_require_full.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\codegen\src\main.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\build.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\authentication\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\authentication\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\autoreload\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\blocking\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\blocking\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\cancellation\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\cancellation\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\codec_buffers\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\codec_buffers\common.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\codec_buffers\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\compression\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\compression\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\dynamic\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\dynamic_load_balance\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\dynamic_load_balance\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\gcp\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\grpc-web\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\grpc-web\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\h2c\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\h2c\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\health\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\helloworld\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\helloworld\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\interceptor\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\interceptor\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\json-codec\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\json-codec\common.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\json-codec\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\load_balance\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\load_balance\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\mock\mock.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\multiplex\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\multiplex\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\optional\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\reflection\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\richer-error\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\richer-error\client_vec.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\richer-error\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\richer-error\server_vec.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\routeguide\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\routeguide\data.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\routeguide\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\streaming\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\streaming\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\timeout\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\timeout\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\tls\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\tls\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\tls_client_auth\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\tls_client_auth\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\tls_rustls\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\tls_rustls\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\tower\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\tower\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\tracing\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\tracing\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\uds\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\examples\src\uds\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\interop\build.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\interop\src\bin\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\interop\src\bin\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\interop\src\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\interop\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\interop\src\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\ambiguous_methods\build.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\ambiguous_methods\src\main.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\compression\build.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\compression\src\bidirectional_stream.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\compression\src\client_stream.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\compression\src\compressing_request.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\compression\src\compressing_response.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\compression\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\compression\src\server_stream.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\compression\src\util.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\default_stubs\build.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\default_stubs\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\default_stubs\src\test_defaults.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\disable_comments\build.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\disable_comments\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\disable_comments\tests\disable_comments.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\extern_path\my_application\build.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\extern_path\my_application\src\main.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\extern_path\uuid\build.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\extern_path\uuid\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\included_service\build.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\included_service\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\integration_tests\build.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\integration_tests\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\integration_tests\tests\client_layer.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\integration_tests\tests\complex_tower_middleware.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\integration_tests\tests\connection.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\integration_tests\tests\connect_info.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\integration_tests\tests\extensions.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\integration_tests\tests\http2_keep_alive.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\integration_tests\tests\http2_max_header_list_size.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\integration_tests\tests\interceptor.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\integration_tests\tests\max_message_size.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\integration_tests\tests\origin.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\integration_tests\tests\routes_builder.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\integration_tests\tests\status.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\integration_tests\tests\streams.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\integration_tests\tests\timeout.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\integration_tests\tests\user_agent.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\root-crate-path\build.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\root-crate-path\src\main.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\same_name\build.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\same_name\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\service_named_result\build.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\service_named_result\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\service_named_service\build.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\service_named_service\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\stream_conflict\build.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\stream_conflict\src\main.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\use_arc_self\build.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\use_arc_self\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\wellknown\build.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\wellknown\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\wellknown-compiled\build.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tests\wellknown-compiled\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\benches\decode.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\benches-disabled\benchmarks\compiled_protos\diverse_types.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\benches-disabled\benchmarks\compiled_protos\helloworld.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\benches-disabled\benchmarks\compiled_protos\mod.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\benches-disabled\benchmarks\mod.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\benches-disabled\benchmarks\request_response.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\benches-disabled\benchmarks\request_response_diverse_types.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\benches-disabled\benchmarks\utils.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\benches-disabled\bench_main.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\body.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\client\grpc.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\client\mod.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\client\service.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\codec\buffer.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\codec\compression.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\codec\decode.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\codec\encode.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: encode_item, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\codec\encode.rs 

Found function with unsafe block in encode_item:
File: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\codec\encode.rs
Start Line: 184, End Line: 230
fn encode_item<T>(
    encoder: &mut T,
    buf: &mut BytesMut,
    uncompression_buf: &mut BytesMut,
    compression_encoding: Option<CompressionEncoding>,
    max_message_size: Option<usize>,
    buffer_settings: BufferSettings,
    item: T::Item,
) -> Result<(), Status>
where
    T: Encoder<Error = Status>,
{
    let offset = buf.len();
    buf.reserve(HEADER_SIZE);
    unsafe {
        buf.advance_mut(HEADER_SIZE);
    }
    if let Some(encoding) = compression_encoding {
        uncompression_buf.clear();
        encoder
            .encode(item, &mut EncodeBuf::new(uncompression_buf))
            .map_err(|err| Status::internal(format!("Error encoding: {}", err)))?;
        let uncompressed_len = uncompression_buf.len();
        compress(
                CompressionSettings {
                    encoding,
                    buffer_growth_interval: buffer_settings.buffer_size,
                },
                uncompression_buf,
                buf,
                uncompressed_len,
            )
            .map_err(|err| Status::internal(format!("Error compressing: {}", err)))?;
    } else {
        encoder
            .encode(item, &mut EncodeBuf::new(buf))
            .map_err(|err| Status::internal(format!("Error encoding: {}", err)))?;
    }
    finish_encoding(compression_encoding, max_message_size, &mut buf[offset..])
}



Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\codec\mod.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\codec\prost.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\codegen.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\extensions.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\macros.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\metadata\encoding.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\metadata\key.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: unchecked_from_header_name_ref, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\metadata\key.rs 

Found method with unsafe block in unchecked_from_header_name_ref:
File: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\metadata\key.rs
Start Line: 126, End Line: 128
/// Converts a HeaderName reference to a MetadataKey. This method assumes
/// that the caller has made sure that the header name has the correct
/// "-bin" or non-"-bin" suffix, it does not validate its input.
#[inline]
pub(crate) fn unchecked_from_header_name_ref(header_name: &HeaderName) -> &Self {
    unsafe { &*(header_name as *const HeaderName as *const Self) }
}



Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\metadata\map.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\metadata\mod.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\metadata\value.rs
-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: unchecked_from_header_value_ref, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\metadata\value.rs 

Found method with unsafe block in unchecked_from_header_value_ref:
File: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\metadata\value.rs
Start Line: 214, End Line: 216
/// Converts a HeaderValue reference to a MetadataValue. This method assumes
/// that the caller has made sure that the value is of the correct Ascii or
/// Binary value encoding.
#[inline]
pub(crate) fn unchecked_from_header_value_ref(header_value: &HeaderValue) -> &Self {
    unsafe { &*(header_value as *const HeaderValue as *const Self) }
}



-----------------------------------------------------------------
Checking unsafe block with 1 statements, complex: false, name: unchecked_from_mut_header_value_ref, with_SAFETY_comment: false, file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\metadata\value.rs 

Found method with unsafe block in unchecked_from_mut_header_value_ref:
File: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\metadata\value.rs
Start Line: 222, End Line: 224
/// Converts a HeaderValue reference to a MetadataValue. This method assumes
/// that the caller has made sure that the value is of the correct Ascii or
/// Binary value encoding.
#[inline]
pub(crate) fn unchecked_from_mut_header_value_ref(
    header_value: &mut HeaderValue,
) -> &mut Self {
    unsafe { &mut *(header_value as *mut HeaderValue as *mut Self) }
}



Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\request.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\response.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\server\grpc.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\server\mod.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\server\service.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\service\interceptor.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\service\mod.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\service\router.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\status.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\channel\endpoint.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\channel\mod.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\channel\service\add_origin.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\channel\service\connection.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\channel\service\connector.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\channel\service\discover.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\channel\service\executor.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\channel\service\io.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\channel\service\mod.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\channel\service\reconnect.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\channel\service\tls.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\channel\service\user_agent.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\channel\tls.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\error.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\mod.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\server\conn.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\server\incoming.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\server\mod.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\server\service\io.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\server\service\mod.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\server\service\recover_error.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\server\service\tls.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\server\tls.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\server\unix.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\service\grpc_timeout.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\service\mod.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\service\tls.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\transport\tls.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic\src\util.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-build\src\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-build\src\code_gen.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-build\src\compile_settings.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-build\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-build\src\manual.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-build\src\prost.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-build\src\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-health\src\generated\grpc_health_v1.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-health\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-health\src\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-reflection\src\generated\grpc_reflection_v1.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-reflection\src\generated\grpc_reflection_v1alpha.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-reflection\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-reflection\src\server\mod.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-reflection\src\server\v1.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-reflection\tests\server.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-types\src\generated\google_rpc.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-types\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-types\src\richer_error\error_details\mod.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-types\src\richer_error\error_details\vec.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-types\src\richer_error\mod.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-types\src\richer_error\std_messages\bad_request.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-types\src\richer_error\std_messages\debug_info.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-types\src\richer_error\std_messages\error_info.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-types\src\richer_error\std_messages\help.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-types\src\richer_error\std_messages\loc_message.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-types\src\richer_error\std_messages\mod.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-types\src\richer_error\std_messages\prec_failure.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-types\src\richer_error\std_messages\quota_failure.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-types\src\richer_error\std_messages\request_info.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-types\src\richer_error\std_messages\resource_info.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-types\src\richer_error\std_messages\retry_info.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-web\src\call.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-web\src\client.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-web\src\layer.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-web\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-web\src\service.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-web\tests\integration\build.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-web\tests\integration\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-web\tests\integration\tests\grpc.rs
Processing file: overunsafe库\当前流行的rust库\tonic-master\tonic-master\tonic-web\tests\integration\tests\grpc_web.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\autoreload.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\body.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\compression.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\custom_methods.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\dir.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\dyn_reply.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\file.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\futures.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\handlebars_template.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\headers.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\hello.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\multipart.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\query_string.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\rejections.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\returning.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\routing.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\sse.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\sse_chat.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\stream.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\tls.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\todos.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\tracing.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\unix_socket.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\websockets.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\websockets_chat.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\examples\wrapping.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\error.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filter\and.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filter\and_then.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filter\boxed.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filter\map.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filter\map_err.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filter\mod.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filter\or.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filter\or_else.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filter\recover.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filter\service.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filter\then.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filter\unify.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filter\untuple_one.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filter\wrap.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\addr.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\any.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\body.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\compression.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\cookie.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\cors.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\ext.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\fs.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\header.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\host.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\log.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\method.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\mod.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\multipart.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\path.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\query.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\reply.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\sse.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\trace.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\filters\ws.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\generic.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\redirect.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\reject.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\reply.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\route.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\server.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\service.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\test.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\tls.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\src\transport.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\tests\addr.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\tests\body.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\tests\cookie.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\tests\cors.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\tests\ext.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\tests\filter.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\tests\fs.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\tests\header.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\tests\host.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\tests\method.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\tests\multipart.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\tests\path.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\tests\query.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\tests\redirect.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\tests\reply_with.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\tests\tracing.rs
Processing file: overunsafe库\当前流行的rust库\warp-master\warp-master\tests\ws.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\async_clock\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\async_clock\src\services.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\boids\src\boid.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\boids\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\boids\src\math.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\boids\src\settings.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\boids\src\simulation.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\boids\src\slider.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\communication_child_to_parent\src\child.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\communication_child_to_parent\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\communication_child_to_parent\src\parent.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\communication_grandchild_with_grandparent\src\child.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\communication_grandchild_with_grandparent\src\grandparent.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\communication_grandchild_with_grandparent\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\communication_grandchild_with_grandparent\src\parent.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\communication_grandparent_to_grandchild\src\child.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\communication_grandparent_to_grandchild\src\grandparent.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\communication_grandparent_to_grandchild\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\communication_grandparent_to_grandchild\src\parent.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\communication_parent_to_child\src\child.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\communication_parent_to_child\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\communication_parent_to_child\src\parent.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\contexts\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\contexts\src\msg_ctx.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\contexts\src\producer.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\contexts\src\struct_component_producer.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\contexts\src\struct_component_subscriber.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\contexts\src\subscriber.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\counter\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\counter_functional\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\dyn_create_destroy_apps\src\counter.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\dyn_create_destroy_apps\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\file_upload\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_memory_game\src\components\app.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_memory_game\src\components\chessboard.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_memory_game\src\components\chessboard_card.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_memory_game\src\components\game_status_board.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_memory_game\src\components\score_board.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_memory_game\src\components\score_board_best_score.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_memory_game\src\components\score_board_logo.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_memory_game\src\components\score_board_progress.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_memory_game\src\components.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_memory_game\src\constant.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_memory_game\src\helper.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_memory_game\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_memory_game\src\state.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_router\src\app.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_router\src\bin\function_router.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_router\src\components\author_card.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_router\src\components\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_router\src\components\nav.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_router\src\components\pagination.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_router\src\components\post_card.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_router\src\components\progress_delay.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_router\src\content.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_router\src\generator.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_router\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_router\src\pages\author.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_router\src\pages\author_list.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_router\src\pages\home.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_router\src\pages\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_router\src\pages\page_not_found.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_router\src\pages\post.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_router\src\pages\post_list.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_todomvc\src\components\entry.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_todomvc\src\components\filter.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_todomvc\src\components\header_input.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_todomvc\src\components\info_footer.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_todomvc\src\components.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_todomvc\src\hooks\use_bool_toggle.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_todomvc\src\hooks.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_todomvc\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\function_todomvc\src\state.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\futures\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\futures\src\markdown.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\game_of_life\src\cell.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\game_of_life\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\immutable\src\array.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\immutable\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\immutable\src\map.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\immutable\src\string.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\inner_html\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\js_callback\src\bindings.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\js_callback\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\js_callback\trunk_post_build.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\keyed_list\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\keyed_list\src\person.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\keyed_list\src\random.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\mount_point\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\nested_list\src\app.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\nested_list\src\header.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\nested_list\src\item.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\nested_list\src\list.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\nested_list\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\node_refs\src\input.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\node_refs\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\password_strength\src\app.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\password_strength\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\password_strength\src\password.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\password_strength\src\text_input.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\portals\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\router\src\components\author_card.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\router\src\components\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\router\src\components\pagination.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\router\src\components\post_card.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\router\src\components\progress_delay.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\router\src\content.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\router\src\generator.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\router\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\router\src\pages\author.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\router\src\pages\author_list.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\router\src\pages\home.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\router\src\pages\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\router\src\pages\page_not_found.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\router\src\pages\post.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\router\src\pages\post_list.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\simple_ssr\src\bin\simple_ssr_hydrate.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\simple_ssr\src\bin\simple_ssr_server.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\simple_ssr\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\ssr_router\src\bin\ssr_router_hydrate.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\ssr_router\src\bin\ssr_router_server.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\ssr_router\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\suspense\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\suspense\src\struct_consumer.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\suspense\src\use_sleep.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\timer\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\timer_functional\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\todomvc\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\todomvc\src\state.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\two_apps\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\webgl\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\web_worker_fib\src\agent.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\web_worker_fib\src\bin\app.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\web_worker_fib\src\bin\worker.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\web_worker_fib\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\web_worker_prime\src\agent.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\web_worker_prime\src\bin\app.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\web_worker_prime\src\bin\worker.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\examples\web_worker_prime\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\app_handle.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\callback.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\context.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\dom_bundle\bcomp.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\dom_bundle\blist.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\dom_bundle\bnode.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\dom_bundle\bportal.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\dom_bundle\braw.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\dom_bundle\bsuspense.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\dom_bundle\btag\attributes.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\dom_bundle\btag\listeners.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\dom_bundle\btag\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\dom_bundle\btext.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\dom_bundle\fragment.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\dom_bundle\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\dom_bundle\position.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\dom_bundle\subtree_root.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\dom_bundle\traits.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\dom_bundle\utils.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\hooks\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\hooks\use_callback.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\hooks\use_context.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\hooks\use_effect.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\hooks\use_force_update.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\hooks\use_memo.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\hooks\use_prepared_state\feat_hydration.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\hooks\use_prepared_state\feat_hydration_ssr.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\hooks\use_prepared_state\feat_none.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\hooks\use_prepared_state\feat_ssr.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\hooks\use_prepared_state\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\hooks\use_reducer.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\hooks\use_ref.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\hooks\use_state.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\hooks\use_transitive_state\feat_hydration.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\hooks\use_transitive_state\feat_hydration_ssr.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\hooks\use_transitive_state\feat_none.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\hooks\use_transitive_state\feat_ssr.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\hooks\use_transitive_state\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\functional\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\html\classes.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\html\component\children.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\html\component\lifecycle.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\html\component\marker.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\html\component\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\html\component\properties.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\html\component\scope.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\html\conversion\into_prop_value.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\html\conversion\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\html\error.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\html\listener\events.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\html\listener\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\html\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\platform.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\renderer.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\scheduler.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\sealed.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\server_renderer.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\suspense\component.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\suspense\hooks.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\suspense\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\suspense\suspension.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\tests\layout_tests.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\tests\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\utils\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\virtual_dom\key.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\virtual_dom\listeners.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\virtual_dom\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\virtual_dom\vcomp.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\virtual_dom\vlist.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\virtual_dom\vnode.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\virtual_dom\vportal.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\virtual_dom\vraw.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\virtual_dom\vsuspense.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\virtual_dom\vtag.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\src\virtual_dom\vtext.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\tests\common\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\tests\hydration.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\tests\layout.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\tests\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\tests\raw_html.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\tests\suspense.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\tests\use_callback.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\tests\use_context.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\tests\use_effect.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\tests\use_memo.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\tests\use_prepared_state.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\tests\use_reducer.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\tests\use_ref.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\tests\use_state.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew\tests\use_transitive_state.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-agent\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-agent\src\oneshot\hooks.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-agent\src\oneshot\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-agent\src\oneshot\provider.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-agent\src\reach.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-agent\src\reactor\hooks.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-agent\src\reactor\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-agent\src\reactor\provider.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-agent\src\scope_ext.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-agent\src\utils.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-agent\src\worker\hooks.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-agent\src\worker\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-agent\src\worker\provider.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-agent-macro\src\agent_fn.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-agent-macro\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-agent-macro\src\oneshot.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-agent-macro\src\reactor.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\classes\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\derive_props\builder.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\derive_props\field.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\derive_props\generics.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\derive_props\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\derive_props\wrapper.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\function_component.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\hook\body.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\hook\lifetime.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\hook\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\hook\signature.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\html_tree\html_block.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\html_tree\html_component.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\html_tree\html_dashed_name.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\html_tree\html_element.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\html_tree\html_if.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\html_tree\html_iterable.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\html_tree\html_list.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\html_tree\html_node.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\html_tree\lint\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\html_tree\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\html_tree\tag.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\props\component.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\props\element.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\props\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\props\prop.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\props\prop_macro.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\stringify.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\use_prepared_state.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\src\use_transitive_state.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\classes_macro\classes-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\classes_macro\classes-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\classes_macro_test.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\derive_props\fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\derive_props\pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\derive_props_test.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_attr_test.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\applied-to-non-fn-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\async-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\bad-name-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\bad-props-param-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\bad-return-type-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\const-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\extern-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\generic-lifetime-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\generic-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\generic-props-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\hook_location-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\hook_location-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\lifetime-props-param-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\multiple-param-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\mut-ref-props-param-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\no-name-default-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\with-defaulted-type-param-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\with-props-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\with-receiver-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\function_component_attr\without-props-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\hook_attr\hook-call-generics-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\hook_attr\hook-const-generic-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\hook_attr\hook-dynamic-dispatch-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\hook_attr\hook-impl-trait-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\hook_attr\hook-lifetime-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\hook_attr\hook-return-impl-trait-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\hook_attr\hook-return-ref-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\hook_attr\hook-trait-item-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\hook_attr\hook_location-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\hook_attr\hook_location-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\hook_attr\hook_macro-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\hook_attr\hook_macro-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\hook_attr_test.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\hook_macro\use_prepared_state-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\hook_macro\use_transitive_state-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\hook_macro_test.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_lints\fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_lints_test.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\as-return-value-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\block-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\block-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\component-any-children-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\component-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\component-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\component-unimplemented-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\dyn-element-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\element-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\generic-component-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\generic-component-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\html-element-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\html-if-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\html-if-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\html-node-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\iterable-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\iterable-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\list-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\list-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\node-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\node-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro\svg-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\html_macro_test.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\props_macro\props-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\props_macro\props-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\props_macro\resolve-prop-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\props_macro\resolve-prop-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-macro\tests\props_macro_test.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router\src\components\link.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router\src\components\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router\src\components\redirect.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router\src\hooks.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router\src\macro_helpers.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router\src\navigator.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router\src\routable.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router\src\router.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router\src\scope_ext.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router\src\switch.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router\src\utils.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router\tests\basename.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router\tests\browser_router.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router\tests\hash_router.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router\tests\link.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router\tests\router_unit_tests.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router\tests\url_encoded_routes.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router\tests\utils.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router-macro\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router-macro\src\routable_derive.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router-macro\tests\routable_derive\bad-ats-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router-macro\tests\routable_derive\invalid-not-found-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router-macro\tests\routable_derive\relative-path-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router-macro\tests\routable_derive\route-with-hash-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router-macro\tests\routable_derive\struct-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router-macro\tests\routable_derive\unnamed-fields-fail.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router-macro\tests\routable_derive\valid-pass.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\packages\yew-router-macro\tests\routable_derive_test.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\benchmark-core\benches\vnode.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\benchmark-hooks\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\benchmark-ssr\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\benchmark-struct\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\changelog\src\cli.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\changelog\src\create_log_line.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\changelog\src\create_log_lines.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\changelog\src\get_latest_version.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\changelog\src\github_fetch.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\changelog\src\github_issue_labels_fetcher.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\changelog\src\github_user_fetcher.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\changelog\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\changelog\src\log_line.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\changelog\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\changelog\src\mod.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\changelog\src\new_version_level.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\changelog\src\stdout_tag_description_changelog.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\changelog\src\write_changelog_file.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\changelog\src\write_log_lines.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\changelog\src\write_version_changelog.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\changelog\src\yew_package.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\changelog\tests\generate_yew_changelog_file.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\process-benchmark-results\src\main.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\website-test\build.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\website-test\src\lib.rs
Processing file: overunsafe库\当前流行的rust库\yew-master\yew-master\tools\website-test\src\tutorial.rs
