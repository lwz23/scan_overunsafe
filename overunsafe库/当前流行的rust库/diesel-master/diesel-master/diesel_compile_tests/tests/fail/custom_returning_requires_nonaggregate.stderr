error[E0277]: the trait bound `diesel::expression::is_aggregate::Yes: MixedAggregates<diesel::expression::is_aggregate::No>` is not satisfied
  --> tests/fail/custom_returning_requires_nonaggregate.rs:22:78
   |
22 |     let stmt = update(users.filter(id.eq(1))).set(name.eq("Bill")).returning(count(id));
   |                                                                    --------- ^^^^^^^^^ the trait `MixedAggregates<diesel::expression::is_aggregate::No>` is not implemented for `diesel::expression::is_aggregate::Yes`, which is required by `UpdateStatement<users::table, diesel::query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>>>, diesel::query_builder::update_statement::changeset::Assign<diesel::query_builder::update_statement::changeset::ColumnWrapperForUpdate<columns::name>, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, ReturningClause<_>>: Query`
   |                                                                    |
   |                                                                    required by a bound introduced by this call
   |
   = help: the following other types implement trait `MixedAggregates<Other>`:
             <diesel::expression::is_aggregate::Yes as MixedAggregates<diesel::expression::is_aggregate::Never>>
             <diesel::expression::is_aggregate::Yes as MixedAggregates<diesel::expression::is_aggregate::Yes>>
   = note: required for `UpdateStatement<table, WhereClause<Grouped<Eq<id, Bound<Integer, i32>>>>, Assign<..., ...>, ...>` to implement `Query`
note: required by a bound in `UpdateStatement::<T, U, V>::returning`
  --> $DIESEL/src/query_builder/update_statement/mod.rs
   |
   |     pub fn returning<E>(self, returns: E) -> UpdateStatement<T, U, V, ReturningClause<E>>
   |            --------- required by a bound in this associated function
...
   |         UpdateStatement<T, U, V, ReturningClause<E>>: Query,
   |                                                       ^^^^^ required by this bound in `UpdateStatement::<T, U, V>::returning`
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `diesel::expression::is_aggregate::No: MixedAggregates<diesel::expression::is_aggregate::Yes>` is not satisfied
  --> tests/fail/custom_returning_requires_nonaggregate.rs:27:63
   |
27 |     let stmt = insert_into(users).values(&new_user).returning((name, count(name)));
   |                                                     --------- ^^^^^^^^^^^^^^^^^^^ the trait `MixedAggregates<diesel::expression::is_aggregate::Yes>` is not implemented for `diesel::expression::is_aggregate::No`, which is required by `InsertStatement<users::table, diesel::query_builder::insert_statement::ValuesClause<(DefaultableColumnInsertValue<ColumnInsertValue<columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>,), users::table>, diesel::query_builder::insert_statement::private::Insert, ReturningClause<_>>: Query`
   |                                                     |
   |                                                     required by a bound introduced by this call
   |
   = help: the following other types implement trait `MixedAggregates<Other>`:
             <diesel::expression::is_aggregate::No as MixedAggregates<diesel::expression::is_aggregate::Never>>
             <diesel::expression::is_aggregate::No as MixedAggregates<diesel::expression::is_aggregate::No>>
   = note: required for `(columns::name, diesel::expression::count::count_utils::count<diesel::sql_types::Text, columns::name>)` to implement `ValidGrouping<()>`
   = note: required for `(columns::name, diesel::expression::count::count_utils::count<diesel::sql_types::Text, columns::name>)` to implement `NonAggregate`
   = note: required for `InsertStatement<table, ValuesClause<(DefaultableColumnInsertValue<...>,), ...>, ..., ...>` to implement `Query`
note: required by a bound in `InsertStatement::<T, U, Op>::returning`
  --> $DIESEL/src/query_builder/insert_statement/mod.rs
   |
   |     pub fn returning<E>(self, returns: E) -> InsertStatement<T, U, Op, ReturningClause<E>>
   |            --------- required by a bound in this associated function
   |     where
   |         InsertStatement<T, U, Op, ReturningClause<E>>: Query,
   |                                                        ^^^^^ required by this bound in `InsertStatement::<T, U, Op>::returning`
   = note: consider using `--verbose` to print the full type name to the console
