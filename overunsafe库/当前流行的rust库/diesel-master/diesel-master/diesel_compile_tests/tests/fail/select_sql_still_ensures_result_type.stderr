error[E0277]: cannot deserialize a value of the database type `BigInt` as `*const str`
  --> tests/fail/select_sql_still_ensures_result_type.rs:16:51
   |
16 |     let count = select_count.get_result::<String>(&mut connection).unwrap();
   |                              ----------           ^^^^^^^^^^^^^^^ the trait `FromSql<BigInt, _>` is not implemented for `*const str`, which is required by `SelectStatement<FromClause<users::table>, diesel::query_builder::select_clause::SelectClause<SqlLiteral<BigInt>>>: LoadQuery<'_, _, std::string::String>`
   |                              |
   |                              required by a bound introduced by this call
   |
   = note: double check your type mappings via the documentation of `BigInt`
   = help: the following other types implement trait `FromSql<A, DB>`:
             <*const str as FromSql<diesel::sql_types::Text, Mysql>>
             <*const str as FromSql<diesel::sql_types::Text, Pg>>
             <*const str as FromSql<diesel::sql_types::Text, Sqlite>>
   = note: required for `std::string::String` to implement `FromSql<BigInt, _>`
   = note: required for `std::string::String` to implement `Queryable<BigInt, _>`
   = note: required for `std::string::String` to implement `FromSqlRow<BigInt, _>`
   = note: required for `BigInt` to implement `load_dsl::private::CompatibleType<std::string::String, _>`
   = note: required for `SelectStatement<FromClause<users::table>, diesel::query_builder::select_clause::SelectClause<SqlLiteral<BigInt>>>` to implement `LoadQuery<'_, _, std::string::String>`
note: required by a bound in `get_result`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
   |        ---------- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
