error[E0277]: the trait bound `SelectStatement<FromClause<users::table>, diesel::query_builder::select_clause::DefaultSelectClause<FromClause<users::table>>, diesel::query_builder::distinct_clause::NoDistinctClause, diesel::query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<users::columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>>>>: AsInExpression<diesel::sql_types::Integer>` is not satisfied
  --> tests/fail/subselect_requires_correct_type.rs:22:59
   |
22 |     let query = posts::table.filter(posts::user_id.eq_any(subquery));
   |                                                    ------ ^^^^^^^^ the trait `AsInExpression<diesel::sql_types::Integer>` is not implemented for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<...>>`
   |                                                    |
   |                                                    required by a bound introduced by this call
   |
   = help: the trait `AsInExpression<(diesel::sql_types::Integer, diesel::sql_types::Text)>` is implemented for `SelectStatement<FromClause<users::table>, diesel::query_builder::select_clause::DefaultSelectClause<FromClause<users::table>>, diesel::query_builder::distinct_clause::NoDistinctClause, diesel::query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<users::columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>>>>`
   = help: for that trait implementation, expected `(diesel::sql_types::Integer, diesel::sql_types::Text)`, found `diesel::sql_types::Integer`
note: required by a bound in `eq_any`
  --> $DIESEL/src/expression_methods/global_expression_methods.rs
   |
   |     fn eq_any<T>(self, values: T) -> dsl::EqAny<Self, T>
   |        ------ required by a bound in this associated function
...
   |         T: AsInExpression<Self::SqlType>,
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ExpressionMethods::eq_any`
