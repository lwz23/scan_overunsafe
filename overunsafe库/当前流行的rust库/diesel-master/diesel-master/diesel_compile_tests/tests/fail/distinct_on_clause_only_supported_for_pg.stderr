error[E0277]: `DistinctOnClause<columns::name>` is no valid SQL fragment for the `Sqlite` backend
  --> tests/fail/distinct_on_clause_only_supported_for_pg.rs:16:41
   |
16 |     users.distinct_on(name).get_results(&mut sqlite_connection);
   |                             ----------- ^^^^^^^^^^^^^^^^^^^^^^ the trait `QueryFragment<Sqlite>` is not implemented for `DistinctOnClause<columns::name>`, which is required by `SelectStatement<FromClause<users::table>, diesel::query_builder::select_clause::DefaultSelectClause<FromClause<users::table>>, DistinctOnClause<columns::name>>: LoadQuery<'_, _, _>`
   |                             |
   |                             required by a bound introduced by this call
   |
   = note: this usually means that the `Sqlite` database system does not support
           this SQL syntax
   = help: the trait `QueryFragment<Pg>` is implemented for `DistinctOnClause<columns::name>`
   = help: for that trait implementation, expected `Pg`, found `Sqlite`
   = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, DistinctOnClause<name>>` to implement `QueryFragment<Sqlite, AnsiSqlSelectStatement>`
   = note: 1 redundant requirement hidden
   = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, DistinctOnClause<name>>` to implement `QueryFragment<Sqlite>`
   = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, DistinctOnClause<name>>` to implement `LoadQuery<'_, diesel::SqliteConnection, _>`
note: required by a bound in `get_results`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn get_results<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
   |        ----------- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_results`
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: `DistinctOnClause<columns::name>` is no valid SQL fragment for the `Mysql` backend
  --> tests/fail/distinct_on_clause_only_supported_for_pg.rs:20:41
   |
20 |     users.distinct_on(name).get_results(&mut mysql_connection);
   |                             ----------- ^^^^^^^^^^^^^^^^^^^^^ the trait `QueryFragment<Mysql>` is not implemented for `DistinctOnClause<columns::name>`, which is required by `SelectStatement<FromClause<users::table>, diesel::query_builder::select_clause::DefaultSelectClause<FromClause<users::table>>, DistinctOnClause<columns::name>>: LoadQuery<'_, _, _>`
   |                             |
   |                             required by a bound introduced by this call
   |
   = note: this usually means that the `Mysql` database system does not support
           this SQL syntax
   = help: the trait `QueryFragment<Pg>` is implemented for `DistinctOnClause<columns::name>`
   = help: for that trait implementation, expected `Pg`, found `Mysql`
   = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, DistinctOnClause<name>>` to implement `QueryFragment<Mysql, AnsiSqlSelectStatement>`
   = note: 1 redundant requirement hidden
   = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, DistinctOnClause<name>>` to implement `QueryFragment<Mysql>`
   = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, DistinctOnClause<name>>` to implement `LoadQuery<'_, diesel::MysqlConnection, _>`
note: required by a bound in `get_results`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn get_results<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
   |        ----------- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_results`
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console
