error[E0277]: Cannot select `f64` from `NoFromClause`
  --> tests/fail/array_expressions_must_be_same_type.rs:15:12
   |
15 |     select(array((1, 3f64)))
   |     ------ ^^^^^^^^^^^^^^^^ the trait `SelectableExpression<NoFromClause>` is not implemented for `f64`, which is required by `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<_>>: AsQuery`
   |     |
   |     required by a bound introduced by this call
   |
   = note: `f64` is no valid selection for `NoFromClause`
   = help: the following other types implement trait `SelectableExpression<QS>`:
             <&'a T as SelectableExpression<QS>>
             <(T0, T1) as SelectableExpression<QS>>
             <(T0, T1, T2) as SelectableExpression<QS>>
             <(T0, T1, T2, T3) as SelectableExpression<QS>>
             <(T0, T1, T2, T3, T4) as SelectableExpression<QS>>
             <(T0, T1, T2, T3, T4, T5) as SelectableExpression<QS>>
             <(T0, T1, T2, T3, T4, T5, T6) as SelectableExpression<QS>>
             <(T0, T1, T2, T3, T4, T5, T6, T7) as SelectableExpression<QS>>
           and $N others
   = note: required for `(diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>, f64)` to implement `SelectableExpression<NoFromClause>`
   = note: 1 redundant requirement hidden
   = note: required for `ArrayLiteral<(Bound<Integer, i32>, f64), Integer>` to implement `SelectableExpression<NoFromClause>`
   = note: required for `SelectClause<ArrayLiteral<(Bound<Integer, i32>, f64), Integer>>` to implement `diesel::query_builder::select_clause::SelectClauseExpression<NoFromClause>`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<(Bound<Integer, i32>, f64), Integer>>>` to implement `Query`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<(Bound<Integer, i32>, f64), Integer>>>` to implement `AsQuery`
note: required by a bound in `diesel::select`
  --> $DIESEL/src/query_builder/functions.rs
   |
   | pub fn select<T>(expression: T) -> crate::dsl::select<T>
   |        ------ required by a bound in this function
...
   |     crate::dsl::select<T>: AsQuery,
   |                            ^^^^^^^ required by this bound in `select`
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `f64: ValidGrouping<()>` is not satisfied
  --> tests/fail/array_expressions_must_be_same_type.rs:15:12
   |
15 |     select(array((1, 3f64)))
   |     ------ ^^^^^^^^^^^^^^^^ the trait `ValidGrouping<()>` is not implemented for `f64`, which is required by `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<_>>: AsQuery`
   |     |
   |     required by a bound introduced by this call
   |
   = help: the following other types implement trait `ValidGrouping<GroupByClause>`:
             <&'a T as ValidGrouping<GB>>
             <(T0, T1) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3, T4) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3, T4, T5) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3, T4, T5, T6) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3, T4, T5, T6, T7) as ValidGrouping<__GroupByClause>>
           and $N others
   = note: required for `(f64,)` to implement `ValidGrouping<()>`
   = note: 2 redundant requirements hidden
   = note: required for `ArrayLiteral<(Bound<Integer, i32>, f64), Integer>` to implement `ValidGrouping<()>`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<(Bound<Integer, i32>, f64), Integer>>>` to implement `Query`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<(Bound<Integer, i32>, f64), Integer>>>` to implement `AsQuery`
note: required by a bound in `diesel::select`
  --> $DIESEL/src/query_builder/functions.rs
   |
   | pub fn select<T>(expression: T) -> crate::dsl::select<T>
   |        ------ required by a bound in this function
...
   |     crate::dsl::select<T>: AsQuery,
   |                            ^^^^^^^ required by this bound in `select`
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: Cannot select `f64` from `NoFromClause`
  --> tests/fail/array_expressions_must_be_same_type.rs:16:33
   |
16 |         .get_result::<Vec<i32>>(&mut connection)
   |          ----------             ^^^^^^^^^^^^^^^ the trait `SelectableExpression<NoFromClause>` is not implemented for `f64`, which is required by `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(_, _), _>>>: LoadQuery<'_, _, Vec<i32>>`
   |          |
   |          required by a bound introduced by this call
   |
   = note: `f64` is no valid selection for `NoFromClause`
   = help: the following other types implement trait `SelectableExpression<QS>`:
             <&'a T as SelectableExpression<QS>>
             <(T0, T1) as SelectableExpression<QS>>
             <(T0, T1, T2) as SelectableExpression<QS>>
             <(T0, T1, T2, T3) as SelectableExpression<QS>>
             <(T0, T1, T2, T3, T4) as SelectableExpression<QS>>
             <(T0, T1, T2, T3, T4, T5) as SelectableExpression<QS>>
             <(T0, T1, T2, T3, T4, T5, T6) as SelectableExpression<QS>>
             <(T0, T1, T2, T3, T4, T5, T6, T7) as SelectableExpression<QS>>
           and $N others
   = note: required for `(diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>, f64)` to implement `SelectableExpression<NoFromClause>`
   = note: 1 redundant requirement hidden
   = note: required for `ArrayLiteral<(Bound<Integer, i32>, f64), Integer>` to implement `SelectableExpression<NoFromClause>`
   = note: required for `SelectClause<ArrayLiteral<(Bound<Integer, i32>, f64), Integer>>` to implement `diesel::query_builder::select_clause::SelectClauseExpression<NoFromClause>`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<(Bound<Integer, i32>, f64), Integer>>>` to implement `Query`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<(Bound<Integer, i32>, f64), Integer>>>` to implement `LoadQuery<'_, _, Vec<i32>>`
note: required by a bound in `get_result`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
   |        ---------- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `f64: ValidGrouping<()>` is not satisfied
  --> tests/fail/array_expressions_must_be_same_type.rs:16:33
   |
16 |         .get_result::<Vec<i32>>(&mut connection)
   |          ----------             ^^^^^^^^^^^^^^^ the trait `ValidGrouping<()>` is not implemented for `f64`, which is required by `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(_, _), _>>>: LoadQuery<'_, _, Vec<i32>>`
   |          |
   |          required by a bound introduced by this call
   |
   = help: the following other types implement trait `ValidGrouping<GroupByClause>`:
             <&'a T as ValidGrouping<GB>>
             <(T0, T1) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3, T4) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3, T4, T5) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3, T4, T5, T6) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3, T4, T5, T6, T7) as ValidGrouping<__GroupByClause>>
           and $N others
   = note: required for `(f64,)` to implement `ValidGrouping<()>`
   = note: 2 redundant requirements hidden
   = note: required for `ArrayLiteral<(Bound<Integer, i32>, f64), Integer>` to implement `ValidGrouping<()>`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<(Bound<Integer, i32>, f64), Integer>>>` to implement `Query`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<(Bound<Integer, i32>, f64), Integer>>>` to implement `LoadQuery<'_, _, Vec<i32>>`
note: required by a bound in `get_result`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
   |        ---------- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `f64: QueryId` is not satisfied
  --> tests/fail/array_expressions_must_be_same_type.rs:16:33
   |
16 |         .get_result::<Vec<i32>>(&mut connection)
   |          ----------             ^^^^^^^^^^^^^^^ the trait `QueryId` is not implemented for `f64`, which is required by `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(_, _), _>>>: LoadQuery<'_, _, Vec<i32>>`
   |          |
   |          required by a bound introduced by this call
   |
   = help: the following other types implement trait `QueryId`:
             &'a T
             ()
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
             (T0, T1, T2, T3, T4)
             (T0, T1, T2, T3, T4, T5)
             (T0, T1, T2, T3, T4, T5, T6)
           and $N others
   = note: required for `(diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>, f64)` to implement `QueryId`
   = note: 3 redundant requirements hidden
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<(Bound<Integer, i32>, f64), Integer>>>` to implement `QueryId`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<(Bound<Integer, i32>, f64), Integer>>>` to implement `LoadQuery<'_, _, Vec<i32>>`
note: required by a bound in `get_result`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
   |        ---------- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: `f64` is no valid SQL fragment for the `Pg` backend
  --> tests/fail/array_expressions_must_be_same_type.rs:16:33
   |
16 |         .get_result::<Vec<i32>>(&mut connection)
   |          ----------             ^^^^^^^^^^^^^^^ the trait `QueryFragment<Pg>` is not implemented for `f64`, which is required by `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(_, _), _>>>: LoadQuery<'_, _, Vec<i32>>`
   |          |
   |          required by a bound introduced by this call
   |
   = note: this usually means that the `Pg` database system does not support
           this SQL syntax
   = help: the following other types implement trait `QueryFragment<DB, SP>`:
             <&'a T as QueryFragment<DB>>
             <() as QueryFragment<DB>>
             <(T0, T1) as QueryFragment<__DB>>
             <(T0, T1, T2) as QueryFragment<__DB>>
             <(T0, T1, T2, T3) as QueryFragment<__DB>>
             <(T0, T1, T2, T3, T4) as QueryFragment<__DB>>
             <(T0, T1, T2, T3, T4, T5) as QueryFragment<__DB>>
             <(T0, T1, T2, T3, T4, T5, T6) as QueryFragment<__DB>>
           and $N others
   = note: required for `(diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>, f64)` to implement `QueryFragment<Pg>`
   = note: 4 redundant requirements hidden
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<(Bound<Integer, i32>, f64), Integer>>>` to implement `QueryFragment<Pg>`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<(Bound<Integer, i32>, f64), Integer>>>` to implement `LoadQuery<'_, _, Vec<i32>>`
note: required by a bound in `get_result`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
   |        ---------- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `f64: diesel::Expression` is not satisfied
  --> tests/fail/array_expressions_must_be_same_type.rs:15:22
   |
15 |     select(array((1, 3f64)))
   |            -----     ^^^^ the trait `diesel::Expression` is not implemented for `f64`, which is required by `({integer}, f64): AsExpressionList<_>`
   |            |
   |            required by a bound introduced by this call
   |
   = help: the following other types implement trait `diesel::Expression`:
             &'a T
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
             (T0, T1, T2, T3, T4)
             (T0, T1, T2, T3, T4, T5)
             (T0, T1, T2, T3, T4, T5, T6)
             (T0, T1, T2, T3, T4, T5, T6, T7)
           and $N others
   = note: required for `f64` to implement `AsExpression<diesel::sql_types::Integer>`
   = note: required for `(i32, f64)` to implement `AsExpressionList<diesel::sql_types::Integer>`
note: required by a bound in `diesel::dsl::array`
  --> $DIESEL/src/pg/expression/array.rs
   |
   | pub fn array<ST, T>(elements: T) -> ArrayLiteral<T::Expression, ST>
   |        ----- required by a bound in this function
   | where
   |     T: AsExpressionList<ST>,
   |        ^^^^^^^^^^^^^^^^^^^^ required by this bound in `array`

error[E0277]: Cannot select `{integer}` from `NoFromClause`
  --> tests/fail/array_expressions_must_be_same_type.rs:18:12
   |
18 |     select(array((1, 3f64)))
   |     ------ ^^^^^^^^^^^^^^^^ the trait `SelectableExpression<NoFromClause>` is not implemented for `{integer}`, which is required by `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<_>>: AsQuery`
   |     |
   |     required by a bound introduced by this call
   |
   = note: `{integer}` is no valid selection for `NoFromClause`
   = help: the following other types implement trait `SelectableExpression<QS>`:
             <&'a T as SelectableExpression<QS>>
             <(T0, T1) as SelectableExpression<QS>>
             <(T0, T1, T2) as SelectableExpression<QS>>
             <(T0, T1, T2, T3) as SelectableExpression<QS>>
             <(T0, T1, T2, T3, T4) as SelectableExpression<QS>>
             <(T0, T1, T2, T3, T4, T5) as SelectableExpression<QS>>
             <(T0, T1, T2, T3, T4, T5, T6) as SelectableExpression<QS>>
             <(T0, T1, T2, T3, T4, T5, T6, T7) as SelectableExpression<QS>>
           and $N others
   = note: required for `({integer}, diesel::expression::bound::Bound<diesel::sql_types::Double, f64>)` to implement `SelectableExpression<NoFromClause>`
   = note: 1 redundant requirement hidden
   = note: required for `ArrayLiteral<({integer}, Bound<Double, f64>), Double>` to implement `SelectableExpression<NoFromClause>`
   = note: required for `SelectClause<ArrayLiteral<({integer}, Bound<Double, f64>), Double>>` to implement `diesel::query_builder::select_clause::SelectClauseExpression<NoFromClause>`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<({integer}, Bound<Double, f64>), Double>>>` to implement `Query`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<({integer}, Bound<Double, f64>), Double>>>` to implement `AsQuery`
note: required by a bound in `diesel::select`
  --> $DIESEL/src/query_builder/functions.rs
   |
   | pub fn select<T>(expression: T) -> crate::dsl::select<T>
   |        ------ required by a bound in this function
...
   |     crate::dsl::select<T>: AsQuery,
   |                            ^^^^^^^ required by this bound in `select`
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `{integer}: ValidGrouping<()>` is not satisfied
  --> tests/fail/array_expressions_must_be_same_type.rs:18:12
   |
18 |     select(array((1, 3f64)))
   |     ------ ^^^^^^^^^^^^^^^^ the trait `ValidGrouping<()>` is not implemented for `{integer}`, which is required by `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<_>>: AsQuery`
   |     |
   |     required by a bound introduced by this call
   |
   = help: the following other types implement trait `ValidGrouping<GroupByClause>`:
             <&'a T as ValidGrouping<GB>>
             <(T0, T1) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3, T4) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3, T4, T5) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3, T4, T5, T6) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3, T4, T5, T6, T7) as ValidGrouping<__GroupByClause>>
           and $N others
   = note: required for `({integer}, diesel::expression::bound::Bound<diesel::sql_types::Double, f64>)` to implement `ValidGrouping<()>`
   = note: 1 redundant requirement hidden
   = note: required for `ArrayLiteral<({integer}, Bound<Double, f64>), Double>` to implement `ValidGrouping<()>`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<({integer}, Bound<Double, f64>), Double>>>` to implement `Query`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<({integer}, Bound<Double, f64>), Double>>>` to implement `AsQuery`
note: required by a bound in `diesel::select`
  --> $DIESEL/src/query_builder/functions.rs
   |
   | pub fn select<T>(expression: T) -> crate::dsl::select<T>
   |        ------ required by a bound in this function
...
   |     crate::dsl::select<T>: AsQuery,
   |                            ^^^^^^^ required by this bound in `select`
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: Cannot select `{integer}` from `NoFromClause`
  --> tests/fail/array_expressions_must_be_same_type.rs:19:33
   |
19 |         .get_result::<Vec<f64>>(&mut connection)
   |          ----------             ^^^^^^^^^^^^^^^ the trait `SelectableExpression<NoFromClause>` is not implemented for `{integer}`, which is required by `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(_, _), _>>>: LoadQuery<'_, _, Vec<f64>>`
   |          |
   |          required by a bound introduced by this call
   |
   = note: `{integer}` is no valid selection for `NoFromClause`
   = help: the following other types implement trait `SelectableExpression<QS>`:
             <&'a T as SelectableExpression<QS>>
             <(T0, T1) as SelectableExpression<QS>>
             <(T0, T1, T2) as SelectableExpression<QS>>
             <(T0, T1, T2, T3) as SelectableExpression<QS>>
             <(T0, T1, T2, T3, T4) as SelectableExpression<QS>>
             <(T0, T1, T2, T3, T4, T5) as SelectableExpression<QS>>
             <(T0, T1, T2, T3, T4, T5, T6) as SelectableExpression<QS>>
             <(T0, T1, T2, T3, T4, T5, T6, T7) as SelectableExpression<QS>>
           and $N others
   = note: required for `({integer}, diesel::expression::bound::Bound<diesel::sql_types::Double, f64>)` to implement `SelectableExpression<NoFromClause>`
   = note: 1 redundant requirement hidden
   = note: required for `ArrayLiteral<({integer}, Bound<Double, f64>), Double>` to implement `SelectableExpression<NoFromClause>`
   = note: required for `SelectClause<ArrayLiteral<({integer}, Bound<Double, f64>), Double>>` to implement `diesel::query_builder::select_clause::SelectClauseExpression<NoFromClause>`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<({integer}, Bound<Double, f64>), Double>>>` to implement `Query`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<({integer}, Bound<Double, f64>), Double>>>` to implement `LoadQuery<'_, _, Vec<f64>>`
note: required by a bound in `get_result`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
   |        ---------- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `{integer}: ValidGrouping<()>` is not satisfied
  --> tests/fail/array_expressions_must_be_same_type.rs:19:33
   |
19 |         .get_result::<Vec<f64>>(&mut connection)
   |          ----------             ^^^^^^^^^^^^^^^ the trait `ValidGrouping<()>` is not implemented for `{integer}`, which is required by `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(_, _), _>>>: LoadQuery<'_, _, Vec<f64>>`
   |          |
   |          required by a bound introduced by this call
   |
   = help: the following other types implement trait `ValidGrouping<GroupByClause>`:
             <&'a T as ValidGrouping<GB>>
             <(T0, T1) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3, T4) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3, T4, T5) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3, T4, T5, T6) as ValidGrouping<__GroupByClause>>
             <(T0, T1, T2, T3, T4, T5, T6, T7) as ValidGrouping<__GroupByClause>>
           and $N others
   = note: required for `({integer}, diesel::expression::bound::Bound<diesel::sql_types::Double, f64>)` to implement `ValidGrouping<()>`
   = note: 1 redundant requirement hidden
   = note: required for `ArrayLiteral<({integer}, Bound<Double, f64>), Double>` to implement `ValidGrouping<()>`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<({integer}, Bound<Double, f64>), Double>>>` to implement `Query`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<({integer}, Bound<Double, f64>), Double>>>` to implement `LoadQuery<'_, _, Vec<f64>>`
note: required by a bound in `get_result`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
   |        ---------- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `{integer}: QueryId` is not satisfied
  --> tests/fail/array_expressions_must_be_same_type.rs:19:33
   |
19 |         .get_result::<Vec<f64>>(&mut connection)
   |          ----------             ^^^^^^^^^^^^^^^ the trait `QueryId` is not implemented for `{integer}`, which is required by `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(_, _), _>>>: LoadQuery<'_, _, Vec<f64>>`
   |          |
   |          required by a bound introduced by this call
   |
   = help: the following other types implement trait `QueryId`:
             &'a T
             ()
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
             (T0, T1, T2, T3, T4)
             (T0, T1, T2, T3, T4, T5)
             (T0, T1, T2, T3, T4, T5, T6)
           and $N others
   = note: required for `({integer}, diesel::expression::bound::Bound<diesel::sql_types::Double, f64>)` to implement `QueryId`
   = note: 3 redundant requirements hidden
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<({integer}, Bound<Double, f64>), Double>>>` to implement `QueryId`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<({integer}, Bound<Double, f64>), Double>>>` to implement `LoadQuery<'_, _, Vec<f64>>`
note: required by a bound in `get_result`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
   |        ---------- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: `{integer}` is no valid SQL fragment for the `Pg` backend
  --> tests/fail/array_expressions_must_be_same_type.rs:19:33
   |
19 |         .get_result::<Vec<f64>>(&mut connection)
   |          ----------             ^^^^^^^^^^^^^^^ the trait `QueryFragment<Pg>` is not implemented for `{integer}`, which is required by `SelectStatement<NoFromClause, diesel::query_builder::select_clause::SelectClause<diesel::pg::expression::array::ArrayLiteral<(_, _), _>>>: LoadQuery<'_, _, Vec<f64>>`
   |          |
   |          required by a bound introduced by this call
   |
   = note: this usually means that the `Pg` database system does not support
           this SQL syntax
   = help: the following other types implement trait `QueryFragment<DB, SP>`:
             <&'a T as QueryFragment<DB>>
             <() as QueryFragment<DB>>
             <(T0, T1) as QueryFragment<__DB>>
             <(T0, T1, T2) as QueryFragment<__DB>>
             <(T0, T1, T2, T3) as QueryFragment<__DB>>
             <(T0, T1, T2, T3, T4) as QueryFragment<__DB>>
             <(T0, T1, T2, T3, T4, T5) as QueryFragment<__DB>>
             <(T0, T1, T2, T3, T4, T5, T6) as QueryFragment<__DB>>
           and $N others
   = note: required for `({integer}, diesel::expression::bound::Bound<diesel::sql_types::Double, f64>)` to implement `QueryFragment<Pg>`
   = note: 4 redundant requirements hidden
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<({integer}, Bound<Double, f64>), Double>>>` to implement `QueryFragment<Pg>`
   = note: required for `SelectStatement<NoFromClause, SelectClause<ArrayLiteral<({integer}, Bound<Double, f64>), Double>>>` to implement `LoadQuery<'_, _, Vec<f64>>`
note: required by a bound in `get_result`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
   |        ---------- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `{integer}: diesel::Expression` is not satisfied
  --> tests/fail/array_expressions_must_be_same_type.rs:18:19
   |
18 |     select(array((1, 3f64)))
   |            -----  ^ the trait `diesel::Expression` is not implemented for `{integer}`, which is required by `({integer}, f64): AsExpressionList<_>`
   |            |
   |            required by a bound introduced by this call
   |
   = help: the following other types implement trait `diesel::Expression`:
             &'a T
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
             (T0, T1, T2, T3, T4)
             (T0, T1, T2, T3, T4, T5)
             (T0, T1, T2, T3, T4, T5, T6)
             (T0, T1, T2, T3, T4, T5, T6, T7)
           and $N others
   = note: required for `{integer}` to implement `AsExpression<diesel::sql_types::Double>`
   = note: required for `({integer}, f64)` to implement `AsExpressionList<diesel::sql_types::Double>`
note: required by a bound in `diesel::dsl::array`
  --> $DIESEL/src/pg/expression/array.rs
   |
   | pub fn array<ST, T>(elements: T) -> ArrayLiteral<T::Expression, ST>
   |        ----- required by a bound in this function
   | where
   |     T: AsExpressionList<ST>,
   |        ^^^^^^^^^^^^^^^^^^^^ required by this bound in `array`
