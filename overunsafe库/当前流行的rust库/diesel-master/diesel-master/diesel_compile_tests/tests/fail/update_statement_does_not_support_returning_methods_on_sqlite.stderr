error[E0277]: `ReturningClause<(columns::id, columns::name)>` is no valid SQL fragment for the `Sqlite` backend
  --> tests/fail/update_statement_does_not_support_returning_methods_on_sqlite.rs:18:21
   |
18 |         .get_result(&mut connection);
   |          ---------- ^^^^^^^^^^^^^^^ the trait `QueryFragment<Sqlite, DoesNotSupportReturningClause>` is not implemented for `ReturningClause<(columns::id, columns::name)>`, which is required by `UpdateStatement<users::table, diesel::query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>>>, diesel::query_builder::update_statement::changeset::Assign<diesel::query_builder::update_statement::changeset::ColumnWrapperForUpdate<columns::name>, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>>: LoadQuery<'_, _, _>`
   |          |
   |          required by a bound introduced by this call
   |
   = note: this usually means that the `Sqlite` database system does not support
           this SQL syntax
   = help: the following other types implement trait `QueryFragment<DB, SP>`:
             <ReturningClause<Expr> as QueryFragment<DB, PgLikeReturningClause>>
             <ReturningClause<Expr> as QueryFragment<DB, sqlite::backend::SqliteReturningClause>>
             <ReturningClause<Expr> as QueryFragment<DB>>
   = note: required for `ReturningClause<(columns::id, columns::name)>` to implement `QueryFragment<Sqlite>`
   = note: 1 redundant requirement hidden
   = note: required for `UpdateStatement<table, WhereClause<Grouped<Eq<id, Bound<Integer, i32>>>>, Assign<..., ...>, ...>` to implement `QueryFragment<Sqlite>`
   = note: required for `UpdateStatement<table, WhereClause<Grouped<Eq<id, Bound<Integer, i32>>>>, Assign<..., ...>>` to implement `LoadQuery<'_, diesel::SqliteConnection, _>`
note: required by a bound in `get_result`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
   |        ---------- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: `ReturningClause<columns::name>` is no valid SQL fragment for the `Sqlite` backend
  --> tests/fail/update_statement_does_not_support_returning_methods_on_sqlite.rs:23:21
   |
23 |         .get_result(&mut connection);
   |          ---------- ^^^^^^^^^^^^^^^ the trait `QueryFragment<Sqlite, DoesNotSupportReturningClause>` is not implemented for `ReturningClause<columns::name>`, which is required by `UpdateStatement<users::table, diesel::query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>>>, diesel::query_builder::update_statement::changeset::Assign<diesel::query_builder::update_statement::changeset::ColumnWrapperForUpdate<columns::name>, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, ReturningClause<columns::name>>: LoadQuery<'_, _, _>`
   |          |
   |          required by a bound introduced by this call
   |
   = note: this usually means that the `Sqlite` database system does not support
           this SQL syntax
   = help: the following other types implement trait `QueryFragment<DB, SP>`:
             <ReturningClause<Expr> as QueryFragment<DB, PgLikeReturningClause>>
             <ReturningClause<Expr> as QueryFragment<DB, sqlite::backend::SqliteReturningClause>>
             <ReturningClause<Expr> as QueryFragment<DB>>
   = note: required for `ReturningClause<columns::name>` to implement `QueryFragment<Sqlite>`
   = note: 1 redundant requirement hidden
   = note: required for `UpdateStatement<table, WhereClause<Grouped<Eq<id, Bound<Integer, i32>>>>, Assign<..., ...>, ...>` to implement `QueryFragment<Sqlite>`
   = note: required for `UpdateStatement<table, WhereClause<Grouped<Eq<id, Bound<Integer, i32>>>>, Assign<..., ...>, ...>` to implement `LoadQuery<'_, diesel::SqliteConnection, _>`
note: required by a bound in `get_result`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
   |        ---------- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console
