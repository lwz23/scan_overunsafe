error[E0277]: `LimitOffsetClause<NoLimitClause, OffsetClause<diesel::expression::bound::Bound<BigInt, i64>>>` is no valid SQL fragment for the `Mysql` backend
  --> tests/fail/mysql_does_not_support_offset_without_limit.rs:16:57
   |
16 |     users::table.offset(42).get_result::<(i32, String)>(&mut connection);
   |                             ----------                  ^^^^^^^^^^^^^^^ the trait `QueryFragment<Mysql>` is not implemented for `LimitOffsetClause<NoLimitClause, OffsetClause<diesel::expression::bound::Bound<BigInt, i64>>>`, which is required by `SelectStatement<FromClause<users::table>, diesel::query_builder::select_clause::DefaultSelectClause<FromClause<users::table>>, diesel::query_builder::distinct_clause::NoDistinctClause, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::order_clause::NoOrderClause, LimitOffsetClause<NoLimitClause, OffsetClause<diesel::expression::bound::Bound<BigInt, i64>>>>: LoadQuery<'_, _, (i32, std::string::String)>`
   |                             |
   |                             required by a bound introduced by this call
   |
   = note: this usually means that the `Mysql` database system does not support
           this SQL syntax
   = help: the following other types implement trait `QueryFragment<DB, SP>`:
             <LimitOffsetClause<L, O> as QueryFragment<Pg>>
             <LimitOffsetClause<LimitClause<L>, NoOffsetClause> as QueryFragment<Mysql>>
             <LimitOffsetClause<LimitClause<L>, NoOffsetClause> as QueryFragment<Sqlite>>
             <LimitOffsetClause<LimitClause<L>, OffsetClause<O>> as QueryFragment<Mysql>>
             <LimitOffsetClause<LimitClause<L>, OffsetClause<O>> as QueryFragment<Sqlite>>
             <LimitOffsetClause<NoLimitClause, NoOffsetClause> as QueryFragment<Mysql>>
             <LimitOffsetClause<NoLimitClause, NoOffsetClause> as QueryFragment<Sqlite>>
             <LimitOffsetClause<NoLimitClause, OffsetClause<O>> as QueryFragment<Sqlite>>
   = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, ..., ..., ...>` to implement `QueryFragment<Mysql, AnsiSqlSelectStatement>`
   = note: 1 redundant requirement hidden
   = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, ..., ..., ...>` to implement `QueryFragment<Mysql>`
   = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, ..., ..., ...>` to implement `LoadQuery<'_, diesel::MysqlConnection, (i32, std::string::String)>`
note: required by a bound in `get_result`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>
   |        ---------- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::get_result`
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `LimitOffsetClause<NoLimitClause, OffsetClause<diesel::expression::bound::Bound<BigInt, i64>>>: IntoBoxedClause<'_, Mysql>` is not satisfied
  --> tests/fail/mysql_does_not_support_offset_without_limit.rs:18:29
   |
18 |     users::table.offset(42).into_boxed().get_result::<(i32, String)>(&mut connection);
   |                             ^^^^^^^^^^ the trait `IntoBoxedClause<'_, Mysql>` is not implemented for `LimitOffsetClause<NoLimitClause, OffsetClause<diesel::expression::bound::Bound<BigInt, i64>>>`, which is required by `SelectStatement<FromClause<users::table>, diesel::query_builder::select_clause::DefaultSelectClause<FromClause<users::table>>, diesel::query_builder::distinct_clause::NoDistinctClause, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::order_clause::NoOrderClause, LimitOffsetClause<NoLimitClause, OffsetClause<diesel::expression::bound::Bound<BigInt, i64>>>>: BoxedDsl<'_, _>`
   |
   = help: the following other types implement trait `IntoBoxedClause<'a, DB>`:
             <LimitOffsetClause<L, O> as IntoBoxedClause<'a, Pg>>
             <LimitOffsetClause<LimitClause<L>, NoOffsetClause> as IntoBoxedClause<'a, Mysql>>
             <LimitOffsetClause<LimitClause<L>, NoOffsetClause> as IntoBoxedClause<'a, Sqlite>>
             <LimitOffsetClause<LimitClause<L>, OffsetClause<O>> as IntoBoxedClause<'a, Mysql>>
             <LimitOffsetClause<LimitClause<L>, OffsetClause<O>> as IntoBoxedClause<'a, Sqlite>>
             <LimitOffsetClause<NoLimitClause, NoOffsetClause> as IntoBoxedClause<'a, Mysql>>
             <LimitOffsetClause<NoLimitClause, NoOffsetClause> as IntoBoxedClause<'a, Sqlite>>
             <LimitOffsetClause<NoLimitClause, OffsetClause<O>> as IntoBoxedClause<'a, Sqlite>>
   = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, ..., ..., ...>` to implement `BoxedDsl<'_, Mysql>`
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `LimitOffsetClause<NoLimitClause, OffsetClause<diesel::expression::bound::Bound<BigInt, i64>>>: IntoBoxedClause<'_, Mysql>` is not satisfied
  --> tests/fail/mysql_does_not_support_offset_without_limit.rs:18:29
   |
18 |     users::table.offset(42).into_boxed().get_result::<(i32, String)>(&mut connection);
   |                             ^^^^^^^^^^ the trait `IntoBoxedClause<'_, Mysql>` is not implemented for `LimitOffsetClause<NoLimitClause, OffsetClause<diesel::expression::bound::Bound<BigInt, i64>>>`, which is required by `SelectStatement<FromClause<users::table>, diesel::query_builder::select_clause::DefaultSelectClause<FromClause<users::table>>, diesel::query_builder::distinct_clause::NoDistinctClause, diesel::query_builder::where_clause::NoWhereClause, diesel::query_builder::order_clause::NoOrderClause, LimitOffsetClause<NoLimitClause, OffsetClause<diesel::expression::bound::Bound<BigInt, i64>>>>: BoxedDsl<'_, _>`
   |
   = help: the following other types implement trait `IntoBoxedClause<'a, DB>`:
             <LimitOffsetClause<L, O> as IntoBoxedClause<'a, Pg>>
             <LimitOffsetClause<LimitClause<L>, NoOffsetClause> as IntoBoxedClause<'a, Mysql>>
             <LimitOffsetClause<LimitClause<L>, NoOffsetClause> as IntoBoxedClause<'a, Sqlite>>
             <LimitOffsetClause<LimitClause<L>, OffsetClause<O>> as IntoBoxedClause<'a, Mysql>>
             <LimitOffsetClause<LimitClause<L>, OffsetClause<O>> as IntoBoxedClause<'a, Sqlite>>
             <LimitOffsetClause<NoLimitClause, NoOffsetClause> as IntoBoxedClause<'a, Mysql>>
             <LimitOffsetClause<NoLimitClause, NoOffsetClause> as IntoBoxedClause<'a, Sqlite>>
             <LimitOffsetClause<NoLimitClause, OffsetClause<O>> as IntoBoxedClause<'a, Sqlite>>
   = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, ..., ..., ...>` to implement `BoxedDsl<'_, Mysql>`
note: required by a bound in `diesel::QueryDsl::into_boxed`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn into_boxed<'a, DB>(self) -> IntoBoxed<'a, Self, DB>
   |        ---------- required by a bound in this associated function
...
   |         Self: methods::BoxedDsl<'a, DB>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `QueryDsl::into_boxed`
   = note: consider using `--verbose` to print the full type name to the console
