error[E0277]: the trait bound `i32: FromSqlRow<diesel::sql_types::Text, Pg>` is not satisfied
  --> tests/fail/selectable_with_typemisamatch.rs:17:11
   |
17 |     name: i32,
   |           ^^^ the trait `FromSql<diesel::sql_types::Text, Pg>` is not implemented for `i32`, which is required by `i32: FromSqlRow<diesel::sql_types::Text, Pg>`
   |
   = note: double check your type mappings via the documentation of `diesel::sql_types::Text`
   = note: `diesel::sql_query` requires the loading target to column names for loading values.
           You need to provide a type that explicitly derives `diesel::deserialize::QueryableByName`
   = help: the following other types implement trait `FromSql<A, DB>`:
             <i32 as FromSql<diesel::sql_types::Integer, Mysql>>
             <i32 as FromSql<diesel::sql_types::Integer, Pg>>
             <i32 as FromSql<diesel::sql_types::Integer, Sqlite>>
   = note: required for `i32` to implement `diesel::Queryable<diesel::sql_types::Text, Pg>`
   = note: required for `i32` to implement `FromSqlRow<diesel::sql_types::Text, Pg>`
   = help: see issue #48214

error[E0277]: cannot deserialize a value of the database type `diesel::sql_types::Integer` as `*const str`
  --> tests/fail/selectable_with_typemisamatch.rs:16:9
   |
16 |     id: String,
   |         ^^^^^^ the trait `FromSql<diesel::sql_types::Integer, Pg>` is not implemented for `*const str`, which is required by `std::string::String: FromSqlRow<diesel::sql_types::Integer, Pg>`
   |
   = note: double check your type mappings via the documentation of `diesel::sql_types::Integer`
   = help: the following other types implement trait `FromSql<A, DB>`:
             <*const str as FromSql<diesel::sql_types::Text, Mysql>>
             <*const str as FromSql<diesel::sql_types::Text, Pg>>
             <*const str as FromSql<diesel::sql_types::Text, Sqlite>>
   = note: required for `std::string::String` to implement `FromSql<diesel::sql_types::Integer, Pg>`
   = note: required for `std::string::String` to implement `diesel::Queryable<diesel::sql_types::Integer, Pg>`
   = note: required for `std::string::String` to implement `FromSqlRow<diesel::sql_types::Integer, Pg>`
   = help: see issue #48214

error[E0277]: the trait bound `diesel::expression::select_by::SelectBy<User, _>: load_dsl::private::CompatibleType<_, _>` is not satisfied
  --> tests/fail/selectable_with_typemisamatch.rs:33:15
   |
33 |         .load(&mut conn)
   |          ---- ^^^^^^^^^ the trait `load_dsl::private::CompatibleType<_, _>` is not implemented for `diesel::expression::select_by::SelectBy<User, _>`, which is required by `SelectStatement<FromClause<users::table>, diesel::query_builder::select_clause::SelectClause<diesel::expression::select_by::SelectBy<User, _>>>: LoadQuery<'_, _, _>`
   |          |
   |          required by a bound introduced by this call
   |
   = note: this is a mismatch between what your query returns and what your type expects the query to return
   = note: the fields in your struct need to match the fields returned by your query in count, order and type
   = note: consider using `#[derive(Selectable)]` or #[derive(QueryableByName)] + `#[diesel(check_for_backend(_))]`
           on your struct `_` and in your query `.select(_::as_select())` to get a better error message
   = help: the trait `load_dsl::private::CompatibleType<U, DB>` is implemented for `diesel::expression::select_by::SelectBy<U, DB>`
   = note: required for `SelectStatement<FromClause<table>, SelectClause<SelectBy<User, _>>>` to implement `LoadQuery<'_, _, _>`
note: required by a bound in `diesel::RunQueryDsl::load`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
   |        ---- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`
   = note: consider using `--verbose` to print the full type name to the console
